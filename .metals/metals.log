2023.09.13 11:10:12 INFO  Started: Metals version 1.0.1 in folders 'C:\vs code\Scala' for client Visual Studio Code 1.82.0.
Sep 13, 2023 11:10:12 AM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.21.2 by Redgate
Sep 13, 2023 11:10:12 AM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Sep 13, 2023 11:10:12 AM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Sep 13, 2023 11:10:12 AM org.flywaydb.core.FlywayExecutor execute
INFO: Database: jdbc:h2:file:C:\vs code\Scala\.metals\metals (H2 2.1)
Sep 13, 2023 11:10:12 AM org.flywaydb.core.internal.schemahistory.JdbcTableSchemaHistory allAppliedMigrations
INFO: Schema history table "PUBLIC"."flyway_schema_history" does not exist yet
Sep 13, 2023 11:10:12 AM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.014s)
Sep 13, 2023 11:10:12 AM org.flywaydb.core.internal.schemahistory.JdbcTableSchemaHistory create
INFO: Creating Schema History table "PUBLIC"."flyway_schema_history" ...
Sep 13, 2023 11:10:13 AM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": << Empty Schema >>
Sep 13, 2023 11:10:13 AM org.flywaydb.core.internal.command.DbMigrate doMigrateGroup
INFO: Migrating schema "PUBLIC" to version "1 - Create tables"
Sep 13, 2023 11:10:13 AM org.flywaydb.core.internal.command.DbMigrate doMigrateGroup
INFO: Migrating schema "PUBLIC" to version "2 - Server discovery"
Sep 13, 2023 11:10:13 AM org.flywaydb.core.internal.command.DbMigrate doMigrateGroup
INFO: Migrating schema "PUBLIC" to version "3 - Jar symbols"
Sep 13, 2023 11:10:13 AM org.flywaydb.core.internal.command.DbMigrate doMigrateGroup
INFO: Migrating schema "PUBLIC" to version "4 - Fingerprints"
Sep 13, 2023 11:10:13 AM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Successfully applied 4 migrations to schema "PUBLIC", now at version v4 (execution time 00:00.021s)
2023.09.13 11:10:13 INFO  time: initialize in 0.48s
2023.09.13 11:10:14 WARN  Build server is not auto-connectable.
2023.09.13 11:10:14 WARN  no build target for: C:\vs code\Scala\src\main\scala\lab0\Lists.scala
2023.09.13 11:10:19 INFO  running 'C:\Program Files\Java\jdk-17\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\miruh\AppData\Local\Temp\metals17691527816247026420\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2023.09.13 11:10:19 ERROR [info] [launcher] getting org.scala-sbt sbt 1.7.1  (this may take some time)...
2023.09.13 11:10:31 INFO  no build target found for C:\vs code\Scala\src\main\scala\lab0\Lists.scala. Using presentation compiler with project's scala-library version: 3.3.0
2023.09.13 11:10:33 INFO  time: code lens generation in 18s
2023.09.13 11:10:51 ERROR [info] [launcher] getting Scala 2.12.16 (for sbt)...
2023.09.13 11:10:53 INFO  [info] welcome to sbt 1.7.1 (Oracle Corporation Java 17.0.8)
2023.09.13 11:10:55 INFO  [info] loading settings for project scala-build-build from metals.sbt ...
2023.09.13 11:10:55 INFO  [info] loading project definition from C:\vs code\Scala\project\project
2023.09.13 11:11:01 INFO  [info] loading settings for project scala-build from metals.sbt ...
2023.09.13 11:11:01 INFO  [info] loading project definition from C:\vs code\Scala\project
2023.09.13 11:11:10 INFO  [success] Generated .bloop\scala-build.json
2023.09.13 11:11:10 INFO  [success] Total time: 9 s, completed Sep 13, 2023, 11:11:10 AM
2023.09.13 11:11:12 INFO  [info] loading settings for project scala from build.sbt ...
2023.09.13 11:11:12 INFO  [info] set current project to scala (in build file:/C:/vs%20code/Scala/)
2023.09.13 11:11:38 INFO  [success] Generated .bloop\scala-test.json
2023.09.13 11:11:38 INFO  [success] Generated .bloop\scala.json
2023.09.13 11:11:38 INFO  [success] Total time: 26 s, completed Sep 13, 2023, 11:11:38 AM
2023.09.13 11:11:38 INFO  time: ran 'sbt bloopInstall' in 1m19s
2023.09.13 11:11:38 INFO  Attempting to connect to the build server...
2023.09.13 11:11:38 INFO  Setting up current java home C:\Program Files\Java\jdk-17 in C:\Users\miruh\.bloop\bloop.json
2023.09.13 11:12:15 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.09.13 11:12:15 INFO  Attempting to connect to the build server...
2023.09.13 11:12:15 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.09.13 11:12:15 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\project\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.09.13 11:12:21 INFO  time: Connected to build server in 43s
2023.09.13 11:12:21 INFO  Connected to Build server: Bloop v1.5.8
2023.09.13 11:12:21 INFO  time: Imported build in 0.11s
2023.09.13 11:12:36 INFO  time: indexed workspace in 14s
2023.09.13 11:12:37 INFO  compiling scala (1 scala source)
2023.09.13 11:12:41 INFO  compiling scala-test (1 scala source)
2023.09.13 11:12:41 INFO  time: compiled scala in 4.16s
2023.09.13 11:12:42 INFO  time: compiled scala-test in 1.07s
Sep 13, 2023 11:32:10 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: scala.meta.internal.metals.debug.DebugProvider$NoRunOptionException$: There is nothing to run or test in the current file.
java.util.concurrent.CompletionException: scala.meta.internal.metals.debug.DebugProvider$NoRunOptionException$: There is nothing to run or test in the current file.
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:332)
	at java.base/java.util.concurrent.CompletableFuture.uniAcceptNow(CompletableFuture.java:747)
	at java.base/java.util.concurrent.CompletableFuture.uniAcceptStage(CompletableFuture.java:735)
	at java.base/java.util.concurrent.CompletableFuture.thenAcceptAsync(CompletableFuture.java:2186)
	at scala.concurrent.java8.FuturesConvertersImpl$CF.thenAccept(FutureConvertersImpl.scala:37)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:279)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: scala.meta.internal.metals.debug.DebugProvider$NoRunOptionException$: There is nothing to run or test in the current file.
	at scala.meta.internal.metals.debug.DebugProvider$NoRunOptionException$.<clinit>(DebugProvider.scala:919)
	at scala.meta.internal.metals.debug.DebugProvider.$anonfun$resolveInFile$2(DebugProvider.scala:371)
	at scala.Option.fold(Option.scala:263)
	at scala.meta.internal.metals.debug.DebugProvider.resolveInFile(DebugProvider.scala:342)
	at scala.meta.internal.metals.debug.DebugProvider.debugDiscovery(DebugProvider.scala:476)
	at scala.meta.internal.metals.debug.DebugProvider.runCommandDiscovery(DebugProvider.scala:420)
	at scala.meta.internal.metals.MetalsLspService.discoverMainClasses(MetalsLspService.scala:1676)
	at scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:686)
	at scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	... 9 more

2023.09.13 11:35:58 WARN  no build target for: C:\vs code\Scala\project\metals.sbt
2023.09.13 11:36:26 INFO  tracing is disabled for protocol dap-server, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\dap-server.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\dap-server.trace.json
2023.09.13 11:36:26 INFO  tracing is disabled for protocol dap-client, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\dap-client.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\dap-client.trace.json
2023.09.13 11:36:26 INFO  Starting debug proxy for [lab0.ListsSuite()]
2023.09.13 11:36:28 INFO  Trying to attach to remote debuggee VM view-localhost:53415 .
2023.09.13 11:36:28 INFO  Attaching to debuggee VM succeeded.
2023.09.13 11:36:28 INFO  Canceling debug proxy for [lab0.ListsSuite()]
2023.09.13 11:36:28 INFO  Closing debug server tcp://0.0.0.0:53409
2023.09.13 11:48:39 INFO  Shutting down server
2023.09.13 11:48:39 INFO  shutting down Metals
2023.09.13 11:48:39 INFO  Shut down connection with build server.
2023.09.13 11:48:39 INFO  Shut down connection with build server.
2023.09.13 11:48:39 INFO  Exiting server
2023.09.13 11:49:00 INFO  Started: Metals version 1.0.1 in folders 'C:\vs code\Scala' for client Visual Studio Code 1.82.1.
Sep 13, 2023 11:49:00 AM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.21.2 by Redgate
Sep 13, 2023 11:49:00 AM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Sep 13, 2023 11:49:00 AM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Sep 13, 2023 11:49:01 AM org.flywaydb.core.FlywayExecutor execute
INFO: Database: jdbc:h2:file:C:\vs code\Scala\.metals\metals (H2 2.1)
Sep 13, 2023 11:49:01 AM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.018s)
Sep 13, 2023 11:49:01 AM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Sep 13, 2023 11:49:01 AM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.09.13 11:49:01 INFO  time: initialize in 0.61s
2023.09.13 11:49:03 INFO  Attempting to connect to the build server...
2023.09.13 11:49:03 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.09.13 11:49:03 INFO  skipping build import with status 'Installed'
2023.09.13 11:49:03 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.09.13 11:49:03 INFO  Attempting to connect to the build server...
2023.09.13 11:49:03 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.09.13 11:49:03 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\project\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.09.13 11:49:03 INFO  time: Connected to build server in 0.25s
2023.09.13 11:49:03 INFO  Connected to Build server: Bloop v1.5.8
2023.09.13 11:49:07 INFO  no build target found for C:\vs code\Scala\src\test\scala\lab0\ListsSuite.scala. Using presentation compiler with project's scala-library version: 3.3.0
2023.09.13 11:49:07 INFO  time: code lens generation in 4.01s
2023.09.13 11:49:07 INFO  time: Imported build in 0.19s
2023.09.13 11:49:11 INFO  no build target found for C:\vs code\Scala\src\test\scala\lab0\ListsSuite.scala. Using presentation compiler with project's scala-library version: 3.3.0
2023.09.13 11:49:13 INFO  time: code lens generation in 9.66s
2023.09.13 11:49:20 INFO  time: indexed workspace in 12s
2023.09.13 11:49:20 INFO  compiling scala (1 scala source)
2023.09.13 11:49:25 INFO  time: compiled scala in 5.19s
2023.09.13 11:49:25 INFO  compiling scala-test (1 scala source)
2023.09.13 11:49:25 INFO  time: compiled scala-test in 752?s
Sep 13, 2023 11:49:25 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8
2023.09.13 12:36:00 INFO  Shutting down server
2023.09.13 12:36:00 INFO  shutting down Metals
2023.09.13 12:36:00 INFO  Shut down connection with build server.
2023.09.13 12:36:00 INFO  Shut down connection with build server.
2023.09.13 12:36:00 INFO  Exiting server
2023.09.15 10:50:02 INFO  Started: Metals version 1.0.1 in folders 'C:\vs code\Scala' for client Visual Studio Code 1.82.1.
Sep 15, 2023 10:50:03 AM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.21.2 by Redgate
Sep 15, 2023 10:50:03 AM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Sep 15, 2023 10:50:03 AM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Sep 15, 2023 10:50:08 AM org.flywaydb.core.FlywayExecutor execute
INFO: Database: jdbc:h2:file:C:\vs code\Scala\.metals\metals (H2 2.1)
Sep 15, 2023 10:50:08 AM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.120s)
Sep 15, 2023 10:50:08 AM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Sep 15, 2023 10:50:08 AM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.09.15 10:50:09 INFO  time: initialize in 7.34s
2023.09.15 10:50:34 INFO  Attempting to connect to the build server...
2023.09.15 10:50:34 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.09.15 10:50:35 INFO  skipping build import with status 'Installed'
2023.09.15 10:50:48 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.09.15 10:50:48 INFO  Attempting to connect to the build server...
2023.09.15 10:50:48 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.09.15 10:50:48 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\project\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.09.15 10:50:48 INFO  time: Connected to build server in 14s
2023.09.15 10:50:48 INFO  Connected to Build server: Bloop v1.5.8
2023.09.15 10:50:50 INFO  no build target found for C:\vs code\Scala\src\test\scala\lab0\ListsSuite.scala. Using presentation compiler with project's scala-library version: 3.3.0
2023.09.15 10:50:50 INFO  time: code lens generation in 16s
2023.09.15 10:50:51 INFO  time: Imported build in 0.39s
2023.09.15 10:50:57 INFO  time: indexed workspace in 6.51s
2023.09.15 10:50:59 INFO  compiling scala (1 scala source)
2023.09.15 10:51:09 INFO  compiling scala-test (1 scala source)
2023.09.15 10:51:09 INFO  time: compiled scala in 10s
2023.09.15 10:51:16 INFO  time: compiled scala-test in 6.21s
Sep 15, 2023 10:52:10 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 27
2023.09.15 11:56:58 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.09.15 11:56:58 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.09.15 11:56:58 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.09.15 11:56:58 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.09.15 11:56:58 INFO  Connected to Build server: Bloop v1.5.8
2023.09.15 11:56:58 INFO  Connected to Build server: Bloop v1.5.8
2023.09.15 11:56:58 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.09.15 11:56:58 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\project\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.09.15 11:56:58 INFO  compiling scala (1 scala source)
2023.09.15 11:57:00 INFO  time: compiled scala in 1.42s
2023.09.15 11:57:00 INFO  time: Imported build in 1.54s
2023.09.15 11:57:03 INFO  time: indexed workspace in 2.95s
2023.09.15 11:57:03 ERROR Empty build targets. Expected at least one build target identifier.
2023.09.15 11:57:03 INFO  no build target found for C:\vs code\Scala\src\main\scala\lab0\Lists.scala. Using presentation compiler with project's scala-library version: 3.3.0
Sep 15, 2023 11:57:03 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 112
2023.09.15 11:57:05 INFO  time: code lens generation in 5.23s
2023.09.15 11:57:05 INFO  time: code lens generation in 2s
2023.09.15 11:57:05 INFO  time: code lens generation in 1.92s
Sep 15, 2023 11:59:37 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 379
Sep 15, 2023 12:00:07 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 436
Sep 15, 2023 12:00:07 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 437
2023.09.15 12:00:59 ERROR Empty build targets. Expected at least one build target identifier.
2023.09.15 12:07:05 ERROR Empty build targets. Expected at least one build target identifier.
2023.09.15 12:12:08 ERROR Empty build targets. Expected at least one build target identifier.
2023.09.15 12:12:30 ERROR Empty build targets. Expected at least one build target identifier.
2023.09.15 12:22:06 ERROR Empty build targets. Expected at least one build target identifier.
Exception in thread "pool-11-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:229)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Sep 15, 2023 12:25:45 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1712
2023.09.15 12:28:43 ERROR Empty build targets. Expected at least one build target identifier.
2023.09.15 12:29:01 ERROR Empty build targets. Expected at least one build target identifier.
2023.09.15 12:31:14 ERROR Empty build targets. Expected at least one build target identifier.
2023.09.15 12:32:29 ERROR Empty build targets. Expected at least one build target identifier.
Sep 15, 2023 12:33:22 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2049
2023.09.15 12:38:09 ERROR Empty build targets. Expected at least one build target identifier.
2023.09.15 12:41:46 INFO  Shutting down server
2023.09.15 12:41:46 INFO  shutting down Metals
2023.09.15 12:41:46 INFO  Shut down connection with build server.
2023.09.15 12:41:46 INFO  Shut down connection with build server.
2023.09.15 12:41:46 INFO  Failed to run request with params WorkspaceBuildTargetsResult
2023.09.15 12:41:46 INFO  Exiting server
2023.09.15 12:42:31 INFO  Started: Metals version 1.0.1 in folders 'C:\vs code\Scala' for client Visual Studio Code 1.82.2.
Sep 15, 2023 12:42:31 PM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.21.2 by Redgate
Sep 15, 2023 12:42:31 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Sep 15, 2023 12:42:31 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Sep 15, 2023 12:42:33 PM org.flywaydb.core.FlywayExecutor execute
INFO: Database: jdbc:h2:file:C:\vs code\Scala\.metals\metals (H2 2.1)
Sep 15, 2023 12:42:33 PM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.100s)
Sep 15, 2023 12:42:33 PM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Sep 15, 2023 12:42:33 PM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.09.15 12:42:33 INFO  time: initialize in 2.35s
2023.09.15 12:42:44 INFO  Attempting to connect to the build server...
2023.09.15 12:42:44 INFO  skipping build import with status 'Installed'
2023.09.15 12:42:44 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.09.15 12:42:44 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.09.15 12:42:45 INFO  Attempting to connect to the build server...
2023.09.15 12:42:45 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.09.15 12:42:45 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\project\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.09.15 12:42:45 INFO  time: Connected to build server in 1.2s
2023.09.15 12:42:45 INFO  Connected to Build server: Bloop v1.5.8
2023.09.15 12:42:53 INFO  no build target found for C:\vs code\Scala\src\test\scala\lab0\ListsSuite.scala. Using presentation compiler with project's scala-library version: 3.3.0
2023.09.15 12:42:53 INFO  time: code lens generation in 10s
2023.09.15 12:42:54 INFO  time: Imported build in 0.16s
2023.09.15 12:42:57 INFO  no build target found for C:\vs code\Scala\src\test\scala\lab0\ListsSuite.scala. Using presentation compiler with project's scala-library version: 3.3.0
2023.09.15 12:43:00 INFO  time: code lens generation in 15s
2023.09.15 12:43:06 INFO  time: indexed workspace in 12s
2023.09.15 12:43:43 INFO  compiling scala (1 scala source)
2023.09.15 12:43:43 INFO  time: compiled scala in 0.53s
2023.09.15 12:43:43 INFO  compiling scala-test (1 scala source)
2023.09.15 12:43:45 INFO  time: compiled scala-test in 0.78s
2023.09.15 12:53:35 INFO  compiling scala-test (1 scala source)
2023.09.15 12:53:35 INFO  time: compiled scala-test in 0.96s
2023.09.15 12:54:05 INFO  compiling scala-test (1 scala source)
2023.09.15 12:54:05 INFO  time: compiled scala-test in 0.63s
2023.09.15 13:40:31 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.09.15 13:40:31 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.09.15 13:40:31 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.09.15 13:40:31 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.09.15 13:40:31 INFO  Connected to Build server: Bloop v1.5.8
2023.09.15 13:40:31 INFO  Connected to Build server: Bloop v1.5.8
2023.09.15 13:40:31 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.09.15 13:40:31 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.09.15 13:40:31 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\project\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.09.15 13:40:31 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\project\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.09.15 13:40:31 INFO  time: Imported build in 0.19s
2023.09.15 13:40:33 INFO  time: indexed workspace in 2.16s
2023.09.15 15:30:14 INFO  Shutting down server
2023.09.15 15:30:14 INFO  shutting down Metals
2023.09.15 15:30:14 ERROR build shutdown: bloop
java.util.concurrent.ExecutionException: org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.io.IOException: Connection reset by peer
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:396)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:117)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:114)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.lang.Thread.run(Thread.java:833)
Caused by: org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.io.IOException: Connection reset by peer
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:44)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.request(RemoteEndpoint.java:161)
	at org.eclipse.lsp4j.jsonrpc.services.EndpointProxy.invoke(EndpointProxy.java:91)
	at jdk.proxy2.$Proxy10.buildShutdown(null)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:117)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:114)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.lang.Thread.run(Thread.java:833)
Caused by: java.io.IOException: Connection reset by peer
	at sun.nio.ch.SocketDispatcher.write0(Native Method)
	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:54)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:132)
	at sun.nio.ch.IOUtil.write(IOUtil.java:97)
	at sun.nio.ch.IOUtil.write(IOUtil.java:53)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:532)
	at sun.nio.ch.SinkChannelImpl.write(SinkChannelImpl.java:123)
	at java.nio.channels.Channels.writeFullyImpl(Channels.java:74)
	at java.nio.channels.Channels.writeFully(Channels.java:93)
	at java.nio.channels.Channels$1.write(Channels.java:171)
	at java.io.OutputStream.write(OutputStream.java:127)
	at java.nio.channels.Channels$1.write(Channels.java:151)
	at scala.meta.internal.metals.ClosableOutputStream.write(ClosableOutputStream.scala:26)
	at java.io.FilterOutputStream.write(FilterOutputStream.java:137)
	at java.io.FilterOutputStream.write(FilterOutputStream.java:108)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:67)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:44)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.request(RemoteEndpoint.java:161)
	at org.eclipse.lsp4j.jsonrpc.services.EndpointProxy.invoke(EndpointProxy.java:91)
	at jdk.proxy2.$Proxy10.buildShutdown(null)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:117)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:114)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.lang.Thread.run(Thread.java:833)

2023.09.15 15:30:14 ERROR build shutdown: bloop
java.util.concurrent.ExecutionException: org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.io.IOException: Connection reset by peer
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:396)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:117)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:114)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.lang.Thread.run(Thread.java:833)
Caused by: org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.io.IOException: Connection reset by peer
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:44)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.request(RemoteEndpoint.java:161)
	at org.eclipse.lsp4j.jsonrpc.services.EndpointProxy.invoke(EndpointProxy.java:91)
	at jdk.proxy2.$Proxy10.buildShutdown(null)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:117)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:114)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.lang.Thread.run(Thread.java:833)
Caused by: java.io.IOException: Connection reset by peer
	at sun.nio.ch.SocketDispatcher.write0(Native Method)
	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:54)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:132)
	at sun.nio.ch.IOUtil.write(IOUtil.java:97)
	at sun.nio.ch.IOUtil.write(IOUtil.java:53)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:532)
	at sun.nio.ch.SinkChannelImpl.write(SinkChannelImpl.java:123)
	at java.nio.channels.Channels.writeFullyImpl(Channels.java:74)
	at java.nio.channels.Channels.writeFully(Channels.java:93)
	at java.nio.channels.Channels$1.write(Channels.java:171)
	at java.io.OutputStream.write(OutputStream.java:127)
	at java.nio.channels.Channels$1.write(Channels.java:151)
	at scala.meta.internal.metals.ClosableOutputStream.write(ClosableOutputStream.scala:26)
	at java.io.FilterOutputStream.write(FilterOutputStream.java:137)
	at java.io.FilterOutputStream.write(FilterOutputStream.java:108)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:68)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:44)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.request(RemoteEndpoint.java:161)
	at org.eclipse.lsp4j.jsonrpc.services.EndpointProxy.invoke(EndpointProxy.java:91)
	at jdk.proxy2.$Proxy10.buildShutdown(null)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:117)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:114)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.lang.Thread.run(Thread.java:833)

2023.09.15 15:30:14 INFO  Failed to run request with params WorkspaceBuildTargetsResult
2023.09.15 15:30:14 INFO  Exiting server
2023.09.18 17:01:44 INFO  Started: Metals version 1.0.1 in folders 'C:\vs code\Scala' for client Visual Studio Code 1.82.2.
Sep 18, 2023 5:01:44 PM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.21.2 by Redgate
Sep 18, 2023 5:01:44 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Sep 18, 2023 5:01:44 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Sep 18, 2023 5:01:45 PM org.flywaydb.core.FlywayExecutor execute
INFO: Database: jdbc:h2:file:C:\vs code\Scala\.metals\metals (H2 2.1)
Sep 18, 2023 5:01:45 PM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.032s)
Sep 18, 2023 5:01:45 PM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Sep 18, 2023 5:01:45 PM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.09.18 17:01:45 INFO  time: initialize in 0.93s
2023.09.18 17:01:48 INFO  Attempting to connect to the build server...
2023.09.18 17:01:48 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.09.18 17:01:48 INFO  skipping build import with status 'Installed'
2023.09.18 17:01:58 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.09.18 17:01:58 INFO  Attempting to connect to the build server...
2023.09.18 17:01:58 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.09.18 17:01:58 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\project\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.09.18 17:01:58 INFO  time: Connected to build server in 11s
2023.09.18 17:01:58 INFO  Connected to Build server: Bloop v1.5.8
2023.09.18 17:02:00 INFO  no build target found for C:\vs code\Scala\src\main\scala\lab0\Lists.scala. Using presentation compiler with project's scala-library version: 3.3.0
2023.09.18 17:02:02 INFO  time: code lens generation in 13s
2023.09.18 17:02:02 INFO  time: Imported build in 0.96s
2023.09.18 17:02:08 INFO  no build target found for C:\vs code\Scala\src\main\scala\lab0\Lists.scala. Using presentation compiler with project's scala-library version: 3.3.0
2023.09.18 17:02:14 INFO  time: code lens generation in 25s
2023.09.18 17:02:24 INFO  time: indexed workspace in 21s
2023.09.18 17:08:10 INFO  compiling scala (1 scala source)
2023.09.18 17:08:16 INFO  compiling scala-test (1 scala source)
2023.09.18 17:08:16 INFO  time: compiled scala in 6.07s
2023.09.18 17:08:18 INFO  time: compiled scala-test in 1.87s
2023.09.18 17:09:22 INFO  Shutting down server
2023.09.18 17:09:22 INFO  shutting down Metals
2023.09.18 17:09:22 INFO  Shut down connection with build server.
2023.09.18 17:09:22 INFO  Shut down connection with build server.
2023.09.18 17:09:22 INFO  Exiting server
2023.09.19 13:01:12 INFO  Started: Metals version 1.0.1 in folders 'C:\vs code\Scala' for client Visual Studio Code 1.82.2.
Sep 19, 2023 1:01:12 PM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.21.2 by Redgate
Sep 19, 2023 1:01:12 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Sep 19, 2023 1:01:12 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Sep 19, 2023 1:01:13 PM org.flywaydb.core.FlywayExecutor execute
INFO: Database: jdbc:h2:file:C:\vs code\Scala\.metals\metals (H2 2.1)
Sep 19, 2023 1:01:13 PM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.070s)
Sep 19, 2023 1:01:13 PM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Sep 19, 2023 1:01:13 PM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.09.19 13:01:13 INFO  time: initialize in 1.59s
Sep 19, 2023 1:01:14 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/vs%20code/Scala/src/test/scala/lab0/ListsSuite.scala",
      "languageId": "scala",
      "version": 1,
      "text": "\n/**\n * This class implements a munit test suite for the methods in object\n * `Lists` that need to be implemented as part of this assignment. A test\n * suite is simply a collection of individual tests for some specific\n * component of a program.\n *\n * To run this test suite, start \"sbt\" then run the \"test\" command.\n */\nclass ListsSuite extends munit.FunSuite:\n\n  /**\n   * Tests are written using the `test(\"description\") { ... }` syntax\n   * The most common way to implement a test body is using the method `assert`\n   * which tests that its argument evaluates to `true`. So one of the simplest\n   * successful tests is the following:\n   */\n  test(\"one plus one is two\") {\n    assert(1 + 1 \u003d\u003d 2)\n  }\n\n  test(\"one plus one is three?\") {\n    assert(1 + 1 \u003d\u003d 2) // This assertion fails! Go ahead and fix it.\n  }\n\n  /**\n   * One problem with the previous (failing) test is that munit will\n   * only tell you that a test failed, but it will not tell you what was\n   * the reason for the failure. The output looks like this:\n   *\n   * {{{\n   * \u003d\u003d\u003e X lab1.ListSuite.one plus one is three?  0.007s munit.FailException: /tmp/lab0/src/test/scala/lab0/ListSuite.scala:26 assertion failed\n   * 25:  test(\"one plus one is two\") {\n   * 26:      assert(1 + 1 \u003d\u003d 3)\n   * 27:  }\n   * }}}\n   *\n   * This situation can be improved by using a assertEquals\n   * (this is only possible in munit). So if you\n   * run the next test, munit will show the following output:\n   *\n   * {{{\n   * \u003d\u003d\u003e X lab1.ListSuite.details why one plus one is not three  0.006s munit.FailException: /tmp/lab0/src/test/scala/lab0/ListSuite.scala:72\n   * 71:  test(\"details why one plus one is not three\") {\n   * 72:      assertEquals(1 + 1, 3) // Fix me, please!\n   * 73:  }\n   * values are not the same\n   * \u003d\u003e Obtained\n   * 3\n   * \u003d\u003e Diff (- obtained, + expected)\n   * -3\n   * +2\n   * }}}\n   *\n   * We recommend to always use the assertEquals equality operator\n   * when writing tests.\n   */\n  test(\"details why one plus one is not three\") {\n    assertEquals(1 + 1, 2) // Fix me, please!\n  }\n\n  /**\n   * Exceptional behavior of a methods can be tested using a try/catch\n   * and a failed assertion.\n   *\n   * In the following example, we test the fact that the method `intNotZero`\n   * throws an `IllegalArgumentException` if its argument is `0`.\n   */\n   test(\"intNotZero throws an exception if its argument is 0\") {\n     try\n       intNotZero(0)\n       fail(\"No exception has been thrown\")\n     catch\n       case e: IllegalArgumentException \u003d\u003e ()\n   }\n\n   def intNotZero(x: Int): Int \u003d\n     if x \u003d\u003d 0 then throw IllegalArgumentException(\"zero is not allowed\")\n     else x\n\n  /**\n   * Now we finally write some tests for the list functions that have to be\n   * implemented for this assignment. We fist import all members of the\n   * `List` object.\n   */\n  import Lists.*\n\n\n  /**\n   * We only provide two very basic tests for you. Write more tests to make\n   * sure your `sum` and `max` methods work as expected.\n   *\n   * In particular, write tests for corner cases: negative numbers, zeros,\n   * empty lists, lists with repeated elements, etc.\n   *\n   * It is allowed to have multiple `assert` statements inside one test,\n   * however it is recommended to write an individual `test` statement for\n   * every tested aspect of a method.\n   */\n  test(\"sum of a few numbers\") {\n    assert(sum(List(1, 2, 0)) \u003d\u003d 3)\n  }\n\n  test(\"max of a few numbers\") {\n    assert(max(List(3, 7, 2)) \u003d\u003d 7)\n  }\n\n  import scala.concurrent.duration.*\n  override val munitTimeout \u003d 1.seconds\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.NoSuchFileException: c:\vs code\Scala\src\test\scala\lab0\ListsSuite.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:236)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:380)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:432)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3288)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.metals.MetalsLspService.didOpen(MetalsLspService.scala:986)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:320)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 16 more

Sep 19, 2023 1:01:14 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/vs%20code/Scala/src/main/scala/lab0/Lists.scala",
      "languageId": "scala",
      "version": 1,
      "text": "\nimport scala.annotation.tailrec\n\nobject Lists:\n\n  /**\n   * This method computes the sum of all elements in the list xs. There are\n   * multiple techniques that can be used for implementing this method, and\n   * you will learn during the class.\n   *\n   * For this example assignment you can use the following methods in class\n   * `List`:\n   *\n   *  - `xs.isEmpty: Boolean` returns `true` if the list `xs` is empty\n   *  - `xs.head: Int` returns the head element of the list `xs`. If the list\n   *    is empty an exception is thrown\n   *  - `xs.tail: List[Int]` returns the tail of the list `xs`, i.e. the the\n   *    list `xs` without its `head` element\n   *\n   *  \u0027\u0027Hint:\u0027\u0027 instead of writing a `for` or `while` loop, think of a recursive\n   *  solution.\n   *\n   * @param xs A list of natural numbers\n   * @return The sum of all elements in `xs`\n   */\n  def sum(xs: List[Int]): Int \u003d\n    @tailrec\n    def rec(xs: List[Int], acc: Int): Int \u003d\n      if xs.isEmpty then\n        acc\n      else \n        rec(xs.tail, acc + xs.head)\n\n    rec(xs, 0) \n  \n\n  /**\n   * This method returns the largest element in a list of integers. If the\n   * list `xs` is empty it throws a `java.util.NoSuchElementException`.\n   *\n   * You can use the same methods of the class `List` as mentioned above.\n   *\n   * \u0027\u0027Hint:\u0027\u0027 Again, think of a recursive solution instead of using looping\n   * constructs. You might need to define an auxiliary method.\n   *\n   * @param xs A list of natural numbers\n   * @return The largest element in `xs`\n   * @throws java.util.NoSuchElementException if `xs` is an empty list\n   */\n  def max(xs: List[Int]): Int \u003d\n    @tailrec\n    def rec(xs: List[Int], acc: Int): Int \u003d\n      if xs.isEmpty then\n        acc\n      else \n        rec(xs.tail, if xs.head \u003e acc then xs.head else acc)\n\n    if xs.isEmpty then\n      throw java.util.NoSuchElementException()\n    else\n      rec(xs.tail, xs.head)"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.NoSuchFileException: c:\vs code\Scala\src\main\scala\lab0\Lists.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:236)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:380)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:432)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3288)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.metals.MetalsLspService.didOpen(MetalsLspService.scala:986)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:320)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 16 more

Sep 19, 2023 1:01:14 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/vs%20code/Scala/src/main/scala/lab1/Recursion.scala",
      "languageId": "scala",
      "version": 1,
      "text": "\nimport scala.annotation.tailrec\n\nobject Recursion:\n\n  def main(args: Array[String]): Unit \u003d\n    println(\"Pascal\u0027s Triangle\")\n    for row \u003c- 0 to 10 do\n      for col \u003c- 0 to row do\n        print(s\"${pascal(col, row)} \")\n      println()\n\n  /**\n   * Exercise 1\n   */\n  def pascal(c: Int, r: Int): Int \u003d ???\n\n  /**\n   * Exercise 2\n   */\n  def balance(chars: List[Char]): Boolean \u003d ???\n\n  /**\n   * Exercise 3\n   */\n  def countChange(money: Int, coins: List[Int]): Int \u003d ???\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.NoSuchFileException: c:\vs code\Scala\src\main\scala\lab1\Recursion.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:236)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:380)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:432)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3288)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.metals.MetalsLspService.didOpen(MetalsLspService.scala:986)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:320)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 16 more

Sep 19, 2023 1:01:14 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/vs%20code/Scala/src/test/scala/lab1/RecursionSuite.scala",
      "languageId": "scala",
      "version": 1,
      "text": "\nclass RecursionSuite extends munit.FunSuite:\n  import Recursion.*\n\n  // ------ balance tests -----------------------------------------------------\n\n  test(\"balance: \u0027(if (zero? x) max (/ 1 x))\u0027 is balanced\") {\n    assert(balance(\"(if (zero? x) max (/ 1 x))\".toList))\n  }\n\n  test(\"balance: \u0027I told him ...\u0027 is balanced\") {\n    assert(balance(\"I told him (that it\u0027s not (yet) done).\\n(But he wasn\u0027t listening)\".toList))\n  }\n\n  test(\"balance: \u0027:-)\u0027 is unbalanced\") {\n    assert(!balance(\":-)\".toList))\n  }\n\n  test(\"balance: counting is not enough\") {\n    assert(!balance(\"())(\".toList))\n  }\n\n  // ------ countChange tests -------------------------------------------------\n\n  test(\"countChange: example given in the guide\") {\n    assertEquals(countChange(4,List(1,2)), 3)\n  }\n\n  test(\"countChange: sorted HKD\") {\n    assertEquals(countChange(300,List(5,10,20,50,100,200,500)), 1022)\n  }\n\n  test(\"countChange: no pennies\") {\n    assertEquals(countChange(301,List(5,10,20,50,100,200,500)), 0)\n  }\n\n  test(\"countChange: unsorted HKD\") {\n    assertEquals(countChange(300,List(500,5,50,100,20,200,10)), 1022)\n  }\n\n  // ------ pascal tests ------------------------------------------------------\n\n  test(\"pascal: col\u003d0,row\u003d2\") {\n    assertEquals(pascal(0, 2), 1)\n  }\n\n  test(\"pascal: col\u003d1,row\u003d2\") {\n    assertEquals(pascal(1, 2), 2)\n  }\n\n  test(\"pascal: col\u003d1,row\u003d3\") {\n    assertEquals(pascal(1, 3), 3)\n  }\n\n  test(\"pascal: col\u003d3,row\u003d8\") {\n    assertEquals(pascal(3, 8), 56)\n  }\n\n  import scala.concurrent.duration.*\n  override val munitTimeout \u003d 10.seconds\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.NoSuchFileException: c:\vs code\Scala\src\test\scala\lab1\RecursionSuite.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:236)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:380)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:432)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3288)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.metals.MetalsLspService.didOpen(MetalsLspService.scala:986)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:320)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 16 more

Sep 19, 2023 1:01:18 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.util.NoSuchElementException: BatchedFunction
java.util.concurrent.CompletionException: java.util.NoSuchElementException: BatchedFunction
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:332)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:347)
	at java.base/java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:708)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2162)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.util.NoSuchElementException: BatchedFunction
	at scala.meta.internal.metals.BatchedFunction.<init>(BatchedFunction.scala:88)
	at scala.meta.internal.metals.MetalsLspService.<init>(MetalsLspService.scala:260)
	at scala.meta.internal.metals.WorkspaceLspService.createService(WorkspaceLspService.scala:174)
	at scala.meta.internal.metals.WorkspaceLspService.$anonfun$workspaceFolders$1(WorkspaceLspService.scala:181)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.meta.internal.metals.WorkspaceFolders.<init>(WorkspaceFolders.scala:20)
	at scala.meta.internal.metals.WorkspaceLspService.<init>(WorkspaceLspService.scala:179)
	at scala.meta.metals.MetalsLanguageServer.createService(MetalsLanguageServer.scala:210)
	at scala.meta.metals.MetalsLanguageServer.initialize(MetalsLanguageServer.scala:162)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	... 3 more

2023.09.19 13:01:18 ERROR text document: file:///c:/vs%20code/Scala/src/test/scala/lab0/ListsSuite.scala
java.nio.file.NoSuchFileException: c:\vs code\Scala\src\test\scala\lab0\ListsSuite.scala
	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:236)
	at java.nio.file.Files.newByteChannel(Files.java:380)
	at java.nio.file.Files.newByteChannel(Files.java:432)
	at java.nio.file.Files.readAllBytes(Files.java:3288)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.metals.InteractiveSemanticdbs.$anonfun$textDocument$2(InteractiveSemanticdbs.scala:90)
	at scala.Option.getOrElse(Option.scala:201)
	at scala.meta.internal.metals.InteractiveSemanticdbs.$anonfun$textDocument$1(InteractiveSemanticdbs.scala:90)
	at java.util.HashMap.compute(HashMap.java:1316)
	at java.util.Collections$SynchronizedMap.compute(Collections.java:2770)
	at scala.meta.internal.metals.InteractiveSemanticdbs.textDocument(InteractiveSemanticdbs.scala:89)
	at scala.meta.internal.metals.InteractiveSemanticdbs.textDocument(InteractiveSemanticdbs.scala:63)
	at scala.meta.internal.metals.AggregateSemanticdbs.loop$1(AggregateSemanticdbs.scala:30)
	at scala.meta.internal.metals.AggregateSemanticdbs.textDocument(AggregateSemanticdbs.scala:36)
	at scala.meta.internal.metals.CodeLensProvider.findLenses(CodeLensProvider.scala:22)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeLens$2(MetalsLspService.scala:1574)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeLens$1(MetalsLspService.scala:1572)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$apply$2(CancelTokens.scala:26)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.lang.Thread.run(Thread.java:833)

2023.09.19 13:01:18 INFO  Attempting to connect to the build server...
2023.09.19 13:01:18 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.09.19 13:01:18 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.09.19 13:01:18 INFO  time: Connected to build server in 0.56s
2023.09.19 13:01:18 INFO  Connected to Build server: Bloop v1.5.8
2023.09.19 13:01:19 INFO  time: Imported build in 0.13s
2023.09.19 13:01:26 INFO  time: indexed workspace in 7.04s
2023.09.19 13:01:26 WARN  no build target for: C:\vs code\Scala\lab 1\src\main\scala\lab1\Recursion.scala
2023.09.19 13:01:30 INFO  no build target found for C:\vs code\Scala\lab 1\src\main\scala\lab1\Recursion.scala. Using presentation compiler with project's scala-library version: 3.1.3
2023.09.19 13:01:31 WARN  no build target for: C:\vs code\Scala\lab 1\src\main\scala\lab1\Recursion.scala
2023.09.19 13:01:36 INFO  time: code lens generation in 5.25s
2023.09.19 13:01:36 INFO  time: code lens generation in 5.23s
2023.09.24 00:21:55 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.09.24 00:21:55 INFO  Shutting down server
2023.09.24 00:21:55 INFO  shutting down Metals
2023.09.24 00:21:55 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.09.24 00:21:55 INFO  Connected to Build server: Bloop v1.5.8
2023.09.24 00:21:55 INFO  Shut down connection with build server.
Sep 24, 2023 12:21:55 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint notify
INFO: Failed to send notification message.
org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.nio.channels.ClosedChannelException
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:44)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.notify(RemoteEndpoint.java:126)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.sendCancelNotification(RemoteEndpoint.java:180)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint$1.cancel(RemoteEndpoint.java:150)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$2(BuildServerConnection.scala:349)
	at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.scala:17)
	at scala.util.Try$.apply(Try.scala:210)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$1(BuildServerConnection.scala:349)
	at scala.meta.internal.metals.Cancelable$$anon$1.cancel(Cancelable.scala:18)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.BuildServerConnection.cancel(BuildServerConnection.scala:285)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:122)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:114)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.nio.channels.ClosedChannelException
	at java.base/sun.nio.ch.SocketChannelImpl.ensureOpenAndConnected(SocketChannelImpl.java:215)
	at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:527)
	at java.base/sun.nio.ch.SinkChannelImpl.write(SinkChannelImpl.java:123)
	at java.base/java.nio.channels.Channels.writeFullyImpl(Channels.java:74)
	at java.base/java.nio.channels.Channels.writeFully(Channels.java:93)
	at java.base/java.nio.channels.Channels$1.write(Channels.java:171)
	at java.base/java.io.OutputStream.write(OutputStream.java:127)
	at java.base/java.nio.channels.Channels$1.write(Channels.java:151)
	at scala.meta.internal.metals.ClosableOutputStream.write(ClosableOutputStream.scala:26)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:137)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:108)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:67)
	... 20 more

2023.09.24 00:21:55 INFO  Failed to run request with params WorkspaceBuildTargetsResult
2023.09.24 00:21:55 INFO  Cancelling compilation on Bloop server
2023.09.24 00:21:55 INFO  Exiting server
2023.09.24 16:54:19 INFO  Started: Metals version 1.0.1 in folders 'C:\vs code\Scala' for client Visual Studio Code 1.82.2.
Sep 24, 2023 4:54:19 PM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.21.2 by Redgate
Sep 24, 2023 4:54:19 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Sep 24, 2023 4:54:19 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Sep 24, 2023 4:54:19 PM org.flywaydb.core.FlywayExecutor execute
INFO: Database: jdbc:h2:file:C:\vs code\Scala\.metals\metals (H2 2.1)
Sep 24, 2023 4:54:19 PM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.022s)
Sep 24, 2023 4:54:19 PM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Sep 24, 2023 4:54:19 PM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.09.24 16:54:19 INFO  time: initialize in 0.59s
2023.09.24 16:54:21 INFO  Attempting to connect to the build server...
2023.09.24 16:54:21 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.09.24 16:54:21 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.09.24 16:54:21 INFO  time: Connected to build server in 0.47s
2023.09.24 16:54:21 INFO  Connected to Build server: Bloop v1.5.8
2023.09.24 16:54:26 INFO  no build target found for C:\vs code\Scala\lab 1\src\main\scala\lab1\Recursion.scala. Using presentation compiler with project's scala-library version: 3.3.0
2023.09.24 16:54:26 INFO  time: code lens generation in 4.84s
2023.09.24 16:54:26 INFO  time: Imported build in 0.1s
2023.09.24 16:54:28 INFO  no build target found for C:\vs code\Scala\lab 1\src\main\scala\lab1\Recursion.scala. Using presentation compiler with project's scala-library version: 3.3.0
2023.09.24 16:54:29 INFO  time: code lens generation in 4.34s
2023.09.24 16:54:29 INFO  time: code lens generation in 7.94s
2023.09.24 16:54:31 INFO  time: indexed workspace in 4.71s
2023.09.24 16:54:31 WARN  no build target for: C:\vs code\Scala\lab 1\src\main\scala\lab1\Recursion.scala
2023.09.24 16:54:31 INFO  no build target found for C:\vs code\Scala\lab 1\src\main\scala\lab1\Recursion.scala. Using presentation compiler with project's scala-library version: 3.1.3
2023.09.24 16:54:32 WARN  no build target for: C:\vs code\Scala\lab 1\src\main\scala\lab1\Recursion.scala
2023.09.24 16:54:34 INFO  time: code lens generation in 1.98s
2023.09.25 02:16:32 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.09.25 02:16:33 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.09.25 02:16:33 INFO  Connected to Build server: Bloop v1.5.8
2023.09.25 02:16:35 INFO  time: indexed workspace in 2.5s
2023.09.25 02:16:35 WARN  no build target for: C:\vs code\Scala\lab 1\src\main\scala\lab1\Recursion.scala
2023.09.25 02:16:35 INFO  compiling scala (2 scala sources)
2023.09.25 02:16:39 INFO  time: compiled scala in 3.78s
2023.09.25 02:16:39 INFO  compiling scala-test (2 scala sources)
2023.09.25 02:16:39 INFO  time: compiled scala-test in 0.29s
2023.09.25 02:24:50 INFO  Shutting down server
2023.09.25 02:24:50 INFO  shutting down Metals
2023.09.25 02:24:50 INFO  Shut down connection with build server.
2023.09.25 02:24:50 INFO  Cancelling compilation on Bloop server
2023.09.25 02:24:50 INFO  Exiting server
2023.09.25 15:04:48 INFO  Started: Metals version 1.0.1 in folders 'C:\vs code\Scala' for client Visual Studio Code 1.82.2.
Sep 25, 2023 3:04:48 PM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.21.2 by Redgate
Sep 25, 2023 3:04:48 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Sep 25, 2023 3:04:48 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Sep 25, 2023 3:04:49 PM org.flywaydb.core.FlywayExecutor execute
INFO: Database: jdbc:h2:file:C:\vs code\Scala\.metals\metals (H2 2.1)
Sep 25, 2023 3:04:49 PM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.025s)
Sep 25, 2023 3:04:49 PM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Sep 25, 2023 3:04:49 PM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.09.25 15:04:49 INFO  time: initialize in 0.8s
2023.09.25 15:04:53 INFO  Attempting to connect to the build server...
2023.09.25 15:04:53 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.09.25 15:04:53 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.09.25 15:04:53 INFO  time: Connected to build server in 0.18s
2023.09.25 15:04:53 INFO  Connected to Build server: Bloop v1.5.8
2023.09.25 15:04:57 INFO  time: indexed workspace in 3.47s
2023.09.25 16:18:05 INFO  Shutting down server
2023.09.25 16:18:05 INFO  shutting down Metals
2023.09.25 16:18:05 INFO  Exiting server
2023.09.25 17:02:21 INFO  Started: Metals version 1.0.1 in folders 'C:\vs code\Scala' for client Visual Studio Code 1.82.2.
Sep 25, 2023 5:02:21 PM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.21.2 by Redgate
Sep 25, 2023 5:02:21 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Sep 25, 2023 5:02:21 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Sep 25, 2023 5:02:22 PM org.flywaydb.core.FlywayExecutor execute
INFO: Database: jdbc:h2:file:C:\vs code\Scala\.metals\metals (H2 2.1)
Sep 25, 2023 5:02:22 PM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.057s)
Sep 25, 2023 5:02:22 PM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Sep 25, 2023 5:02:22 PM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.09.25 17:02:22 INFO  time: initialize in 0.78s
2023.09.25 17:02:24 INFO  Attempting to connect to the build server...
2023.09.25 17:02:24 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.09.25 17:02:24 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.09.25 17:02:24 INFO  time: Connected to build server in 0.33s
2023.09.25 17:02:24 INFO  Connected to Build server: Bloop v1.5.8
2023.09.25 17:02:32 INFO  time: indexed workspace in 7.22s
2023.09.27 19:28:13 INFO  Shutting down server
2023.09.27 19:28:13 INFO  shutting down Metals
2023.09.27 19:28:13 INFO  Exiting server
2023.10.05 17:44:56 INFO  Started: Metals version 1.0.1 in folders 'C:\vs code\Scala' for client Visual Studio Code 1.83.0.
Oct 05, 2023 5:44:56 PM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.21.2 by Redgate
Oct 05, 2023 5:44:56 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Oct 05, 2023 5:44:56 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Oct 05, 2023 5:44:57 PM org.flywaydb.core.FlywayExecutor execute
INFO: Database: jdbc:h2:file:C:\vs code\Scala\.metals\metals (H2 2.1)
Oct 05, 2023 5:44:57 PM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.022s)
Oct 05, 2023 5:44:57 PM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Oct 05, 2023 5:44:57 PM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.10.05 17:44:57 INFO  time: initialize in 0.6s
2023.10.05 17:44:59 INFO  Attempting to connect to the build server...
2023.10.05 17:44:59 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.10.05 17:44:59 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.10.05 17:44:59 INFO  time: Connected to build server in 0.34s
2023.10.05 17:44:59 INFO  Connected to Build server: Bloop v1.5.8
2023.10.05 17:45:05 INFO  time: indexed workspace in 5.08s
2023.10.05 17:45:05 WARN  no build target for: C:\vs code\Scala\lab 1\src\main\scala\lab1\Recursion.scala
2023.10.05 17:45:05 WARN  no build target for: C:\vs code\Scala\lab 1\src\main\scala\lab1\Recursion.scala
2023.10.05 17:45:06 INFO  no build target found for C:\vs code\Scala\lab 1\src\main\scala\lab1\Recursion.scala. Using presentation compiler with project's scala-library version: 3.1.3
2023.10.05 17:45:08 INFO  time: code lens generation in 3.61s
2023.10.05 17:45:08 INFO  time: code lens generation in 2.71s
2023.10.05 17:50:44 WARN  no build target for: C:\vs code\Scala\PA 1\project\project\metals.sbt
2023.10.05 17:50:53 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 17:50:57 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\TreeInterface.scala
2023.10.05 17:51:13 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 17:51:19 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 17:51:40 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 17:57:40 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 18:05:19 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 18:12:49 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 05, 2023 6:14:13 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 693
2023.10.05 18:14:36 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 18:14:59 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 18:17:52 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 18:20:06 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 18:46:29 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.10.05 18:46:29 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.10.05 18:46:29 INFO  Connected to Build server: Bloop v1.5.8
2023.10.05 18:46:30 INFO  time: indexed workspace in 1.1s
2023.10.05 18:46:30 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\TreeInterface.scala
2023.10.05 18:46:30 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 18:46:32 INFO  time: code lens generation in 1.24s
2023.10.05 18:48:22 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 22:51:05 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.10.05 22:51:05 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.10.05 22:51:05 INFO  Connected to Build server: Bloop v1.5.8
2023.10.05 22:51:07 INFO  time: indexed workspace in 1.53s
2023.10.05 22:51:07 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\TreeInterface.scala
2023.10.05 22:51:07 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 22:51:07 INFO  no build target found for C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala. Using presentation compiler with project's scala-library version: 3.1.3
Oct 05, 2023 10:52:04 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1249
2023.10.05 22:54:18 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 22:55:05 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 22:56:33 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 22:56:35 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 23:00:03 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 23:01:41 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 23:01:45 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 23:02:02 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 23:02:13 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 23:02:27 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 23:04:09 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 23:05:24 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 23:06:02 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 23:06:39 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 23:09:22 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 23:11:32 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 05, 2023 11:15:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2678
Oct 05, 2023 11:17:49 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\vs code\Scala\.metals\.reports\metals-full\2023-10-05\r_compiler-error_23-17-49-754
Oct 05, 2023 11:21:53 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\vs code\Scala\.metals\.reports\metals-full\2023-10-05\r_compiler-error_23-21-53-106
Oct 05, 2023 11:22:50 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\vs code\Scala\.metals\.reports\metals-full\2023-10-05\r_compiler-error_23-22-50-107
2023.10.05 23:22:52 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Exception in thread "pool-9-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:229)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023.10.05 23:23:24 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 23:23:24 WARN  Using indexes to guess the definition of get
2023.10.05 23:24:39 WARN  Using indexes to guess the definition of Path
2023.10.05 23:24:39 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:670)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

2023.10.05 23:24:39 WARN  Using indexes to guess the definition of Path
Oct 05, 2023 11:24:39 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.nio.file;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.nio.file.spi.FileSystemProvider;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\n/**\n * An object that may be used to locate a file in a file system. It will\n * typically represent a system dependent file path.\n *\n * \u003cp\u003e A {@code Path} represents a path that is hierarchical and composed of a\n * sequence of directory and file name elements separated by a special separator\n * or delimiter. A \u003cem\u003eroot component\u003c/em\u003e, that identifies a file system\n * hierarchy, may also be present. The name element that is \u003cem\u003efarthest\u003c/em\u003e\n * from the root of the directory hierarchy is the name of a file or directory.\n * The other name elements are directory names. A {@code Path} can represent a\n * root, a root and a sequence of names, or simply one or more name elements.\n * A {@code Path} is considered to be an \u003ci\u003eempty path\u003c/i\u003e if it consists\n * solely of one name element that is empty. Accessing a file using an\n * \u003ci\u003eempty path\u003c/i\u003e is equivalent to accessing the default directory of the\n * file system. {@code Path} defines the {@link #getFileName() getFileName},\n * {@link #getParent getParent}, {@link #getRoot getRoot}, and {@link #subpath\n * subpath} methods to access the path components or a subsequence of its name\n * elements.\n *\n * \u003cp\u003e In addition to accessing the components of a path, a {@code Path} also\n * defines the {@link #resolve(Path) resolve} and {@link #resolveSibling(Path)\n * resolveSibling} methods to combine paths. The {@link #relativize relativize}\n * method that can be used to construct a relative path between two paths.\n * Paths can be {@link #compareTo compared}, and tested against each other using\n * the {@link #startsWith startsWith} and {@link #endsWith endsWith} methods.\n *\n * \u003cp\u003e This interface extends {@link Watchable} interface so that a directory\n * located by a path can be {@link #register registered} with a {@link\n * WatchService} and entries in the directory watched. \u003c/p\u003e\n *\n * \u003cp\u003e \u003cb\u003eWARNING:\u003c/b\u003e This interface is only intended to be implemented by\n * those developing custom file system implementations. Methods may be added to\n * this interface in future releases. \u003c/p\u003e\n *\n * \u003ch2\u003eAccessing Files\u003c/h2\u003e\n * \u003cp\u003e Paths may be used with the {@link Files} class to operate on files,\n * directories, and other types of files. For example, suppose we want a {@link\n * java.io.BufferedReader} to read text from a file \"{@code access.log}\". The\n * file is located in a directory \"{@code logs}\" relative to the current working\n * directory and is UTF-8 encoded.\n * \u003cpre\u003e\n *     Path path \u003d FileSystems.getDefault().getPath(\"logs\", \"access.log\");\n *     BufferedReader reader \u003d Files.newBufferedReader(path, StandardCharsets.UTF_8);\n * \u003c/pre\u003e\n *\n * \u003ca id\u003d\"interop\"\u003e\u003c/a\u003e\u003ch2\u003eInteroperability\u003c/h2\u003e\n * \u003cp\u003e Paths associated with the default {@link\n * java.nio.file.spi.FileSystemProvider provider} are generally interoperable\n * with the {@link java.io.File java.io.File} class. Paths created by other\n * providers are unlikely to be interoperable with the abstract path names\n * represented by {@code java.io.File}. The {@link java.io.File#toPath toPath}\n * method may be used to obtain a {@code Path} from the abstract path name\n * represented by a {@code java.io.File} object. The resulting {@code Path} can\n * be used to operate on the same file as the {@code java.io.File} object. In\n * addition, the {@link #toFile toFile} method is useful to construct a {@code\n * File} from the {@code String} representation of a {@code Path}.\n *\n * \u003ch2\u003eConcurrency\u003c/h2\u003e\n * \u003cp\u003e Implementations of this interface are immutable and safe for use by\n * multiple concurrent threads.\n *\n * @since 1.7\n */\n\npublic interface Path\n    extends Comparable\u003cPath\u003e, Iterable\u003cPath\u003e, Watchable\n{\n    /**\n     * Returns a {@code Path} by converting a path string, or a sequence of\n     * strings that when joined form a path string. If {@code more} does not\n     * specify any elements then the value of the {@code first} parameter is\n     * the path string to convert. If {@code more} specifies one or more\n     * elements then each non-empty string, including {@code first}, is\n     * considered to be a sequence of name elements and is joined to form a\n     * path string. The details as to how the Strings are joined is provider\n     * specific but typically they will be joined using the\n     * {@link FileSystem#getSeparator name-separator} as the separator.\n     * For example, if the name separator is \"{@code /}\" and\n     * {@code getPath(\"/foo\",\"bar\",\"gus\")} is invoked, then the path string\n     * {@code \"/foo/bar/gus\"} is converted to a {@code Path}. A {@code Path}\n     * representing an empty path is returned if {@code first} is the empty\n     * string and {@code more} does not contain any non-empty strings.\n     *\n     * \u003cp\u003e The {@code Path} is obtained by invoking the {@link FileSystem#getPath\n     * getPath} method of the {@link FileSystems#getDefault default} {@link\n     * FileSystem}.\n     *\n     * \u003cp\u003e Note that while this method is very convenient, using it will imply\n     * an assumed reference to the default {@code FileSystem} and limit the\n     * utility of the calling code. Hence it should not be used in library code\n     * intended for flexible reuse. A more flexible alternative is to use an\n     * existing {@code Path} instance as an anchor, such as:\n     * \u003cpre\u003e{@code\n     *     Path dir \u003d ...\n     *     Path path \u003d dir.resolve(\"file\");\n     * }\u003c/pre\u003e\n     *\n     * @param   first\n     *          the path string or initial part of the path string\n     * @param   more\n     *          additional strings to be joined to form the path string\n     *\n     * @return  the resulting {@code Path}\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a {@code Path}\n     *\n     * @see FileSystem#getPath\n     *\n     * @since 11\n     */\n    public static Path of(String first, String... more) {\n        return FileSystems.getDefault().getPath(first, more);\n    }\n\n    /**\n     * Returns a {@code Path} by converting a URI.\n     *\n     * \u003cp\u003e This method iterates over the {@link FileSystemProvider#installedProviders()\n     * installed} providers to locate the provider that is identified by the\n     * URI {@link URI#getScheme scheme} of the given URI. URI schemes are\n     * compared without regard to case. If the provider is found then its {@link\n     * FileSystemProvider#getPath getPath} method is invoked to convert the\n     * URI.\n     *\n     * \u003cp\u003e In the case of the default provider, identified by the URI scheme\n     * \"file\", the given URI has a non-empty path component, and undefined query\n     * and fragment components. Whether the authority component may be present\n     * is platform specific. The returned {@code Path} is associated with the\n     * {@link FileSystems#getDefault default} file system.\n     *\n     * \u003cp\u003e The default provider provides a similar \u003cem\u003eround-trip\u003c/em\u003e guarantee\n     * to the {@link java.io.File} class. For a given {@code Path} \u003ci\u003ep\u003c/i\u003e it\n     * is guaranteed that\n     * \u003cblockquote\u003e{@code\n     * Path.of(}\u003ci\u003ep\u003c/i\u003e{@code .}{@link Path#toUri() toUri}{@code ()).equals(}\n     * \u003ci\u003ep\u003c/i\u003e{@code .}{@link Path#toAbsolutePath() toAbsolutePath}{@code ())}\n     * \u003c/blockquote\u003e\n     * so long as the original {@code Path}, the {@code URI}, and the new {@code\n     * Path} are all created in (possibly different invocations of) the same\n     * Java virtual machine. Whether other providers make any guarantees is\n     * provider specific and therefore unspecified.\n     *\n     * @param   uri\n     *          the URI to convert\n     *\n     * @return  the resulting {@code Path}\n     *\n     * @throws  IllegalArgumentException\n     *          if preconditions on the {@code uri} parameter do not hold. The\n     *          format of the URI is provider specific.\n     * @throws  FileSystemNotFoundException\n     *          The file system, identified by the URI, does not exist and\n     *          cannot be created automatically, or the provider identified by\n     *          the URI\u0027s scheme component is not installed\n     * @throws  SecurityException\n     *          if a security manager is installed and it denies an unspecified\n     *          permission to access the file system\n     *\n     * @since 11\n     */\n    public static Path of(URI uri) {\n        String scheme \u003d  uri.getScheme();\n        if (scheme \u003d\u003d null)\n            throw new IllegalArgumentException(\"Missing scheme\");\n\n        // check for default provider to avoid loading of installed providers\n        if (scheme.equalsIgnoreCase(\"file\"))\n            return FileSystems.getDefault().provider().getPath(uri);\n\n        // try to find provider\n        for (FileSystemProvider provider: FileSystemProvider.installedProviders()) {\n            if (provider.getScheme().equalsIgnoreCase(scheme)) {\n                return provider.getPath(uri);\n            }\n        }\n\n        throw new FileSystemNotFoundException(\"Provider \\\"\" + scheme + \"\\\" not installed\");\n    }\n\n    /**\n     * Returns the file system that created this object.\n     *\n     * @return  the file system that created this object\n     */\n    FileSystem getFileSystem();\n\n    /**\n     * Tells whether or not this path is absolute.\n     *\n     * \u003cp\u003e An absolute path is complete in that it doesn\u0027t need to be combined\n     * with other path information in order to locate a file.\n     *\n     * @return  {@code true} if, and only if, this path is absolute\n     */\n    boolean isAbsolute();\n\n    /**\n     * Returns the root component of this path as a {@code Path} object,\n     * or {@code null} if this path does not have a root component.\n     *\n     * @return  a path representing the root component of this path,\n     *          or {@code null}\n     */\n    Path getRoot();\n\n    /**\n     * Returns the name of the file or directory denoted by this path as a\n     * {@code Path} object. The file name is the \u003cem\u003efarthest\u003c/em\u003e element from\n     * the root in the directory hierarchy.\n     *\n     * @return  a path representing the name of the file or directory, or\n     *          {@code null} if this path has zero elements\n     */\n    Path getFileName();\n\n    /**\n     * Returns the \u003cem\u003eparent path\u003c/em\u003e, or {@code null} if this path does not\n     * have a parent.\n     *\n     * \u003cp\u003e The parent of this path object consists of this path\u0027s root\n     * component, if any, and each element in the path except for the\n     * \u003cem\u003efarthest\u003c/em\u003e from the root in the directory hierarchy. This method\n     * does not access the file system; the path or its parent may not exist.\n     * Furthermore, this method does not eliminate special names such as \".\"\n     * and \"..\" that may be used in some implementations. On UNIX for example,\n     * the parent of \"{@code /a/b/c}\" is \"{@code /a/b}\", and the parent of\n     * {@code \"x/y/.}\" is \"{@code x/y}\". This method may be used with the {@link\n     * #normalize normalize} method, to eliminate redundant names, for cases where\n     * \u003cem\u003eshell-like\u003c/em\u003e navigation is required.\n     *\n     * \u003cp\u003e If this path has more than one element, and no root component, then\n     * this method is equivalent to evaluating the expression:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * subpath(0,\u0026nbsp;getNameCount()-1);\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @return  a path representing the path\u0027s parent\n     */\n    Path getParent();\n\n    /**\n     * Returns the number of name elements in the path.\n     *\n     * @return  the number of elements in the path, or {@code 0} if this path\n     *          only represents a root component\n     */\n    int getNameCount();\n\n    /**\n     * Returns a name element of this path as a {@code Path} object.\n     *\n     * \u003cp\u003e The {@code index} parameter is the index of the name element to return.\n     * The element that is \u003cem\u003eclosest\u003c/em\u003e to the root in the directory hierarchy\n     * has index {@code 0}. The element that is \u003cem\u003efarthest\u003c/em\u003e from the root\n     * has index {@link #getNameCount count}{@code -1}.\n     *\n     * @param   index\n     *          the index of the element\n     *\n     * @return  the name element\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code index} is negative, {@code index} is greater than or\n     *          equal to the number of elements, or this path has zero name\n     *          elements\n     */\n    Path getName(int index);\n\n    /**\n     * Returns a relative {@code Path} that is a subsequence of the name\n     * elements of this path.\n     *\n     * \u003cp\u003e The {@code beginIndex} and {@code endIndex} parameters specify the\n     * subsequence of name elements. The name that is \u003cem\u003eclosest\u003c/em\u003e to the root\n     * in the directory hierarchy has index {@code 0}. The name that is\n     * \u003cem\u003efarthest\u003c/em\u003e from the root has index {@link #getNameCount\n     * count}{@code -1}. The returned {@code Path} object has the name elements\n     * that begin at {@code beginIndex} and extend to the element at index {@code\n     * endIndex-1}.\n     *\n     * @param   beginIndex\n     *          the index of the first element, inclusive\n     * @param   endIndex\n     *          the index of the last element, exclusive\n     *\n     * @return  a new {@code Path} object that is a subsequence of the name\n     *          elements in this {@code Path}\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code beginIndex} is negative, or greater than or equal to\n     *          the number of elements. If {@code endIndex} is less than or\n     *          equal to {@code beginIndex}, or larger than the number of elements.\n     */\n    Path subpath(int beginIndex, int endIndex);\n\n    /**\n     * Tests if this path starts with the given path.\n     *\n     * \u003cp\u003e This path \u003cem\u003estarts\u003c/em\u003e with the given path if this path\u0027s root\n     * component \u003cem\u003estarts\u003c/em\u003e with the root component of the given path,\n     * and this path starts with the same name elements as the given path.\n     * If the given path has more name elements than this path then {@code false}\n     * is returned.\n     *\n     * \u003cp\u003e Whether or not the root component of this path starts with the root\n     * component of the given path is file system specific. If this path does\n     * not have a root component and the given path has a root component then\n     * this path does not start with the given path.\n     *\n     * \u003cp\u003e If the given path is associated with a different {@code FileSystem}\n     * to this path then {@code false} is returned.\n     *\n     * @param   other\n     *          the given path\n     *\n     * @return  {@code true} if this path starts with the given path; otherwise\n     *          {@code false}\n     */\n    boolean startsWith(Path other);\n\n    /**\n     * Tests if this path starts with a {@code Path}, constructed by converting\n     * the given path string, in exactly the manner specified by the {@link\n     * #startsWith(Path) startsWith(Path)} method. On UNIX for example, the path\n     * \"{@code foo/bar}\" starts with \"{@code foo}\" and \"{@code foo/bar}\". It\n     * does not start with \"{@code f}\" or \"{@code fo}\".\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     startsWith(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the given path string\n     *\n     * @return  {@code true} if this path starts with the given path; otherwise\n     *          {@code false}\n     *\n     * @throws  InvalidPathException\n     *          If the path string cannot be converted to a Path.\n     */\n    default boolean startsWith(String other) {\n        return startsWith(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Tests if this path ends with the given path.\n     *\n     * \u003cp\u003e If the given path has \u003cem\u003eN\u003c/em\u003e elements, and no root component,\n     * and this path has \u003cem\u003eN\u003c/em\u003e or more elements, then this path ends with\n     * the given path if the last \u003cem\u003eN\u003c/em\u003e elements of each path, starting at\n     * the element farthest from the root, are equal.\n     *\n     * \u003cp\u003e If the given path has a root component then this path ends with the\n     * given path if the root component of this path \u003cem\u003eends with\u003c/em\u003e the root\n     * component of the given path, and the corresponding elements of both paths\n     * are equal. Whether or not the root component of this path ends with the\n     * root component of the given path is file system specific. If this path\n     * does not have a root component and the given path has a root component\n     * then this path does not end with the given path.\n     *\n     * \u003cp\u003e If the given path is associated with a different {@code FileSystem}\n     * to this path then {@code false} is returned.\n     *\n     * @param   other\n     *          the given path\n     *\n     * @return  {@code true} if this path ends with the given path; otherwise\n     *          {@code false}\n     */\n    boolean endsWith(Path other);\n\n    /**\n     * Tests if this path ends with a {@code Path}, constructed by converting\n     * the given path string, in exactly the manner specified by the {@link\n     * #endsWith(Path) endsWith(Path)} method. On UNIX for example, the path\n     * \"{@code foo/bar}\" ends with \"{@code foo/bar}\" and \"{@code bar}\". It does\n     * not end with \"{@code r}\" or \"{@code /bar}\". Note that trailing separators\n     * are not taken into account, and so invoking this method on the {@code\n     * Path}\"{@code foo/bar}\" with the {@code String} \"{@code bar/}\" returns\n     * {@code true}.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     endsWith(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the given path string\n     *\n     * @return  {@code true} if this path ends with the given path; otherwise\n     *          {@code false}\n     *\n     * @throws  InvalidPathException\n     *          If the path string cannot be converted to a Path.\n     */\n    default boolean endsWith(String other) {\n        return endsWith(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Returns a path that is this path with redundant name elements eliminated.\n     *\n     * \u003cp\u003e The precise definition of this method is implementation dependent but\n     * in general it derives from this path, a path that does not contain\n     * \u003cem\u003eredundant\u003c/em\u003e name elements. In many file systems, the \"{@code .}\"\n     * and \"{@code ..}\" are special names used to indicate the current directory\n     * and parent directory. In such file systems all occurrences of \"{@code .}\"\n     * are considered redundant. If a \"{@code ..}\" is preceded by a\n     * non-\"{@code ..}\" name then both names are considered redundant (the\n     * process to identify such names is repeated until it is no longer\n     * applicable).\n     *\n     * \u003cp\u003e This method does not access the file system; the path may not locate\n     * a file that exists. Eliminating \"{@code ..}\" and a preceding name from a\n     * path may result in the path that locates a different file than the original\n     * path. This can arise when the preceding name is a symbolic link.\n     *\n     * @return  the resulting path or this path if it does not contain\n     *          redundant name elements; an empty path is returned if this path\n     *          does not have a root component and all name elements are redundant\n     *\n     * @see #getParent\n     * @see #toRealPath\n     */\n    Path normalize();\n\n    // -- resolution and relativization --\n\n    /**\n     * Resolve the given path against this path.\n     *\n     * \u003cp\u003e If the {@code other} parameter is an {@link #isAbsolute() absolute}\n     * path then this method trivially returns {@code other}. If {@code other}\n     * is an \u003ci\u003eempty path\u003c/i\u003e then this method trivially returns this path.\n     * Otherwise this method considers this path to be a directory and resolves\n     * the given path against this path. In the simplest case, the given path\n     * does not have a {@link #getRoot root} component, in which case this method\n     * \u003cem\u003ejoins\u003c/em\u003e the given path to this path and returns a resulting path\n     * that {@link #endsWith ends} with the given path. Where the given path has\n     * a root component then resolution is highly implementation dependent and\n     * therefore unspecified.\n     *\n     * @param   other\n     *          the path to resolve against this path\n     *\n     * @return  the resulting path\n     *\n     * @see #relativize\n     */\n    Path resolve(Path other);\n\n    /**\n     * Converts a given path string to a {@code Path} and resolves it against\n     * this {@code Path} in exactly the manner specified by the {@link\n     * #resolve(Path) resolve} method. For example, suppose that the name\n     * separator is \"{@code /}\" and a path represents \"{@code foo/bar}\", then\n     * invoking this method with the path string \"{@code gus}\" will result in\n     * the {@code Path} \"{@code foo/bar/gus}\".\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     resolve(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the path string to resolve against this path\n     *\n     * @return  the resulting path\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a Path.\n     *\n     * @see FileSystem#getPath\n     */\n    default Path resolve(String other) {\n        return resolve(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Resolves the given path against this path\u0027s {@link #getParent parent}\n     * path. This is useful where a file name needs to be \u003ci\u003ereplaced\u003c/i\u003e with\n     * another file name. For example, suppose that the name separator is\n     * \"{@code /}\" and a path represents \"{@code dir1/dir2/foo}\", then invoking\n     * this method with the {@code Path} \"{@code bar}\" will result in the {@code\n     * Path} \"{@code dir1/dir2/bar}\". If this path does not have a parent path,\n     * or {@code other} is {@link #isAbsolute() absolute}, then this method\n     * returns {@code other}. If {@code other} is an empty path then this method\n     * returns this path\u0027s parent, or where this path doesn\u0027t have a parent, the\n     * empty path.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     (getParent() \u003d\u003d null) ? other : getParent().resolve(other);\n     * }\u003c/pre\u003e\n     * unless {@code other \u003d\u003d null}, in which case a\n     * {@code NullPointerException} is thrown.\n     *\n     * @param   other\n     *          the path to resolve against this path\u0027s parent\n     *\n     * @return  the resulting path\n     *\n     * @see #resolve(Path)\n     */\n    default Path resolveSibling(Path other) {\n        if (other \u003d\u003d null)\n            throw new NullPointerException();\n        Path parent \u003d getParent();\n        return (parent \u003d\u003d null) ? other : parent.resolve(other);\n    }\n\n    /**\n     * Converts a given path string to a {@code Path} and resolves it against\n     * this path\u0027s {@link #getParent parent} path in exactly the manner\n     * specified by the {@link #resolveSibling(Path) resolveSibling} method.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     resolveSibling(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the path string to resolve against this path\u0027s parent\n     *\n     * @return  the resulting path\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a Path.\n     *\n     * @see FileSystem#getPath\n     */\n    default Path resolveSibling(String other) {\n        return resolveSibling(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Constructs a relative path between this path and a given path.\n     *\n     * \u003cp\u003e Relativization is the inverse of {@link #resolve(Path) resolution}.\n     * This method attempts to construct a {@link #isAbsolute relative} path\n     * that when {@link #resolve(Path) resolved} against this path, yields a\n     * path that locates the same file as the given path. For example, on UNIX,\n     * if this path is {@code \"/a/b\"} and the given path is {@code \"/a/b/c/d\"}\n     * then the resulting relative path would be {@code \"c/d\"}. Where this\n     * path and the given path do not have a {@link #getRoot root} component,\n     * then a relative path can be constructed. A relative path cannot be\n     * constructed if only one of the paths have a root component. Where both\n     * paths have a root component then it is implementation dependent if a\n     * relative path can be constructed. If this path and the given path are\n     * {@link #equals equal} then an \u003ci\u003eempty path\u003c/i\u003e is returned.\n     *\n     * \u003cp\u003e For any two {@link #normalize normalized} paths \u003ci\u003ep\u003c/i\u003e and\n     * \u003ci\u003eq\u003c/i\u003e, where \u003ci\u003eq\u003c/i\u003e does not have a root component,\n     * \u003cblockquote\u003e\n     *   \u003ci\u003ep\u003c/i\u003e{@code .relativize(}\u003ci\u003ep\u003c/i\u003e\n     *   {@code .resolve(}\u003ci\u003eq\u003c/i\u003e{@code )).equals(}\u003ci\u003eq\u003c/i\u003e{@code )}\n     * \u003c/blockquote\u003e\n     *\n     * \u003cp\u003e When symbolic links are supported, then whether the resulting path,\n     * when resolved against this path, yields a path that can be used to locate\n     * the {@link Files#isSameFile same} file as {@code other} is implementation\n     * dependent. For example, if this path is  {@code \"/a/b\"} and the given\n     * path is {@code \"/a/x\"} then the resulting relative path may be {@code\n     * \"../x\"}. If {@code \"b\"} is a symbolic link then is implementation\n     * dependent if {@code \"a/b/../x\"} would locate the same file as {@code \"/a/x\"}.\n     *\n     * @param   other\n     *          the path to relativize against this path\n     *\n     * @return  the resulting relative path, or an empty path if both paths are\n     *          equal\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code other} is not a {@code Path} that can be relativized\n     *          against this path\n     */\n    Path relativize(Path other);\n\n    /**\n     * Returns a URI to represent this path.\n     *\n     * \u003cp\u003e This method constructs an absolute {@link URI} with a {@link\n     * URI#getScheme() scheme} equal to the URI scheme that identifies the\n     * provider. The exact form of the scheme specific part is highly provider\n     * dependent.\n     *\n     * \u003cp\u003e In the case of the default provider, the URI is hierarchical with\n     * a {@link URI#getPath() path} component that is absolute. The query and\n     * fragment components are undefined. Whether the authority component is\n     * defined or not is implementation dependent. There is no guarantee that\n     * the {@code URI} may be used to construct a {@link java.io.File java.io.File}.\n     * In particular, if this path represents a Universal Naming Convention (UNC)\n     * path, then the UNC server name may be encoded in the authority component\n     * of the resulting URI. In the case of the default provider, and the file\n     * exists, and it can be determined that the file is a directory, then the\n     * resulting {@code URI} will end with a slash.\n     *\n     * \u003cp\u003e The default provider provides a similar \u003cem\u003eround-trip\u003c/em\u003e guarantee\n     * to the {@link java.io.File} class. For a given {@code Path} \u003ci\u003ep\u003c/i\u003e it\n     * is guaranteed that\n     * \u003cblockquote\u003e\n     * {@link Path#of(URI) Path.of}{@code (}\u003ci\u003ep\u003c/i\u003e{@code .toUri()).equals(}\u003ci\u003ep\u003c/i\u003e\n     * {@code .}{@link #toAbsolutePath() toAbsolutePath}{@code ())}\n     * \u003c/blockquote\u003e\n     * so long as the original {@code Path}, the {@code URI}, and the new {@code\n     * Path} are all created in (possibly different invocations of) the same\n     * Java virtual machine. Whether other providers make any guarantees is\n     * provider specific and therefore unspecified.\n     *\n     * \u003cp\u003e When a file system is constructed to access the contents of a file\n     * as a file system then it is highly implementation specific if the returned\n     * URI represents the given path in the file system or it represents a\n     * \u003cem\u003ecompound\u003c/em\u003e URI that encodes the URI of the enclosing file system.\n     * A format for compound URIs is not defined in this release; such a scheme\n     * may be added in a future release.\n     *\n     * @return  the URI representing this path\n     *\n     * @throws  java.io.IOError\n     *          if an I/O error occurs obtaining the absolute path, or where a\n     *          file system is constructed to access the contents of a file as\n     *          a file system, and the URI of the enclosing file system cannot be\n     *          obtained\n     *\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager\n     *          is installed, the {@link #toAbsolutePath toAbsolutePath} method\n     *          throws a security exception.\n     */\n    URI toUri();\n\n    /**\n     * Returns a {@code Path} object representing the absolute path of this\n     * path.\n     *\n     * \u003cp\u003e If this path is already {@link Path#isAbsolute absolute} then this\n     * method simply returns this path. Otherwise, this method resolves the path\n     * in an implementation dependent manner, typically by resolving the path\n     * against a file system default directory. Depending on the implementation,\n     * this method may throw an I/O error if the file system is not accessible.\n     *\n     * @return  a {@code Path} object representing the absolute path\n     *\n     * @throws  java.io.IOError\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, a security manager\n     *          is installed, and this path is not absolute, then the security\n     *          manager\u0027s {@link SecurityManager#checkPropertyAccess(String)\n     *          checkPropertyAccess} method is invoked to check access to the\n     *          system property {@code user.dir}\n     */\n    Path toAbsolutePath();\n\n    /**\n     * Returns the \u003cem\u003ereal\u003c/em\u003e path of an existing file.\n     *\n     * \u003cp\u003e The precise definition of this method is implementation dependent but\n     * in general it derives from this path, an {@link #isAbsolute absolute}\n     * path that locates the {@link Files#isSameFile same} file as this path, but\n     * with name elements that represent the actual name of the directories\n     * and the file. For example, where filename comparisons on a file system\n     * are case insensitive then the name elements represent the names in their\n     * actual case. Additionally, the resulting path has redundant name\n     * elements removed.\n     *\n     * \u003cp\u003e If this path is relative then its absolute path is first obtained,\n     * as if by invoking the {@link #toAbsolutePath toAbsolutePath} method.\n     *\n     * \u003cp\u003e The {@code options} array may be used to indicate how symbolic links\n     * are handled. By default, symbolic links are resolved to their final\n     * target. If the option {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} is\n     * present then this method does not resolve symbolic links.\n     *\n     * Some implementations allow special names such as \"{@code ..}\" to refer to\n     * the parent directory. When deriving the \u003cem\u003ereal path\u003c/em\u003e, and a\n     * \"{@code ..}\" (or equivalent) is preceded by a non-\"{@code ..}\" name then\n     * an implementation will typically cause both names to be removed. When\n     * not resolving symbolic links and the preceding name is a symbolic link\n     * then the names are only removed if it guaranteed that the resulting path\n     * will locate the same file as this path.\n     *\n     * @param   options\n     *          options indicating how symbolic links are handled\n     *\n     * @return  an absolute path represent the \u003cem\u003ereal\u003c/em\u003e path of the file\n     *          located by this object\n     *\n     * @throws  IOException\n     *          if the file does not exist or an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager\n     *          is installed, its {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file, and where\n     *          this path is not absolute, its {@link SecurityManager#checkPropertyAccess(String)\n     *          checkPropertyAccess} method is invoked to check access to the\n     *          system property {@code user.dir}\n     */\n    Path toRealPath(LinkOption... options) throws IOException;\n\n    /**\n     * Returns a {@link File} object representing this path. Where this {@code\n     * Path} is associated with the default provider, then this method is\n     * equivalent to returning a {@code File} object constructed with the\n     * {@code String} representation of this path.\n     *\n     * \u003cp\u003e If this path was created by invoking the {@code File} {@link\n     * File#toPath toPath} method then there is no guarantee that the {@code\n     * File} object returned by this method is {@link #equals equal} to the\n     * original {@code File}.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     new File(toString());\n     * }\u003c/pre\u003e\n     * if the {@code FileSystem} which created this {@code Path} is the default\n     * file system; otherwise an {@code UnsupportedOperationException} is\n     * thrown.\n     *\n     * @return  a {@code File} object representing this path\n     *\n     * @throws  UnsupportedOperationException\n     *          if this {@code Path} is not associated with the default provider\n     */\n    default File toFile() {\n        if (getFileSystem() \u003d\u003d FileSystems.getDefault()) {\n            return new File(toString());\n        } else {\n            throw new UnsupportedOperationException(\"Path not associated with \"\n                    + \"default file system.\");\n        }\n    }\n\n    // -- watchable --\n\n    /**\n     * Registers the file located by this path with a watch service.\n     *\n     * \u003cp\u003e In this release, this path locates a directory that exists. The\n     * directory is registered with the watch service so that entries in the\n     * directory can be watched. The {@code events} parameter is the events to\n     * register and may contain the following events:\n     * \u003cul\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_CREATE ENTRY_CREATE} -\n     *       entry created or moved into the directory\u003c/li\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_DELETE ENTRY_DELETE} -\n     *        entry deleted or moved out of the directory\u003c/li\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_MODIFY ENTRY_MODIFY} -\n     *        entry in directory was modified\u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e The {@link WatchEvent#context context} for these events is the\n     * relative path between the directory located by this path, and the path\n     * that locates the directory entry that is created, deleted, or modified.\n     *\n     * \u003cp\u003e The set of events may include additional implementation specific\n     * event that are not defined by the enum {@link StandardWatchEventKinds}\n     *\n     * \u003cp\u003e The {@code modifiers} parameter specifies \u003cem\u003emodifiers\u003c/em\u003e that\n     * qualify how the directory is registered. This release does not define any\n     * \u003cem\u003estandard\u003c/em\u003e modifiers. It may contain implementation specific\n     * modifiers.\n     *\n     * \u003cp\u003e Where a file is registered with a watch service by means of a symbolic\n     * link then it is implementation specific if the watch continues to depend\n     * on the existence of the symbolic link after it is registered.\n     *\n     * @param   watcher\n     *          the watch service to which this object is to be registered\n     * @param   events\n     *          the events for which this object should be registered\n     * @param   modifiers\n     *          the modifiers, if any, that modify how the object is registered\n     *\n     * @return  a key representing the registration of this object with the\n     *          given watch service\n     *\n     * @throws  UnsupportedOperationException\n     *          if unsupported events or modifiers are specified\n     * @throws  IllegalArgumentException\n     *          if an invalid combination of events or modifiers is specified\n     * @throws  ClosedWatchServiceException\n     *          if the watch service is closed\n     * @throws  NotDirectoryException\n     *          if the file is registered to watch the entries in a directory\n     *          and the file is not a directory  \u003ci\u003e(optional specific exception)\u003c/i\u003e\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     */\n    @Override\n    WatchKey register(WatchService watcher,\n                      WatchEvent.Kind\u003c?\u003e[] events,\n                      WatchEvent.Modifier... modifiers)\n        throws IOException;\n\n    /**\n     * Registers the file located by this path with a watch service.\n     *\n     * \u003cp\u003e An invocation of this method behaves in exactly the same way as the\n     * invocation\n     * \u003cpre\u003e\n     *     watchable.{@link #register(WatchService,WatchEvent.Kind[],WatchEvent.Modifier[]) register}(watcher, events, new WatchEvent.Modifier[0]);\n     * \u003c/pre\u003e\n     *\n     * \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e\n     * Suppose we wish to register a directory for entry create, delete, and modify\n     * events:\n     * \u003cpre\u003e\n     *     Path dir \u003d ...\n     *     WatchService watcher \u003d ...\n     *\n     *     WatchKey key \u003d dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);\n     * \u003c/pre\u003e\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     register(watcher, events, new WatchEvent.Modifier[0]);\n     * }\u003c/pre\u003e\n     *\n     * @param   watcher\n     *          The watch service to which this object is to be registered\n     * @param   events\n     *          The events for which this object should be registered\n     *\n     * @return  A key representing the registration of this object with the\n     *          given watch service\n     *\n     * @throws  UnsupportedOperationException\n     *          If unsupported events are specified\n     * @throws  IllegalArgumentException\n     *          If an invalid combination of events is specified\n     * @throws  ClosedWatchServiceException\n     *          If the watch service is closed\n     * @throws  NotDirectoryException\n     *          If the file is registered to watch the entries in a directory\n     *          and the file is not a directory  \u003ci\u003e(optional specific exception)\u003c/i\u003e\n     * @throws  IOException\n     *          If an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     */\n    @Override\n    default WatchKey register(WatchService watcher,\n                      WatchEvent.Kind\u003c?\u003e... events) throws IOException {\n        return register(watcher, events, new WatchEvent.Modifier[0]);\n    }\n\n    // -- Iterable --\n\n    /**\n     * Returns an iterator over the name elements of this path.\n     *\n     * \u003cp\u003e The first element returned by the iterator represents the name\n     * element that is closest to the root in the directory hierarchy, the\n     * second element is the next closest, and so on. The last element returned\n     * is the name of the file or directory denoted by this path. The {@link\n     * #getRoot root} component, if present, is not returned by the iterator.\n     *\n     * @implSpec\n     * The default implementation returns an {@code Iterator\u003cPath\u003e} which, for\n     * this path, traverses the {@code Path}s returned by\n     * {@code getName(index)}, where {@code index} ranges from zero to\n     * {@code getNameCount() - 1}, inclusive.\n     *\n     * @return  an iterator over the name elements of this path.\n     */\n    @Override\n    default Iterator\u003cPath\u003e iterator() {\n        return new Iterator\u003c\u003e() {\n            private int i \u003d 0;\n\n            @Override\n            public boolean hasNext() {\n                return (i \u003c getNameCount());\n            }\n\n            @Override\n            public Path next() {\n                if (i \u003c getNameCount()) {\n                    Path result \u003d getName(i);\n                    i++;\n                    return result;\n                } else {\n                    throw new NoSuchElementException();\n                }\n            }\n        };\n    }\n\n    // -- compareTo/equals/hashCode --\n\n    /**\n     * Compares two abstract paths lexicographically. The ordering defined by\n     * this method is provider specific, and in the case of the default\n     * provider, platform specific. This method does not access the file system\n     * and neither file is required to exist.\n     *\n     * \u003cp\u003e This method may not be used to compare paths that are associated\n     * with different file system providers.\n     *\n     * @param   other  the path compared to this path.\n     *\n     * @return  zero if the argument is {@link #equals equal} to this path, a\n     *          value less than zero if this path is lexicographically less than\n     *          the argument, or a value greater than zero if this path is\n     *          lexicographically greater than the argument\n     *\n     * @throws  ClassCastException\n     *          if the paths are associated with different providers\n     */\n    @Override\n    int compareTo(Path other);\n\n    /**\n     * Tests this path for equality with the given object.\n     *\n     * \u003cp\u003e If the given object is not a Path, or is a Path associated with a\n     * different {@code FileSystem}, then this method returns {@code false}.\n     *\n     * \u003cp\u003e Whether or not two path are equal depends on the file system\n     * implementation. In some cases the paths are compared without regard\n     * to case, and others are case sensitive. This method does not access the\n     * file system and the file is not required to exist. Where required, the\n     * {@link Files#isSameFile isSameFile} method may be used to check if two\n     * paths locate the same file.\n     *\n     * \u003cp\u003e This method satisfies the general contract of the {@link\n     * java.lang.Object#equals(Object) Object.equals} method. \u003c/p\u003e\n     *\n     * @param   other\n     *          the object to which this object is to be compared\n     *\n     * @return  {@code true} if, and only if, the given object is a {@code Path}\n     *          that is identical to this {@code Path}\n     */\n    boolean equals(Object other);\n\n    /**\n     * Computes a hash code for this path.\n     *\n     * \u003cp\u003e The hash code is based upon the components of the path, and\n     * satisfies the general contract of the {@link Object#hashCode\n     * Object.hashCode} method.\n     *\n     * @return  the hash-code value for this path\n     */\n    int hashCode();\n\n    /**\n     * Returns the string representation of this path.\n     *\n     * \u003cp\u003e If this path was created by converting a path string using the\n     * {@link FileSystem#getPath getPath} method then the path string returned\n     * by this method may differ from the original String used to create the path.\n     *\n     * \u003cp\u003e The returned path string uses the default name {@link\n     * FileSystem#getSeparator separator} to separate names in the path.\n     *\n     * @return  the string representation of this path\n     */\n    String toString();\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:319)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 24 more

Oct 05, 2023 11:24:39 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": [
    "jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java"
  ]
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor6.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.WorkspaceLspService.didFocus(WorkspaceLspService.scala:604)
	at scala.meta.metals.lsp.DelegatingScalaService.didFocus(DelegatingScalaService.scala:43)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 23 more

2023.10.05 23:24:43 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.codeLens(WorkspaceLspService.scala:437)
	scala.meta.metals.lsp.DelegatingScalaService.codeLens(DelegatingScalaService.scala:150)
	jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:24:43 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
java.util.concurrent.CompletionException: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:332)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:347)
	at java.base/java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:708)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2162)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeLens$2(MetalsLspService.scala:1573)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeLens$1(MetalsLspService.scala:1572)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$apply$2(CancelTokens.scala:26)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	... 3 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 15 more

2023.10.05 23:24:44 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.foldingRange(WorkspaceLspService.scala:442)
	scala.meta.metals.lsp.DelegatingScalaService.foldingRange(DelegatingScalaService.scala:155)
	jdk.internal.reflect.GeneratedMethodAccessor7.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:24:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor7.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$foldingRange$1(MetalsLspService.scala:1582)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.foldingRange(MetalsLspService.scala:1581)
	at scala.meta.internal.metals.WorkspaceLspService.foldingRange(WorkspaceLspService.scala:442)
	at scala.meta.metals.lsp.DelegatingScalaService.foldingRange(DelegatingScalaService.scala:155)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 26 more

2023.10.05 23:24:44 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:24:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:24:44 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:24:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

Oct 05, 2023 11:24:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3257
Oct 05, 2023 11:24:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3256
2023.10.05 23:24:44 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:24:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

Oct 05, 2023 11:24:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3258
Oct 05, 2023 11:24:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3254
2023.10.05 23:24:44 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:24:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:24:44 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.codeLens(WorkspaceLspService.scala:437)
	scala.meta.metals.lsp.DelegatingScalaService.codeLens(DelegatingScalaService.scala:150)
	jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

2023.10.05 23:24:44 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:24:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

Oct 05, 2023 11:24:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3261
Oct 05, 2023 11:24:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3259
2023.10.05 23:24:44 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:24:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

Oct 05, 2023 11:24:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
java.util.concurrent.CompletionException: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:332)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:347)
	at java.base/java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:708)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2162)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeLens$2(MetalsLspService.scala:1573)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeLens$1(MetalsLspService.scala:1572)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$apply$2(CancelTokens.scala:26)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	... 3 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 15 more

Oct 05, 2023 11:24:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3262
2023.10.05 23:24:44 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:24:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

Oct 05, 2023 11:24:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3263
2023.10.05 23:24:44 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:24:45 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:24:48 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:24:48 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:24:50 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:24:50 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:24:53 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:24:53 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:24:58 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:24:58 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:24:58 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:24:59 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:25:04 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:25:04 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:25:05 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:25:05 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:25:16 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:25:16 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:25:19 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:25:19 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:25:19 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:25:19 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:25:20 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:25:20 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:25:20 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:25:21 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:25:23 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:25:23 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:25:23 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:25:24 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:25:24 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:25:24 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:25:25 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:25:25 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:25:29 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:25:29 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:25:35 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:25:35 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:25:47 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:25:47 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:25:52 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:25:52 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

Oct 05, 2023 11:25:52 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3284
2023.10.05 23:25:55 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:25:55 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:25:58 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:25:58 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:25:58 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:25:59 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:26:01 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:26:01 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:26:01 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:26:01 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:26:03 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:26:03 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:26:12 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:26:12 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:26:12 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:26:12 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:26:15 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:26:15 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:26:15 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:26:15 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:26:17 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:26:17 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:26:18 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:26:18 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:26:18 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:26:19 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:26:20 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:26:20 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:26:20 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:26:21 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:998)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:657)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1339)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1337)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:357)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 28 more

2023.10.05 23:27:02 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.05 23:27:43 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 05, 2023 11:28:18 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": [
    "jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java"
  ]
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor6.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.WorkspaceLspService.didFocus(WorkspaceLspService.scala:604)
	at scala.meta.metals.lsp.DelegatingScalaService.didFocus(DelegatingScalaService.scala:43)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 23 more

2023.10.05 23:28:18 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.foldingRange(WorkspaceLspService.scala:442)
	scala.meta.metals.lsp.DelegatingScalaService.foldingRange(DelegatingScalaService.scala:155)
	jdk.internal.reflect.GeneratedMethodAccessor7.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:28:18 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor7.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$foldingRange$1(MetalsLspService.scala:1582)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.foldingRange(MetalsLspService.scala:1581)
	at scala.meta.internal.metals.WorkspaceLspService.foldingRange(WorkspaceLspService.scala:442)
	at scala.meta.metals.lsp.DelegatingScalaService.foldingRange(DelegatingScalaService.scala:155)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 26 more

2023.10.05 23:28:18 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.codeLens(WorkspaceLspService.scala:437)
	scala.meta.metals.lsp.DelegatingScalaService.codeLens(DelegatingScalaService.scala:150)
	jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 05, 2023 11:28:18 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
java.util.concurrent.CompletionException: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:332)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:347)
	at java.base/java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:708)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2162)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeLens$2(MetalsLspService.scala:1573)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeLens$1(MetalsLspService.scala:1572)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$apply$2(CancelTokens.scala:26)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	... 3 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 15 more

Oct 05, 2023 11:28:19 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:329)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 24 more

2023.10.06 00:04:42 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\TreeInterface.scala
2023.10.06 00:04:44 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.06 12:11:19 INFO  Shutting down server
2023.10.06 12:11:19 INFO  shutting down Metals
2023.10.06 12:11:20 INFO  Failed to run request with params InverseSourcesResult
2023.10.06 12:11:20 INFO  Failed to run request with params InverseSourcesResult
2023.10.06 12:11:19 INFO  Exiting server
2023.10.10 14:17:50 INFO  Started: Metals version 1.0.1 in folders 'C:\vs code\Scala' for client Visual Studio Code 1.83.0.
Oct 10, 2023 2:17:50 PM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.21.2 by Redgate
Oct 10, 2023 2:17:50 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Oct 10, 2023 2:17:50 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Oct 10, 2023 2:17:51 PM org.flywaydb.core.FlywayExecutor execute
INFO: Database: jdbc:h2:file:C:\vs code\Scala\.metals\metals (H2 2.1)
Oct 10, 2023 2:17:51 PM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.064s)
Oct 10, 2023 2:17:51 PM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Oct 10, 2023 2:17:51 PM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.10.10 14:17:51 INFO  time: initialize in 1.6s
2023.10.10 14:18:08 INFO  no build target found for C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala. Using presentation compiler with project's scala-library version: 3.3.0
2023.10.10 14:18:09 INFO  Attempting to connect to the build server...
2023.10.10 14:18:09 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
Oct 10, 2023 2:18:09 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1
Oct 10, 2023 2:18:09 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9
2023.10.10 14:18:10 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.10.10 14:18:10 INFO  time: Connected to build server in 2.15s
2023.10.10 14:18:10 INFO  Connected to Build server: Bloop v1.5.8
2023.10.10 14:18:11 INFO  time: Imported build in 0.33s
2023.10.10 14:18:18 INFO  time: code lens generation in 5.35s
2023.10.10 14:18:18 INFO  time: code lens generation in 9.4s
2023.10.10 14:18:26 INFO  no build target found for C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala. Using presentation compiler with project's scala-library version: 3.3.0
2023.10.10 14:18:26 INFO  time: indexed workspace in 15s
2023.10.10 14:18:27 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:18:27 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:18:27 INFO  time: code lens generation in 17s
2023.10.10 14:18:35 INFO  time: code lens generation in 15s
Oct 10, 2023 2:19:19 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\vs code\Scala\.metals\.reports\metals-full\2023-10-10\r_compiler-error_14-19-19-761
Oct 10, 2023 2:19:22 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\vs code\Scala\.metals\.reports\metals-full\2023-10-10\r_compiler-error_14-19-22-565
2023.10.10 14:19:29 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:19:34 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:19:39 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:21:39 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\TreeInterface.scala
2023.10.10 14:23:50 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:23:50 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:23:51 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:23:51 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:26:23 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:27:38 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:29:47 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:31:06 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:31:29 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:31:52 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:32:16 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
2023.10.10 14:34:13 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:37:07 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\Contains.scala
2023.10.10 14:37:12 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\Contains.scala
2023.10.10 14:37:38 WARN  no build target for: C:\vs code\Scala\PA 1\build.sbt
2023.10.10 14:37:41 WARN  no build target for: C:\vs code\Scala\PA 1\build.sbt
2023.10.10 14:38:27 WARN  no build target for: C:\vs code\Scala\PA 1\build.sbt
2023.10.10 14:38:32 WARN  no build target for: C:\vs code\Scala\PA 1\build.sbt
2023.10.10 14:38:37 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\Contains.scala
2023.10.10 14:38:57 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
2023.10.10 14:42:12 WARN  no build target for: C:\vs code\Scala\PA 1\build.sbt
2023.10.10 14:44:12 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
2023.10.10 14:44:28 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
2023.10.10 14:45:21 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
2023.10.10 14:45:31 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\contains.scala
2023.10.10 14:45:32 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\contains.scala
2023.10.10 14:45:37 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:47:05 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\contains.scala
2023.10.10 14:47:09 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:47:10 WARN  Using indexes to guess the definition of Path
2023.10.10 14:47:10 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:670)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 10, 2023 2:47:10 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.nio.file;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.nio.file.spi.FileSystemProvider;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\n/**\n * An object that may be used to locate a file in a file system. It will\n * typically represent a system dependent file path.\n *\n * \u003cp\u003e A {@code Path} represents a path that is hierarchical and composed of a\n * sequence of directory and file name elements separated by a special separator\n * or delimiter. A \u003cem\u003eroot component\u003c/em\u003e, that identifies a file system\n * hierarchy, may also be present. The name element that is \u003cem\u003efarthest\u003c/em\u003e\n * from the root of the directory hierarchy is the name of a file or directory.\n * The other name elements are directory names. A {@code Path} can represent a\n * root, a root and a sequence of names, or simply one or more name elements.\n * A {@code Path} is considered to be an \u003ci\u003eempty path\u003c/i\u003e if it consists\n * solely of one name element that is empty. Accessing a file using an\n * \u003ci\u003eempty path\u003c/i\u003e is equivalent to accessing the default directory of the\n * file system. {@code Path} defines the {@link #getFileName() getFileName},\n * {@link #getParent getParent}, {@link #getRoot getRoot}, and {@link #subpath\n * subpath} methods to access the path components or a subsequence of its name\n * elements.\n *\n * \u003cp\u003e In addition to accessing the components of a path, a {@code Path} also\n * defines the {@link #resolve(Path) resolve} and {@link #resolveSibling(Path)\n * resolveSibling} methods to combine paths. The {@link #relativize relativize}\n * method that can be used to construct a relative path between two paths.\n * Paths can be {@link #compareTo compared}, and tested against each other using\n * the {@link #startsWith startsWith} and {@link #endsWith endsWith} methods.\n *\n * \u003cp\u003e This interface extends {@link Watchable} interface so that a directory\n * located by a path can be {@link #register registered} with a {@link\n * WatchService} and entries in the directory watched. \u003c/p\u003e\n *\n * \u003cp\u003e \u003cb\u003eWARNING:\u003c/b\u003e This interface is only intended to be implemented by\n * those developing custom file system implementations. Methods may be added to\n * this interface in future releases. \u003c/p\u003e\n *\n * \u003ch2\u003eAccessing Files\u003c/h2\u003e\n * \u003cp\u003e Paths may be used with the {@link Files} class to operate on files,\n * directories, and other types of files. For example, suppose we want a {@link\n * java.io.BufferedReader} to read text from a file \"{@code access.log}\". The\n * file is located in a directory \"{@code logs}\" relative to the current working\n * directory and is UTF-8 encoded.\n * \u003cpre\u003e\n *     Path path \u003d FileSystems.getDefault().getPath(\"logs\", \"access.log\");\n *     BufferedReader reader \u003d Files.newBufferedReader(path, StandardCharsets.UTF_8);\n * \u003c/pre\u003e\n *\n * \u003ca id\u003d\"interop\"\u003e\u003c/a\u003e\u003ch2\u003eInteroperability\u003c/h2\u003e\n * \u003cp\u003e Paths associated with the default {@link\n * java.nio.file.spi.FileSystemProvider provider} are generally interoperable\n * with the {@link java.io.File java.io.File} class. Paths created by other\n * providers are unlikely to be interoperable with the abstract path names\n * represented by {@code java.io.File}. The {@link java.io.File#toPath toPath}\n * method may be used to obtain a {@code Path} from the abstract path name\n * represented by a {@code java.io.File} object. The resulting {@code Path} can\n * be used to operate on the same file as the {@code java.io.File} object. In\n * addition, the {@link #toFile toFile} method is useful to construct a {@code\n * File} from the {@code String} representation of a {@code Path}.\n *\n * \u003ch2\u003eConcurrency\u003c/h2\u003e\n * \u003cp\u003e Implementations of this interface are immutable and safe for use by\n * multiple concurrent threads.\n *\n * @since 1.7\n */\n\npublic interface Path\n    extends Comparable\u003cPath\u003e, Iterable\u003cPath\u003e, Watchable\n{\n    /**\n     * Returns a {@code Path} by converting a path string, or a sequence of\n     * strings that when joined form a path string. If {@code more} does not\n     * specify any elements then the value of the {@code first} parameter is\n     * the path string to convert. If {@code more} specifies one or more\n     * elements then each non-empty string, including {@code first}, is\n     * considered to be a sequence of name elements and is joined to form a\n     * path string. The details as to how the Strings are joined is provider\n     * specific but typically they will be joined using the\n     * {@link FileSystem#getSeparator name-separator} as the separator.\n     * For example, if the name separator is \"{@code /}\" and\n     * {@code getPath(\"/foo\",\"bar\",\"gus\")} is invoked, then the path string\n     * {@code \"/foo/bar/gus\"} is converted to a {@code Path}. A {@code Path}\n     * representing an empty path is returned if {@code first} is the empty\n     * string and {@code more} does not contain any non-empty strings.\n     *\n     * \u003cp\u003e The {@code Path} is obtained by invoking the {@link FileSystem#getPath\n     * getPath} method of the {@link FileSystems#getDefault default} {@link\n     * FileSystem}.\n     *\n     * \u003cp\u003e Note that while this method is very convenient, using it will imply\n     * an assumed reference to the default {@code FileSystem} and limit the\n     * utility of the calling code. Hence it should not be used in library code\n     * intended for flexible reuse. A more flexible alternative is to use an\n     * existing {@code Path} instance as an anchor, such as:\n     * \u003cpre\u003e{@code\n     *     Path dir \u003d ...\n     *     Path path \u003d dir.resolve(\"file\");\n     * }\u003c/pre\u003e\n     *\n     * @param   first\n     *          the path string or initial part of the path string\n     * @param   more\n     *          additional strings to be joined to form the path string\n     *\n     * @return  the resulting {@code Path}\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a {@code Path}\n     *\n     * @see FileSystem#getPath\n     *\n     * @since 11\n     */\n    public static Path of(String first, String... more) {\n        return FileSystems.getDefault().getPath(first, more);\n    }\n\n    /**\n     * Returns a {@code Path} by converting a URI.\n     *\n     * \u003cp\u003e This method iterates over the {@link FileSystemProvider#installedProviders()\n     * installed} providers to locate the provider that is identified by the\n     * URI {@link URI#getScheme scheme} of the given URI. URI schemes are\n     * compared without regard to case. If the provider is found then its {@link\n     * FileSystemProvider#getPath getPath} method is invoked to convert the\n     * URI.\n     *\n     * \u003cp\u003e In the case of the default provider, identified by the URI scheme\n     * \"file\", the given URI has a non-empty path component, and undefined query\n     * and fragment components. Whether the authority component may be present\n     * is platform specific. The returned {@code Path} is associated with the\n     * {@link FileSystems#getDefault default} file system.\n     *\n     * \u003cp\u003e The default provider provides a similar \u003cem\u003eround-trip\u003c/em\u003e guarantee\n     * to the {@link java.io.File} class. For a given {@code Path} \u003ci\u003ep\u003c/i\u003e it\n     * is guaranteed that\n     * \u003cblockquote\u003e{@code\n     * Path.of(}\u003ci\u003ep\u003c/i\u003e{@code .}{@link Path#toUri() toUri}{@code ()).equals(}\n     * \u003ci\u003ep\u003c/i\u003e{@code .}{@link Path#toAbsolutePath() toAbsolutePath}{@code ())}\n     * \u003c/blockquote\u003e\n     * so long as the original {@code Path}, the {@code URI}, and the new {@code\n     * Path} are all created in (possibly different invocations of) the same\n     * Java virtual machine. Whether other providers make any guarantees is\n     * provider specific and therefore unspecified.\n     *\n     * @param   uri\n     *          the URI to convert\n     *\n     * @return  the resulting {@code Path}\n     *\n     * @throws  IllegalArgumentException\n     *          if preconditions on the {@code uri} parameter do not hold. The\n     *          format of the URI is provider specific.\n     * @throws  FileSystemNotFoundException\n     *          The file system, identified by the URI, does not exist and\n     *          cannot be created automatically, or the provider identified by\n     *          the URI\u0027s scheme component is not installed\n     * @throws  SecurityException\n     *          if a security manager is installed and it denies an unspecified\n     *          permission to access the file system\n     *\n     * @since 11\n     */\n    public static Path of(URI uri) {\n        String scheme \u003d  uri.getScheme();\n        if (scheme \u003d\u003d null)\n            throw new IllegalArgumentException(\"Missing scheme\");\n\n        // check for default provider to avoid loading of installed providers\n        if (scheme.equalsIgnoreCase(\"file\"))\n            return FileSystems.getDefault().provider().getPath(uri);\n\n        // try to find provider\n        for (FileSystemProvider provider: FileSystemProvider.installedProviders()) {\n            if (provider.getScheme().equalsIgnoreCase(scheme)) {\n                return provider.getPath(uri);\n            }\n        }\n\n        throw new FileSystemNotFoundException(\"Provider \\\"\" + scheme + \"\\\" not installed\");\n    }\n\n    /**\n     * Returns the file system that created this object.\n     *\n     * @return  the file system that created this object\n     */\n    FileSystem getFileSystem();\n\n    /**\n     * Tells whether or not this path is absolute.\n     *\n     * \u003cp\u003e An absolute path is complete in that it doesn\u0027t need to be combined\n     * with other path information in order to locate a file.\n     *\n     * @return  {@code true} if, and only if, this path is absolute\n     */\n    boolean isAbsolute();\n\n    /**\n     * Returns the root component of this path as a {@code Path} object,\n     * or {@code null} if this path does not have a root component.\n     *\n     * @return  a path representing the root component of this path,\n     *          or {@code null}\n     */\n    Path getRoot();\n\n    /**\n     * Returns the name of the file or directory denoted by this path as a\n     * {@code Path} object. The file name is the \u003cem\u003efarthest\u003c/em\u003e element from\n     * the root in the directory hierarchy.\n     *\n     * @return  a path representing the name of the file or directory, or\n     *          {@code null} if this path has zero elements\n     */\n    Path getFileName();\n\n    /**\n     * Returns the \u003cem\u003eparent path\u003c/em\u003e, or {@code null} if this path does not\n     * have a parent.\n     *\n     * \u003cp\u003e The parent of this path object consists of this path\u0027s root\n     * component, if any, and each element in the path except for the\n     * \u003cem\u003efarthest\u003c/em\u003e from the root in the directory hierarchy. This method\n     * does not access the file system; the path or its parent may not exist.\n     * Furthermore, this method does not eliminate special names such as \".\"\n     * and \"..\" that may be used in some implementations. On UNIX for example,\n     * the parent of \"{@code /a/b/c}\" is \"{@code /a/b}\", and the parent of\n     * {@code \"x/y/.}\" is \"{@code x/y}\". This method may be used with the {@link\n     * #normalize normalize} method, to eliminate redundant names, for cases where\n     * \u003cem\u003eshell-like\u003c/em\u003e navigation is required.\n     *\n     * \u003cp\u003e If this path has more than one element, and no root component, then\n     * this method is equivalent to evaluating the expression:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * subpath(0,\u0026nbsp;getNameCount()-1);\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @return  a path representing the path\u0027s parent\n     */\n    Path getParent();\n\n    /**\n     * Returns the number of name elements in the path.\n     *\n     * @return  the number of elements in the path, or {@code 0} if this path\n     *          only represents a root component\n     */\n    int getNameCount();\n\n    /**\n     * Returns a name element of this path as a {@code Path} object.\n     *\n     * \u003cp\u003e The {@code index} parameter is the index of the name element to return.\n     * The element that is \u003cem\u003eclosest\u003c/em\u003e to the root in the directory hierarchy\n     * has index {@code 0}. The element that is \u003cem\u003efarthest\u003c/em\u003e from the root\n     * has index {@link #getNameCount count}{@code -1}.\n     *\n     * @param   index\n     *          the index of the element\n     *\n     * @return  the name element\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code index} is negative, {@code index} is greater than or\n     *          equal to the number of elements, or this path has zero name\n     *          elements\n     */\n    Path getName(int index);\n\n    /**\n     * Returns a relative {@code Path} that is a subsequence of the name\n     * elements of this path.\n     *\n     * \u003cp\u003e The {@code beginIndex} and {@code endIndex} parameters specify the\n     * subsequence of name elements. The name that is \u003cem\u003eclosest\u003c/em\u003e to the root\n     * in the directory hierarchy has index {@code 0}. The name that is\n     * \u003cem\u003efarthest\u003c/em\u003e from the root has index {@link #getNameCount\n     * count}{@code -1}. The returned {@code Path} object has the name elements\n     * that begin at {@code beginIndex} and extend to the element at index {@code\n     * endIndex-1}.\n     *\n     * @param   beginIndex\n     *          the index of the first element, inclusive\n     * @param   endIndex\n     *          the index of the last element, exclusive\n     *\n     * @return  a new {@code Path} object that is a subsequence of the name\n     *          elements in this {@code Path}\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code beginIndex} is negative, or greater than or equal to\n     *          the number of elements. If {@code endIndex} is less than or\n     *          equal to {@code beginIndex}, or larger than the number of elements.\n     */\n    Path subpath(int beginIndex, int endIndex);\n\n    /**\n     * Tests if this path starts with the given path.\n     *\n     * \u003cp\u003e This path \u003cem\u003estarts\u003c/em\u003e with the given path if this path\u0027s root\n     * component \u003cem\u003estarts\u003c/em\u003e with the root component of the given path,\n     * and this path starts with the same name elements as the given path.\n     * If the given path has more name elements than this path then {@code false}\n     * is returned.\n     *\n     * \u003cp\u003e Whether or not the root component of this path starts with the root\n     * component of the given path is file system specific. If this path does\n     * not have a root component and the given path has a root component then\n     * this path does not start with the given path.\n     *\n     * \u003cp\u003e If the given path is associated with a different {@code FileSystem}\n     * to this path then {@code false} is returned.\n     *\n     * @param   other\n     *          the given path\n     *\n     * @return  {@code true} if this path starts with the given path; otherwise\n     *          {@code false}\n     */\n    boolean startsWith(Path other);\n\n    /**\n     * Tests if this path starts with a {@code Path}, constructed by converting\n     * the given path string, in exactly the manner specified by the {@link\n     * #startsWith(Path) startsWith(Path)} method. On UNIX for example, the path\n     * \"{@code foo/bar}\" starts with \"{@code foo}\" and \"{@code foo/bar}\". It\n     * does not start with \"{@code f}\" or \"{@code fo}\".\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     startsWith(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the given path string\n     *\n     * @return  {@code true} if this path starts with the given path; otherwise\n     *          {@code false}\n     *\n     * @throws  InvalidPathException\n     *          If the path string cannot be converted to a Path.\n     */\n    default boolean startsWith(String other) {\n        return startsWith(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Tests if this path ends with the given path.\n     *\n     * \u003cp\u003e If the given path has \u003cem\u003eN\u003c/em\u003e elements, and no root component,\n     * and this path has \u003cem\u003eN\u003c/em\u003e or more elements, then this path ends with\n     * the given path if the last \u003cem\u003eN\u003c/em\u003e elements of each path, starting at\n     * the element farthest from the root, are equal.\n     *\n     * \u003cp\u003e If the given path has a root component then this path ends with the\n     * given path if the root component of this path \u003cem\u003eends with\u003c/em\u003e the root\n     * component of the given path, and the corresponding elements of both paths\n     * are equal. Whether or not the root component of this path ends with the\n     * root component of the given path is file system specific. If this path\n     * does not have a root component and the given path has a root component\n     * then this path does not end with the given path.\n     *\n     * \u003cp\u003e If the given path is associated with a different {@code FileSystem}\n     * to this path then {@code false} is returned.\n     *\n     * @param   other\n     *          the given path\n     *\n     * @return  {@code true} if this path ends with the given path; otherwise\n     *          {@code false}\n     */\n    boolean endsWith(Path other);\n\n    /**\n     * Tests if this path ends with a {@code Path}, constructed by converting\n     * the given path string, in exactly the manner specified by the {@link\n     * #endsWith(Path) endsWith(Path)} method. On UNIX for example, the path\n     * \"{@code foo/bar}\" ends with \"{@code foo/bar}\" and \"{@code bar}\". It does\n     * not end with \"{@code r}\" or \"{@code /bar}\". Note that trailing separators\n     * are not taken into account, and so invoking this method on the {@code\n     * Path}\"{@code foo/bar}\" with the {@code String} \"{@code bar/}\" returns\n     * {@code true}.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     endsWith(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the given path string\n     *\n     * @return  {@code true} if this path ends with the given path; otherwise\n     *          {@code false}\n     *\n     * @throws  InvalidPathException\n     *          If the path string cannot be converted to a Path.\n     */\n    default boolean endsWith(String other) {\n        return endsWith(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Returns a path that is this path with redundant name elements eliminated.\n     *\n     * \u003cp\u003e The precise definition of this method is implementation dependent but\n     * in general it derives from this path, a path that does not contain\n     * \u003cem\u003eredundant\u003c/em\u003e name elements. In many file systems, the \"{@code .}\"\n     * and \"{@code ..}\" are special names used to indicate the current directory\n     * and parent directory. In such file systems all occurrences of \"{@code .}\"\n     * are considered redundant. If a \"{@code ..}\" is preceded by a\n     * non-\"{@code ..}\" name then both names are considered redundant (the\n     * process to identify such names is repeated until it is no longer\n     * applicable).\n     *\n     * \u003cp\u003e This method does not access the file system; the path may not locate\n     * a file that exists. Eliminating \"{@code ..}\" and a preceding name from a\n     * path may result in the path that locates a different file than the original\n     * path. This can arise when the preceding name is a symbolic link.\n     *\n     * @return  the resulting path or this path if it does not contain\n     *          redundant name elements; an empty path is returned if this path\n     *          does not have a root component and all name elements are redundant\n     *\n     * @see #getParent\n     * @see #toRealPath\n     */\n    Path normalize();\n\n    // -- resolution and relativization --\n\n    /**\n     * Resolve the given path against this path.\n     *\n     * \u003cp\u003e If the {@code other} parameter is an {@link #isAbsolute() absolute}\n     * path then this method trivially returns {@code other}. If {@code other}\n     * is an \u003ci\u003eempty path\u003c/i\u003e then this method trivially returns this path.\n     * Otherwise this method considers this path to be a directory and resolves\n     * the given path against this path. In the simplest case, the given path\n     * does not have a {@link #getRoot root} component, in which case this method\n     * \u003cem\u003ejoins\u003c/em\u003e the given path to this path and returns a resulting path\n     * that {@link #endsWith ends} with the given path. Where the given path has\n     * a root component then resolution is highly implementation dependent and\n     * therefore unspecified.\n     *\n     * @param   other\n     *          the path to resolve against this path\n     *\n     * @return  the resulting path\n     *\n     * @see #relativize\n     */\n    Path resolve(Path other);\n\n    /**\n     * Converts a given path string to a {@code Path} and resolves it against\n     * this {@code Path} in exactly the manner specified by the {@link\n     * #resolve(Path) resolve} method. For example, suppose that the name\n     * separator is \"{@code /}\" and a path represents \"{@code foo/bar}\", then\n     * invoking this method with the path string \"{@code gus}\" will result in\n     * the {@code Path} \"{@code foo/bar/gus}\".\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     resolve(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the path string to resolve against this path\n     *\n     * @return  the resulting path\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a Path.\n     *\n     * @see FileSystem#getPath\n     */\n    default Path resolve(String other) {\n        return resolve(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Resolves the given path against this path\u0027s {@link #getParent parent}\n     * path. This is useful where a file name needs to be \u003ci\u003ereplaced\u003c/i\u003e with\n     * another file name. For example, suppose that the name separator is\n     * \"{@code /}\" and a path represents \"{@code dir1/dir2/foo}\", then invoking\n     * this method with the {@code Path} \"{@code bar}\" will result in the {@code\n     * Path} \"{@code dir1/dir2/bar}\". If this path does not have a parent path,\n     * or {@code other} is {@link #isAbsolute() absolute}, then this method\n     * returns {@code other}. If {@code other} is an empty path then this method\n     * returns this path\u0027s parent, or where this path doesn\u0027t have a parent, the\n     * empty path.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     (getParent() \u003d\u003d null) ? other : getParent().resolve(other);\n     * }\u003c/pre\u003e\n     * unless {@code other \u003d\u003d null}, in which case a\n     * {@code NullPointerException} is thrown.\n     *\n     * @param   other\n     *          the path to resolve against this path\u0027s parent\n     *\n     * @return  the resulting path\n     *\n     * @see #resolve(Path)\n     */\n    default Path resolveSibling(Path other) {\n        if (other \u003d\u003d null)\n            throw new NullPointerException();\n        Path parent \u003d getParent();\n        return (parent \u003d\u003d null) ? other : parent.resolve(other);\n    }\n\n    /**\n     * Converts a given path string to a {@code Path} and resolves it against\n     * this path\u0027s {@link #getParent parent} path in exactly the manner\n     * specified by the {@link #resolveSibling(Path) resolveSibling} method.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     resolveSibling(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the path string to resolve against this path\u0027s parent\n     *\n     * @return  the resulting path\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a Path.\n     *\n     * @see FileSystem#getPath\n     */\n    default Path resolveSibling(String other) {\n        return resolveSibling(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Constructs a relative path between this path and a given path.\n     *\n     * \u003cp\u003e Relativization is the inverse of {@link #resolve(Path) resolution}.\n     * This method attempts to construct a {@link #isAbsolute relative} path\n     * that when {@link #resolve(Path) resolved} against this path, yields a\n     * path that locates the same file as the given path. For example, on UNIX,\n     * if this path is {@code \"/a/b\"} and the given path is {@code \"/a/b/c/d\"}\n     * then the resulting relative path would be {@code \"c/d\"}. Where this\n     * path and the given path do not have a {@link #getRoot root} component,\n     * then a relative path can be constructed. A relative path cannot be\n     * constructed if only one of the paths have a root component. Where both\n     * paths have a root component then it is implementation dependent if a\n     * relative path can be constructed. If this path and the given path are\n     * {@link #equals equal} then an \u003ci\u003eempty path\u003c/i\u003e is returned.\n     *\n     * \u003cp\u003e For any two {@link #normalize normalized} paths \u003ci\u003ep\u003c/i\u003e and\n     * \u003ci\u003eq\u003c/i\u003e, where \u003ci\u003eq\u003c/i\u003e does not have a root component,\n     * \u003cblockquote\u003e\n     *   \u003ci\u003ep\u003c/i\u003e{@code .relativize(}\u003ci\u003ep\u003c/i\u003e\n     *   {@code .resolve(}\u003ci\u003eq\u003c/i\u003e{@code )).equals(}\u003ci\u003eq\u003c/i\u003e{@code )}\n     * \u003c/blockquote\u003e\n     *\n     * \u003cp\u003e When symbolic links are supported, then whether the resulting path,\n     * when resolved against this path, yields a path that can be used to locate\n     * the {@link Files#isSameFile same} file as {@code other} is implementation\n     * dependent. For example, if this path is  {@code \"/a/b\"} and the given\n     * path is {@code \"/a/x\"} then the resulting relative path may be {@code\n     * \"../x\"}. If {@code \"b\"} is a symbolic link then is implementation\n     * dependent if {@code \"a/b/../x\"} would locate the same file as {@code \"/a/x\"}.\n     *\n     * @param   other\n     *          the path to relativize against this path\n     *\n     * @return  the resulting relative path, or an empty path if both paths are\n     *          equal\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code other} is not a {@code Path} that can be relativized\n     *          against this path\n     */\n    Path relativize(Path other);\n\n    /**\n     * Returns a URI to represent this path.\n     *\n     * \u003cp\u003e This method constructs an absolute {@link URI} with a {@link\n     * URI#getScheme() scheme} equal to the URI scheme that identifies the\n     * provider. The exact form of the scheme specific part is highly provider\n     * dependent.\n     *\n     * \u003cp\u003e In the case of the default provider, the URI is hierarchical with\n     * a {@link URI#getPath() path} component that is absolute. The query and\n     * fragment components are undefined. Whether the authority component is\n     * defined or not is implementation dependent. There is no guarantee that\n     * the {@code URI} may be used to construct a {@link java.io.File java.io.File}.\n     * In particular, if this path represents a Universal Naming Convention (UNC)\n     * path, then the UNC server name may be encoded in the authority component\n     * of the resulting URI. In the case of the default provider, and the file\n     * exists, and it can be determined that the file is a directory, then the\n     * resulting {@code URI} will end with a slash.\n     *\n     * \u003cp\u003e The default provider provides a similar \u003cem\u003eround-trip\u003c/em\u003e guarantee\n     * to the {@link java.io.File} class. For a given {@code Path} \u003ci\u003ep\u003c/i\u003e it\n     * is guaranteed that\n     * \u003cblockquote\u003e\n     * {@link Path#of(URI) Path.of}{@code (}\u003ci\u003ep\u003c/i\u003e{@code .toUri()).equals(}\u003ci\u003ep\u003c/i\u003e\n     * {@code .}{@link #toAbsolutePath() toAbsolutePath}{@code ())}\n     * \u003c/blockquote\u003e\n     * so long as the original {@code Path}, the {@code URI}, and the new {@code\n     * Path} are all created in (possibly different invocations of) the same\n     * Java virtual machine. Whether other providers make any guarantees is\n     * provider specific and therefore unspecified.\n     *\n     * \u003cp\u003e When a file system is constructed to access the contents of a file\n     * as a file system then it is highly implementation specific if the returned\n     * URI represents the given path in the file system or it represents a\n     * \u003cem\u003ecompound\u003c/em\u003e URI that encodes the URI of the enclosing file system.\n     * A format for compound URIs is not defined in this release; such a scheme\n     * may be added in a future release.\n     *\n     * @return  the URI representing this path\n     *\n     * @throws  java.io.IOError\n     *          if an I/O error occurs obtaining the absolute path, or where a\n     *          file system is constructed to access the contents of a file as\n     *          a file system, and the URI of the enclosing file system cannot be\n     *          obtained\n     *\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager\n     *          is installed, the {@link #toAbsolutePath toAbsolutePath} method\n     *          throws a security exception.\n     */\n    URI toUri();\n\n    /**\n     * Returns a {@code Path} object representing the absolute path of this\n     * path.\n     *\n     * \u003cp\u003e If this path is already {@link Path#isAbsolute absolute} then this\n     * method simply returns this path. Otherwise, this method resolves the path\n     * in an implementation dependent manner, typically by resolving the path\n     * against a file system default directory. Depending on the implementation,\n     * this method may throw an I/O error if the file system is not accessible.\n     *\n     * @return  a {@code Path} object representing the absolute path\n     *\n     * @throws  java.io.IOError\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, a security manager\n     *          is installed, and this path is not absolute, then the security\n     *          manager\u0027s {@link SecurityManager#checkPropertyAccess(String)\n     *          checkPropertyAccess} method is invoked to check access to the\n     *          system property {@code user.dir}\n     */\n    Path toAbsolutePath();\n\n    /**\n     * Returns the \u003cem\u003ereal\u003c/em\u003e path of an existing file.\n     *\n     * \u003cp\u003e The precise definition of this method is implementation dependent but\n     * in general it derives from this path, an {@link #isAbsolute absolute}\n     * path that locates the {@link Files#isSameFile same} file as this path, but\n     * with name elements that represent the actual name of the directories\n     * and the file. For example, where filename comparisons on a file system\n     * are case insensitive then the name elements represent the names in their\n     * actual case. Additionally, the resulting path has redundant name\n     * elements removed.\n     *\n     * \u003cp\u003e If this path is relative then its absolute path is first obtained,\n     * as if by invoking the {@link #toAbsolutePath toAbsolutePath} method.\n     *\n     * \u003cp\u003e The {@code options} array may be used to indicate how symbolic links\n     * are handled. By default, symbolic links are resolved to their final\n     * target. If the option {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} is\n     * present then this method does not resolve symbolic links.\n     *\n     * Some implementations allow special names such as \"{@code ..}\" to refer to\n     * the parent directory. When deriving the \u003cem\u003ereal path\u003c/em\u003e, and a\n     * \"{@code ..}\" (or equivalent) is preceded by a non-\"{@code ..}\" name then\n     * an implementation will typically cause both names to be removed. When\n     * not resolving symbolic links and the preceding name is a symbolic link\n     * then the names are only removed if it guaranteed that the resulting path\n     * will locate the same file as this path.\n     *\n     * @param   options\n     *          options indicating how symbolic links are handled\n     *\n     * @return  an absolute path represent the \u003cem\u003ereal\u003c/em\u003e path of the file\n     *          located by this object\n     *\n     * @throws  IOException\n     *          if the file does not exist or an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager\n     *          is installed, its {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file, and where\n     *          this path is not absolute, its {@link SecurityManager#checkPropertyAccess(String)\n     *          checkPropertyAccess} method is invoked to check access to the\n     *          system property {@code user.dir}\n     */\n    Path toRealPath(LinkOption... options) throws IOException;\n\n    /**\n     * Returns a {@link File} object representing this path. Where this {@code\n     * Path} is associated with the default provider, then this method is\n     * equivalent to returning a {@code File} object constructed with the\n     * {@code String} representation of this path.\n     *\n     * \u003cp\u003e If this path was created by invoking the {@code File} {@link\n     * File#toPath toPath} method then there is no guarantee that the {@code\n     * File} object returned by this method is {@link #equals equal} to the\n     * original {@code File}.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     new File(toString());\n     * }\u003c/pre\u003e\n     * if the {@code FileSystem} which created this {@code Path} is the default\n     * file system; otherwise an {@code UnsupportedOperationException} is\n     * thrown.\n     *\n     * @return  a {@code File} object representing this path\n     *\n     * @throws  UnsupportedOperationException\n     *          if this {@code Path} is not associated with the default provider\n     */\n    default File toFile() {\n        if (getFileSystem() \u003d\u003d FileSystems.getDefault()) {\n            return new File(toString());\n        } else {\n            throw new UnsupportedOperationException(\"Path not associated with \"\n                    + \"default file system.\");\n        }\n    }\n\n    // -- watchable --\n\n    /**\n     * Registers the file located by this path with a watch service.\n     *\n     * \u003cp\u003e In this release, this path locates a directory that exists. The\n     * directory is registered with the watch service so that entries in the\n     * directory can be watched. The {@code events} parameter is the events to\n     * register and may contain the following events:\n     * \u003cul\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_CREATE ENTRY_CREATE} -\n     *       entry created or moved into the directory\u003c/li\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_DELETE ENTRY_DELETE} -\n     *        entry deleted or moved out of the directory\u003c/li\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_MODIFY ENTRY_MODIFY} -\n     *        entry in directory was modified\u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e The {@link WatchEvent#context context} for these events is the\n     * relative path between the directory located by this path, and the path\n     * that locates the directory entry that is created, deleted, or modified.\n     *\n     * \u003cp\u003e The set of events may include additional implementation specific\n     * event that are not defined by the enum {@link StandardWatchEventKinds}\n     *\n     * \u003cp\u003e The {@code modifiers} parameter specifies \u003cem\u003emodifiers\u003c/em\u003e that\n     * qualify how the directory is registered. This release does not define any\n     * \u003cem\u003estandard\u003c/em\u003e modifiers. It may contain implementation specific\n     * modifiers.\n     *\n     * \u003cp\u003e Where a file is registered with a watch service by means of a symbolic\n     * link then it is implementation specific if the watch continues to depend\n     * on the existence of the symbolic link after it is registered.\n     *\n     * @param   watcher\n     *          the watch service to which this object is to be registered\n     * @param   events\n     *          the events for which this object should be registered\n     * @param   modifiers\n     *          the modifiers, if any, that modify how the object is registered\n     *\n     * @return  a key representing the registration of this object with the\n     *          given watch service\n     *\n     * @throws  UnsupportedOperationException\n     *          if unsupported events or modifiers are specified\n     * @throws  IllegalArgumentException\n     *          if an invalid combination of events or modifiers is specified\n     * @throws  ClosedWatchServiceException\n     *          if the watch service is closed\n     * @throws  NotDirectoryException\n     *          if the file is registered to watch the entries in a directory\n     *          and the file is not a directory  \u003ci\u003e(optional specific exception)\u003c/i\u003e\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     */\n    @Override\n    WatchKey register(WatchService watcher,\n                      WatchEvent.Kind\u003c?\u003e[] events,\n                      WatchEvent.Modifier... modifiers)\n        throws IOException;\n\n    /**\n     * Registers the file located by this path with a watch service.\n     *\n     * \u003cp\u003e An invocation of this method behaves in exactly the same way as the\n     * invocation\n     * \u003cpre\u003e\n     *     watchable.{@link #register(WatchService,WatchEvent.Kind[],WatchEvent.Modifier[]) register}(watcher, events, new WatchEvent.Modifier[0]);\n     * \u003c/pre\u003e\n     *\n     * \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e\n     * Suppose we wish to register a directory for entry create, delete, and modify\n     * events:\n     * \u003cpre\u003e\n     *     Path dir \u003d ...\n     *     WatchService watcher \u003d ...\n     *\n     *     WatchKey key \u003d dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);\n     * \u003c/pre\u003e\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     register(watcher, events, new WatchEvent.Modifier[0]);\n     * }\u003c/pre\u003e\n     *\n     * @param   watcher\n     *          The watch service to which this object is to be registered\n     * @param   events\n     *          The events for which this object should be registered\n     *\n     * @return  A key representing the registration of this object with the\n     *          given watch service\n     *\n     * @throws  UnsupportedOperationException\n     *          If unsupported events are specified\n     * @throws  IllegalArgumentException\n     *          If an invalid combination of events is specified\n     * @throws  ClosedWatchServiceException\n     *          If the watch service is closed\n     * @throws  NotDirectoryException\n     *          If the file is registered to watch the entries in a directory\n     *          and the file is not a directory  \u003ci\u003e(optional specific exception)\u003c/i\u003e\n     * @throws  IOException\n     *          If an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     */\n    @Override\n    default WatchKey register(WatchService watcher,\n                      WatchEvent.Kind\u003c?\u003e... events) throws IOException {\n        return register(watcher, events, new WatchEvent.Modifier[0]);\n    }\n\n    // -- Iterable --\n\n    /**\n     * Returns an iterator over the name elements of this path.\n     *\n     * \u003cp\u003e The first element returned by the iterator represents the name\n     * element that is closest to the root in the directory hierarchy, the\n     * second element is the next closest, and so on. The last element returned\n     * is the name of the file or directory denoted by this path. The {@link\n     * #getRoot root} component, if present, is not returned by the iterator.\n     *\n     * @implSpec\n     * The default implementation returns an {@code Iterator\u003cPath\u003e} which, for\n     * this path, traverses the {@code Path}s returned by\n     * {@code getName(index)}, where {@code index} ranges from zero to\n     * {@code getNameCount() - 1}, inclusive.\n     *\n     * @return  an iterator over the name elements of this path.\n     */\n    @Override\n    default Iterator\u003cPath\u003e iterator() {\n        return new Iterator\u003c\u003e() {\n            private int i \u003d 0;\n\n            @Override\n            public boolean hasNext() {\n                return (i \u003c getNameCount());\n            }\n\n            @Override\n            public Path next() {\n                if (i \u003c getNameCount()) {\n                    Path result \u003d getName(i);\n                    i++;\n                    return result;\n                } else {\n                    throw new NoSuchElementException();\n                }\n            }\n        };\n    }\n\n    // -- compareTo/equals/hashCode --\n\n    /**\n     * Compares two abstract paths lexicographically. The ordering defined by\n     * this method is provider specific, and in the case of the default\n     * provider, platform specific. This method does not access the file system\n     * and neither file is required to exist.\n     *\n     * \u003cp\u003e This method may not be used to compare paths that are associated\n     * with different file system providers.\n     *\n     * @param   other  the path compared to this path.\n     *\n     * @return  zero if the argument is {@link #equals equal} to this path, a\n     *          value less than zero if this path is lexicographically less than\n     *          the argument, or a value greater than zero if this path is\n     *          lexicographically greater than the argument\n     *\n     * @throws  ClassCastException\n     *          if the paths are associated with different providers\n     */\n    @Override\n    int compareTo(Path other);\n\n    /**\n     * Tests this path for equality with the given object.\n     *\n     * \u003cp\u003e If the given object is not a Path, or is a Path associated with a\n     * different {@code FileSystem}, then this method returns {@code false}.\n     *\n     * \u003cp\u003e Whether or not two path are equal depends on the file system\n     * implementation. In some cases the paths are compared without regard\n     * to case, and others are case sensitive. This method does not access the\n     * file system and the file is not required to exist. Where required, the\n     * {@link Files#isSameFile isSameFile} method may be used to check if two\n     * paths locate the same file.\n     *\n     * \u003cp\u003e This method satisfies the general contract of the {@link\n     * java.lang.Object#equals(Object) Object.equals} method. \u003c/p\u003e\n     *\n     * @param   other\n     *          the object to which this object is to be compared\n     *\n     * @return  {@code true} if, and only if, the given object is a {@code Path}\n     *          that is identical to this {@code Path}\n     */\n    boolean equals(Object other);\n\n    /**\n     * Computes a hash code for this path.\n     *\n     * \u003cp\u003e The hash code is based upon the components of the path, and\n     * satisfies the general contract of the {@link Object#hashCode\n     * Object.hashCode} method.\n     *\n     * @return  the hash-code value for this path\n     */\n    int hashCode();\n\n    /**\n     * Returns the string representation of this path.\n     *\n     * \u003cp\u003e If this path was created by converting a path string using the\n     * {@link FileSystem#getPath getPath} method then the path string returned\n     * by this method may differ from the original String used to create the path.\n     *\n     * \u003cp\u003e The returned path string uses the default name {@link\n     * FileSystem#getSeparator separator} to separate names in the path.\n     *\n     * @return  the string representation of this path\n     */\n    String toString();\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:319)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 24 more

Oct 10, 2023 2:47:10 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:329)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 24 more

Oct 10, 2023 2:47:12 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 732
Oct 10, 2023 2:47:29 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 747
2023.10.10 14:50:21 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
2023.10.10 14:50:22 WARN  Using indexes to guess the definition of Path
2023.10.10 14:50:22 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:670)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 10, 2023 2:50:22 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.nio.file;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.nio.file.spi.FileSystemProvider;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\n/**\n * An object that may be used to locate a file in a file system. It will\n * typically represent a system dependent file path.\n *\n * \u003cp\u003e A {@code Path} represents a path that is hierarchical and composed of a\n * sequence of directory and file name elements separated by a special separator\n * or delimiter. A \u003cem\u003eroot component\u003c/em\u003e, that identifies a file system\n * hierarchy, may also be present. The name element that is \u003cem\u003efarthest\u003c/em\u003e\n * from the root of the directory hierarchy is the name of a file or directory.\n * The other name elements are directory names. A {@code Path} can represent a\n * root, a root and a sequence of names, or simply one or more name elements.\n * A {@code Path} is considered to be an \u003ci\u003eempty path\u003c/i\u003e if it consists\n * solely of one name element that is empty. Accessing a file using an\n * \u003ci\u003eempty path\u003c/i\u003e is equivalent to accessing the default directory of the\n * file system. {@code Path} defines the {@link #getFileName() getFileName},\n * {@link #getParent getParent}, {@link #getRoot getRoot}, and {@link #subpath\n * subpath} methods to access the path components or a subsequence of its name\n * elements.\n *\n * \u003cp\u003e In addition to accessing the components of a path, a {@code Path} also\n * defines the {@link #resolve(Path) resolve} and {@link #resolveSibling(Path)\n * resolveSibling} methods to combine paths. The {@link #relativize relativize}\n * method that can be used to construct a relative path between two paths.\n * Paths can be {@link #compareTo compared}, and tested against each other using\n * the {@link #startsWith startsWith} and {@link #endsWith endsWith} methods.\n *\n * \u003cp\u003e This interface extends {@link Watchable} interface so that a directory\n * located by a path can be {@link #register registered} with a {@link\n * WatchService} and entries in the directory watched. \u003c/p\u003e\n *\n * \u003cp\u003e \u003cb\u003eWARNING:\u003c/b\u003e This interface is only intended to be implemented by\n * those developing custom file system implementations. Methods may be added to\n * this interface in future releases. \u003c/p\u003e\n *\n * \u003ch2\u003eAccessing Files\u003c/h2\u003e\n * \u003cp\u003e Paths may be used with the {@link Files} class to operate on files,\n * directories, and other types of files. For example, suppose we want a {@link\n * java.io.BufferedReader} to read text from a file \"{@code access.log}\". The\n * file is located in a directory \"{@code logs}\" relative to the current working\n * directory and is UTF-8 encoded.\n * \u003cpre\u003e\n *     Path path \u003d FileSystems.getDefault().getPath(\"logs\", \"access.log\");\n *     BufferedReader reader \u003d Files.newBufferedReader(path, StandardCharsets.UTF_8);\n * \u003c/pre\u003e\n *\n * \u003ca id\u003d\"interop\"\u003e\u003c/a\u003e\u003ch2\u003eInteroperability\u003c/h2\u003e\n * \u003cp\u003e Paths associated with the default {@link\n * java.nio.file.spi.FileSystemProvider provider} are generally interoperable\n * with the {@link java.io.File java.io.File} class. Paths created by other\n * providers are unlikely to be interoperable with the abstract path names\n * represented by {@code java.io.File}. The {@link java.io.File#toPath toPath}\n * method may be used to obtain a {@code Path} from the abstract path name\n * represented by a {@code java.io.File} object. The resulting {@code Path} can\n * be used to operate on the same file as the {@code java.io.File} object. In\n * addition, the {@link #toFile toFile} method is useful to construct a {@code\n * File} from the {@code String} representation of a {@code Path}.\n *\n * \u003ch2\u003eConcurrency\u003c/h2\u003e\n * \u003cp\u003e Implementations of this interface are immutable and safe for use by\n * multiple concurrent threads.\n *\n * @since 1.7\n */\n\npublic interface Path\n    extends Comparable\u003cPath\u003e, Iterable\u003cPath\u003e, Watchable\n{\n    /**\n     * Returns a {@code Path} by converting a path string, or a sequence of\n     * strings that when joined form a path string. If {@code more} does not\n     * specify any elements then the value of the {@code first} parameter is\n     * the path string to convert. If {@code more} specifies one or more\n     * elements then each non-empty string, including {@code first}, is\n     * considered to be a sequence of name elements and is joined to form a\n     * path string. The details as to how the Strings are joined is provider\n     * specific but typically they will be joined using the\n     * {@link FileSystem#getSeparator name-separator} as the separator.\n     * For example, if the name separator is \"{@code /}\" and\n     * {@code getPath(\"/foo\",\"bar\",\"gus\")} is invoked, then the path string\n     * {@code \"/foo/bar/gus\"} is converted to a {@code Path}. A {@code Path}\n     * representing an empty path is returned if {@code first} is the empty\n     * string and {@code more} does not contain any non-empty strings.\n     *\n     * \u003cp\u003e The {@code Path} is obtained by invoking the {@link FileSystem#getPath\n     * getPath} method of the {@link FileSystems#getDefault default} {@link\n     * FileSystem}.\n     *\n     * \u003cp\u003e Note that while this method is very convenient, using it will imply\n     * an assumed reference to the default {@code FileSystem} and limit the\n     * utility of the calling code. Hence it should not be used in library code\n     * intended for flexible reuse. A more flexible alternative is to use an\n     * existing {@code Path} instance as an anchor, such as:\n     * \u003cpre\u003e{@code\n     *     Path dir \u003d ...\n     *     Path path \u003d dir.resolve(\"file\");\n     * }\u003c/pre\u003e\n     *\n     * @param   first\n     *          the path string or initial part of the path string\n     * @param   more\n     *          additional strings to be joined to form the path string\n     *\n     * @return  the resulting {@code Path}\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a {@code Path}\n     *\n     * @see FileSystem#getPath\n     *\n     * @since 11\n     */\n    public static Path of(String first, String... more) {\n        return FileSystems.getDefault().getPath(first, more);\n    }\n\n    /**\n     * Returns a {@code Path} by converting a URI.\n     *\n     * \u003cp\u003e This method iterates over the {@link FileSystemProvider#installedProviders()\n     * installed} providers to locate the provider that is identified by the\n     * URI {@link URI#getScheme scheme} of the given URI. URI schemes are\n     * compared without regard to case. If the provider is found then its {@link\n     * FileSystemProvider#getPath getPath} method is invoked to convert the\n     * URI.\n     *\n     * \u003cp\u003e In the case of the default provider, identified by the URI scheme\n     * \"file\", the given URI has a non-empty path component, and undefined query\n     * and fragment components. Whether the authority component may be present\n     * is platform specific. The returned {@code Path} is associated with the\n     * {@link FileSystems#getDefault default} file system.\n     *\n     * \u003cp\u003e The default provider provides a similar \u003cem\u003eround-trip\u003c/em\u003e guarantee\n     * to the {@link java.io.File} class. For a given {@code Path} \u003ci\u003ep\u003c/i\u003e it\n     * is guaranteed that\n     * \u003cblockquote\u003e{@code\n     * Path.of(}\u003ci\u003ep\u003c/i\u003e{@code .}{@link Path#toUri() toUri}{@code ()).equals(}\n     * \u003ci\u003ep\u003c/i\u003e{@code .}{@link Path#toAbsolutePath() toAbsolutePath}{@code ())}\n     * \u003c/blockquote\u003e\n     * so long as the original {@code Path}, the {@code URI}, and the new {@code\n     * Path} are all created in (possibly different invocations of) the same\n     * Java virtual machine. Whether other providers make any guarantees is\n     * provider specific and therefore unspecified.\n     *\n     * @param   uri\n     *          the URI to convert\n     *\n     * @return  the resulting {@code Path}\n     *\n     * @throws  IllegalArgumentException\n     *          if preconditions on the {@code uri} parameter do not hold. The\n     *          format of the URI is provider specific.\n     * @throws  FileSystemNotFoundException\n     *          The file system, identified by the URI, does not exist and\n     *          cannot be created automatically, or the provider identified by\n     *          the URI\u0027s scheme component is not installed\n     * @throws  SecurityException\n     *          if a security manager is installed and it denies an unspecified\n     *          permission to access the file system\n     *\n     * @since 11\n     */\n    public static Path of(URI uri) {\n        String scheme \u003d  uri.getScheme();\n        if (scheme \u003d\u003d null)\n            throw new IllegalArgumentException(\"Missing scheme\");\n\n        // check for default provider to avoid loading of installed providers\n        if (scheme.equalsIgnoreCase(\"file\"))\n            return FileSystems.getDefault().provider().getPath(uri);\n\n        // try to find provider\n        for (FileSystemProvider provider: FileSystemProvider.installedProviders()) {\n            if (provider.getScheme().equalsIgnoreCase(scheme)) {\n                return provider.getPath(uri);\n            }\n        }\n\n        throw new FileSystemNotFoundException(\"Provider \\\"\" + scheme + \"\\\" not installed\");\n    }\n\n    /**\n     * Returns the file system that created this object.\n     *\n     * @return  the file system that created this object\n     */\n    FileSystem getFileSystem();\n\n    /**\n     * Tells whether or not this path is absolute.\n     *\n     * \u003cp\u003e An absolute path is complete in that it doesn\u0027t need to be combined\n     * with other path information in order to locate a file.\n     *\n     * @return  {@code true} if, and only if, this path is absolute\n     */\n    boolean isAbsolute();\n\n    /**\n     * Returns the root component of this path as a {@code Path} object,\n     * or {@code null} if this path does not have a root component.\n     *\n     * @return  a path representing the root component of this path,\n     *          or {@code null}\n     */\n    Path getRoot();\n\n    /**\n     * Returns the name of the file or directory denoted by this path as a\n     * {@code Path} object. The file name is the \u003cem\u003efarthest\u003c/em\u003e element from\n     * the root in the directory hierarchy.\n     *\n     * @return  a path representing the name of the file or directory, or\n     *          {@code null} if this path has zero elements\n     */\n    Path getFileName();\n\n    /**\n     * Returns the \u003cem\u003eparent path\u003c/em\u003e, or {@code null} if this path does not\n     * have a parent.\n     *\n     * \u003cp\u003e The parent of this path object consists of this path\u0027s root\n     * component, if any, and each element in the path except for the\n     * \u003cem\u003efarthest\u003c/em\u003e from the root in the directory hierarchy. This method\n     * does not access the file system; the path or its parent may not exist.\n     * Furthermore, this method does not eliminate special names such as \".\"\n     * and \"..\" that may be used in some implementations. On UNIX for example,\n     * the parent of \"{@code /a/b/c}\" is \"{@code /a/b}\", and the parent of\n     * {@code \"x/y/.}\" is \"{@code x/y}\". This method may be used with the {@link\n     * #normalize normalize} method, to eliminate redundant names, for cases where\n     * \u003cem\u003eshell-like\u003c/em\u003e navigation is required.\n     *\n     * \u003cp\u003e If this path has more than one element, and no root component, then\n     * this method is equivalent to evaluating the expression:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * subpath(0,\u0026nbsp;getNameCount()-1);\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @return  a path representing the path\u0027s parent\n     */\n    Path getParent();\n\n    /**\n     * Returns the number of name elements in the path.\n     *\n     * @return  the number of elements in the path, or {@code 0} if this path\n     *          only represents a root component\n     */\n    int getNameCount();\n\n    /**\n     * Returns a name element of this path as a {@code Path} object.\n     *\n     * \u003cp\u003e The {@code index} parameter is the index of the name element to return.\n     * The element that is \u003cem\u003eclosest\u003c/em\u003e to the root in the directory hierarchy\n     * has index {@code 0}. The element that is \u003cem\u003efarthest\u003c/em\u003e from the root\n     * has index {@link #getNameCount count}{@code -1}.\n     *\n     * @param   index\n     *          the index of the element\n     *\n     * @return  the name element\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code index} is negative, {@code index} is greater than or\n     *          equal to the number of elements, or this path has zero name\n     *          elements\n     */\n    Path getName(int index);\n\n    /**\n     * Returns a relative {@code Path} that is a subsequence of the name\n     * elements of this path.\n     *\n     * \u003cp\u003e The {@code beginIndex} and {@code endIndex} parameters specify the\n     * subsequence of name elements. The name that is \u003cem\u003eclosest\u003c/em\u003e to the root\n     * in the directory hierarchy has index {@code 0}. The name that is\n     * \u003cem\u003efarthest\u003c/em\u003e from the root has index {@link #getNameCount\n     * count}{@code -1}. The returned {@code Path} object has the name elements\n     * that begin at {@code beginIndex} and extend to the element at index {@code\n     * endIndex-1}.\n     *\n     * @param   beginIndex\n     *          the index of the first element, inclusive\n     * @param   endIndex\n     *          the index of the last element, exclusive\n     *\n     * @return  a new {@code Path} object that is a subsequence of the name\n     *          elements in this {@code Path}\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code beginIndex} is negative, or greater than or equal to\n     *          the number of elements. If {@code endIndex} is less than or\n     *          equal to {@code beginIndex}, or larger than the number of elements.\n     */\n    Path subpath(int beginIndex, int endIndex);\n\n    /**\n     * Tests if this path starts with the given path.\n     *\n     * \u003cp\u003e This path \u003cem\u003estarts\u003c/em\u003e with the given path if this path\u0027s root\n     * component \u003cem\u003estarts\u003c/em\u003e with the root component of the given path,\n     * and this path starts with the same name elements as the given path.\n     * If the given path has more name elements than this path then {@code false}\n     * is returned.\n     *\n     * \u003cp\u003e Whether or not the root component of this path starts with the root\n     * component of the given path is file system specific. If this path does\n     * not have a root component and the given path has a root component then\n     * this path does not start with the given path.\n     *\n     * \u003cp\u003e If the given path is associated with a different {@code FileSystem}\n     * to this path then {@code false} is returned.\n     *\n     * @param   other\n     *          the given path\n     *\n     * @return  {@code true} if this path starts with the given path; otherwise\n     *          {@code false}\n     */\n    boolean startsWith(Path other);\n\n    /**\n     * Tests if this path starts with a {@code Path}, constructed by converting\n     * the given path string, in exactly the manner specified by the {@link\n     * #startsWith(Path) startsWith(Path)} method. On UNIX for example, the path\n     * \"{@code foo/bar}\" starts with \"{@code foo}\" and \"{@code foo/bar}\". It\n     * does not start with \"{@code f}\" or \"{@code fo}\".\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     startsWith(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the given path string\n     *\n     * @return  {@code true} if this path starts with the given path; otherwise\n     *          {@code false}\n     *\n     * @throws  InvalidPathException\n     *          If the path string cannot be converted to a Path.\n     */\n    default boolean startsWith(String other) {\n        return startsWith(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Tests if this path ends with the given path.\n     *\n     * \u003cp\u003e If the given path has \u003cem\u003eN\u003c/em\u003e elements, and no root component,\n     * and this path has \u003cem\u003eN\u003c/em\u003e or more elements, then this path ends with\n     * the given path if the last \u003cem\u003eN\u003c/em\u003e elements of each path, starting at\n     * the element farthest from the root, are equal.\n     *\n     * \u003cp\u003e If the given path has a root component then this path ends with the\n     * given path if the root component of this path \u003cem\u003eends with\u003c/em\u003e the root\n     * component of the given path, and the corresponding elements of both paths\n     * are equal. Whether or not the root component of this path ends with the\n     * root component of the given path is file system specific. If this path\n     * does not have a root component and the given path has a root component\n     * then this path does not end with the given path.\n     *\n     * \u003cp\u003e If the given path is associated with a different {@code FileSystem}\n     * to this path then {@code false} is returned.\n     *\n     * @param   other\n     *          the given path\n     *\n     * @return  {@code true} if this path ends with the given path; otherwise\n     *          {@code false}\n     */\n    boolean endsWith(Path other);\n\n    /**\n     * Tests if this path ends with a {@code Path}, constructed by converting\n     * the given path string, in exactly the manner specified by the {@link\n     * #endsWith(Path) endsWith(Path)} method. On UNIX for example, the path\n     * \"{@code foo/bar}\" ends with \"{@code foo/bar}\" and \"{@code bar}\". It does\n     * not end with \"{@code r}\" or \"{@code /bar}\". Note that trailing separators\n     * are not taken into account, and so invoking this method on the {@code\n     * Path}\"{@code foo/bar}\" with the {@code String} \"{@code bar/}\" returns\n     * {@code true}.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     endsWith(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the given path string\n     *\n     * @return  {@code true} if this path ends with the given path; otherwise\n     *          {@code false}\n     *\n     * @throws  InvalidPathException\n     *          If the path string cannot be converted to a Path.\n     */\n    default boolean endsWith(String other) {\n        return endsWith(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Returns a path that is this path with redundant name elements eliminated.\n     *\n     * \u003cp\u003e The precise definition of this method is implementation dependent but\n     * in general it derives from this path, a path that does not contain\n     * \u003cem\u003eredundant\u003c/em\u003e name elements. In many file systems, the \"{@code .}\"\n     * and \"{@code ..}\" are special names used to indicate the current directory\n     * and parent directory. In such file systems all occurrences of \"{@code .}\"\n     * are considered redundant. If a \"{@code ..}\" is preceded by a\n     * non-\"{@code ..}\" name then both names are considered redundant (the\n     * process to identify such names is repeated until it is no longer\n     * applicable).\n     *\n     * \u003cp\u003e This method does not access the file system; the path may not locate\n     * a file that exists. Eliminating \"{@code ..}\" and a preceding name from a\n     * path may result in the path that locates a different file than the original\n     * path. This can arise when the preceding name is a symbolic link.\n     *\n     * @return  the resulting path or this path if it does not contain\n     *          redundant name elements; an empty path is returned if this path\n     *          does not have a root component and all name elements are redundant\n     *\n     * @see #getParent\n     * @see #toRealPath\n     */\n    Path normalize();\n\n    // -- resolution and relativization --\n\n    /**\n     * Resolve the given path against this path.\n     *\n     * \u003cp\u003e If the {@code other} parameter is an {@link #isAbsolute() absolute}\n     * path then this method trivially returns {@code other}. If {@code other}\n     * is an \u003ci\u003eempty path\u003c/i\u003e then this method trivially returns this path.\n     * Otherwise this method considers this path to be a directory and resolves\n     * the given path against this path. In the simplest case, the given path\n     * does not have a {@link #getRoot root} component, in which case this method\n     * \u003cem\u003ejoins\u003c/em\u003e the given path to this path and returns a resulting path\n     * that {@link #endsWith ends} with the given path. Where the given path has\n     * a root component then resolution is highly implementation dependent and\n     * therefore unspecified.\n     *\n     * @param   other\n     *          the path to resolve against this path\n     *\n     * @return  the resulting path\n     *\n     * @see #relativize\n     */\n    Path resolve(Path other);\n\n    /**\n     * Converts a given path string to a {@code Path} and resolves it against\n     * this {@code Path} in exactly the manner specified by the {@link\n     * #resolve(Path) resolve} method. For example, suppose that the name\n     * separator is \"{@code /}\" and a path represents \"{@code foo/bar}\", then\n     * invoking this method with the path string \"{@code gus}\" will result in\n     * the {@code Path} \"{@code foo/bar/gus}\".\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     resolve(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the path string to resolve against this path\n     *\n     * @return  the resulting path\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a Path.\n     *\n     * @see FileSystem#getPath\n     */\n    default Path resolve(String other) {\n        return resolve(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Resolves the given path against this path\u0027s {@link #getParent parent}\n     * path. This is useful where a file name needs to be \u003ci\u003ereplaced\u003c/i\u003e with\n     * another file name. For example, suppose that the name separator is\n     * \"{@code /}\" and a path represents \"{@code dir1/dir2/foo}\", then invoking\n     * this method with the {@code Path} \"{@code bar}\" will result in the {@code\n     * Path} \"{@code dir1/dir2/bar}\". If this path does not have a parent path,\n     * or {@code other} is {@link #isAbsolute() absolute}, then this method\n     * returns {@code other}. If {@code other} is an empty path then this method\n     * returns this path\u0027s parent, or where this path doesn\u0027t have a parent, the\n     * empty path.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     (getParent() \u003d\u003d null) ? other : getParent().resolve(other);\n     * }\u003c/pre\u003e\n     * unless {@code other \u003d\u003d null}, in which case a\n     * {@code NullPointerException} is thrown.\n     *\n     * @param   other\n     *          the path to resolve against this path\u0027s parent\n     *\n     * @return  the resulting path\n     *\n     * @see #resolve(Path)\n     */\n    default Path resolveSibling(Path other) {\n        if (other \u003d\u003d null)\n            throw new NullPointerException();\n        Path parent \u003d getParent();\n        return (parent \u003d\u003d null) ? other : parent.resolve(other);\n    }\n\n    /**\n     * Converts a given path string to a {@code Path} and resolves it against\n     * this path\u0027s {@link #getParent parent} path in exactly the manner\n     * specified by the {@link #resolveSibling(Path) resolveSibling} method.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     resolveSibling(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the path string to resolve against this path\u0027s parent\n     *\n     * @return  the resulting path\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a Path.\n     *\n     * @see FileSystem#getPath\n     */\n    default Path resolveSibling(String other) {\n        return resolveSibling(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Constructs a relative path between this path and a given path.\n     *\n     * \u003cp\u003e Relativization is the inverse of {@link #resolve(Path) resolution}.\n     * This method attempts to construct a {@link #isAbsolute relative} path\n     * that when {@link #resolve(Path) resolved} against this path, yields a\n     * path that locates the same file as the given path. For example, on UNIX,\n     * if this path is {@code \"/a/b\"} and the given path is {@code \"/a/b/c/d\"}\n     * then the resulting relative path would be {@code \"c/d\"}. Where this\n     * path and the given path do not have a {@link #getRoot root} component,\n     * then a relative path can be constructed. A relative path cannot be\n     * constructed if only one of the paths have a root component. Where both\n     * paths have a root component then it is implementation dependent if a\n     * relative path can be constructed. If this path and the given path are\n     * {@link #equals equal} then an \u003ci\u003eempty path\u003c/i\u003e is returned.\n     *\n     * \u003cp\u003e For any two {@link #normalize normalized} paths \u003ci\u003ep\u003c/i\u003e and\n     * \u003ci\u003eq\u003c/i\u003e, where \u003ci\u003eq\u003c/i\u003e does not have a root component,\n     * \u003cblockquote\u003e\n     *   \u003ci\u003ep\u003c/i\u003e{@code .relativize(}\u003ci\u003ep\u003c/i\u003e\n     *   {@code .resolve(}\u003ci\u003eq\u003c/i\u003e{@code )).equals(}\u003ci\u003eq\u003c/i\u003e{@code )}\n     * \u003c/blockquote\u003e\n     *\n     * \u003cp\u003e When symbolic links are supported, then whether the resulting path,\n     * when resolved against this path, yields a path that can be used to locate\n     * the {@link Files#isSameFile same} file as {@code other} is implementation\n     * dependent. For example, if this path is  {@code \"/a/b\"} and the given\n     * path is {@code \"/a/x\"} then the resulting relative path may be {@code\n     * \"../x\"}. If {@code \"b\"} is a symbolic link then is implementation\n     * dependent if {@code \"a/b/../x\"} would locate the same file as {@code \"/a/x\"}.\n     *\n     * @param   other\n     *          the path to relativize against this path\n     *\n     * @return  the resulting relative path, or an empty path if both paths are\n     *          equal\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code other} is not a {@code Path} that can be relativized\n     *          against this path\n     */\n    Path relativize(Path other);\n\n    /**\n     * Returns a URI to represent this path.\n     *\n     * \u003cp\u003e This method constructs an absolute {@link URI} with a {@link\n     * URI#getScheme() scheme} equal to the URI scheme that identifies the\n     * provider. The exact form of the scheme specific part is highly provider\n     * dependent.\n     *\n     * \u003cp\u003e In the case of the default provider, the URI is hierarchical with\n     * a {@link URI#getPath() path} component that is absolute. The query and\n     * fragment components are undefined. Whether the authority component is\n     * defined or not is implementation dependent. There is no guarantee that\n     * the {@code URI} may be used to construct a {@link java.io.File java.io.File}.\n     * In particular, if this path represents a Universal Naming Convention (UNC)\n     * path, then the UNC server name may be encoded in the authority component\n     * of the resulting URI. In the case of the default provider, and the file\n     * exists, and it can be determined that the file is a directory, then the\n     * resulting {@code URI} will end with a slash.\n     *\n     * \u003cp\u003e The default provider provides a similar \u003cem\u003eround-trip\u003c/em\u003e guarantee\n     * to the {@link java.io.File} class. For a given {@code Path} \u003ci\u003ep\u003c/i\u003e it\n     * is guaranteed that\n     * \u003cblockquote\u003e\n     * {@link Path#of(URI) Path.of}{@code (}\u003ci\u003ep\u003c/i\u003e{@code .toUri()).equals(}\u003ci\u003ep\u003c/i\u003e\n     * {@code .}{@link #toAbsolutePath() toAbsolutePath}{@code ())}\n     * \u003c/blockquote\u003e\n     * so long as the original {@code Path}, the {@code URI}, and the new {@code\n     * Path} are all created in (possibly different invocations of) the same\n     * Java virtual machine. Whether other providers make any guarantees is\n     * provider specific and therefore unspecified.\n     *\n     * \u003cp\u003e When a file system is constructed to access the contents of a file\n     * as a file system then it is highly implementation specific if the returned\n     * URI represents the given path in the file system or it represents a\n     * \u003cem\u003ecompound\u003c/em\u003e URI that encodes the URI of the enclosing file system.\n     * A format for compound URIs is not defined in this release; such a scheme\n     * may be added in a future release.\n     *\n     * @return  the URI representing this path\n     *\n     * @throws  java.io.IOError\n     *          if an I/O error occurs obtaining the absolute path, or where a\n     *          file system is constructed to access the contents of a file as\n     *          a file system, and the URI of the enclosing file system cannot be\n     *          obtained\n     *\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager\n     *          is installed, the {@link #toAbsolutePath toAbsolutePath} method\n     *          throws a security exception.\n     */\n    URI toUri();\n\n    /**\n     * Returns a {@code Path} object representing the absolute path of this\n     * path.\n     *\n     * \u003cp\u003e If this path is already {@link Path#isAbsolute absolute} then this\n     * method simply returns this path. Otherwise, this method resolves the path\n     * in an implementation dependent manner, typically by resolving the path\n     * against a file system default directory. Depending on the implementation,\n     * this method may throw an I/O error if the file system is not accessible.\n     *\n     * @return  a {@code Path} object representing the absolute path\n     *\n     * @throws  java.io.IOError\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, a security manager\n     *          is installed, and this path is not absolute, then the security\n     *          manager\u0027s {@link SecurityManager#checkPropertyAccess(String)\n     *          checkPropertyAccess} method is invoked to check access to the\n     *          system property {@code user.dir}\n     */\n    Path toAbsolutePath();\n\n    /**\n     * Returns the \u003cem\u003ereal\u003c/em\u003e path of an existing file.\n     *\n     * \u003cp\u003e The precise definition of this method is implementation dependent but\n     * in general it derives from this path, an {@link #isAbsolute absolute}\n     * path that locates the {@link Files#isSameFile same} file as this path, but\n     * with name elements that represent the actual name of the directories\n     * and the file. For example, where filename comparisons on a file system\n     * are case insensitive then the name elements represent the names in their\n     * actual case. Additionally, the resulting path has redundant name\n     * elements removed.\n     *\n     * \u003cp\u003e If this path is relative then its absolute path is first obtained,\n     * as if by invoking the {@link #toAbsolutePath toAbsolutePath} method.\n     *\n     * \u003cp\u003e The {@code options} array may be used to indicate how symbolic links\n     * are handled. By default, symbolic links are resolved to their final\n     * target. If the option {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} is\n     * present then this method does not resolve symbolic links.\n     *\n     * Some implementations allow special names such as \"{@code ..}\" to refer to\n     * the parent directory. When deriving the \u003cem\u003ereal path\u003c/em\u003e, and a\n     * \"{@code ..}\" (or equivalent) is preceded by a non-\"{@code ..}\" name then\n     * an implementation will typically cause both names to be removed. When\n     * not resolving symbolic links and the preceding name is a symbolic link\n     * then the names are only removed if it guaranteed that the resulting path\n     * will locate the same file as this path.\n     *\n     * @param   options\n     *          options indicating how symbolic links are handled\n     *\n     * @return  an absolute path represent the \u003cem\u003ereal\u003c/em\u003e path of the file\n     *          located by this object\n     *\n     * @throws  IOException\n     *          if the file does not exist or an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager\n     *          is installed, its {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file, and where\n     *          this path is not absolute, its {@link SecurityManager#checkPropertyAccess(String)\n     *          checkPropertyAccess} method is invoked to check access to the\n     *          system property {@code user.dir}\n     */\n    Path toRealPath(LinkOption... options) throws IOException;\n\n    /**\n     * Returns a {@link File} object representing this path. Where this {@code\n     * Path} is associated with the default provider, then this method is\n     * equivalent to returning a {@code File} object constructed with the\n     * {@code String} representation of this path.\n     *\n     * \u003cp\u003e If this path was created by invoking the {@code File} {@link\n     * File#toPath toPath} method then there is no guarantee that the {@code\n     * File} object returned by this method is {@link #equals equal} to the\n     * original {@code File}.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     new File(toString());\n     * }\u003c/pre\u003e\n     * if the {@code FileSystem} which created this {@code Path} is the default\n     * file system; otherwise an {@code UnsupportedOperationException} is\n     * thrown.\n     *\n     * @return  a {@code File} object representing this path\n     *\n     * @throws  UnsupportedOperationException\n     *          if this {@code Path} is not associated with the default provider\n     */\n    default File toFile() {\n        if (getFileSystem() \u003d\u003d FileSystems.getDefault()) {\n            return new File(toString());\n        } else {\n            throw new UnsupportedOperationException(\"Path not associated with \"\n                    + \"default file system.\");\n        }\n    }\n\n    // -- watchable --\n\n    /**\n     * Registers the file located by this path with a watch service.\n     *\n     * \u003cp\u003e In this release, this path locates a directory that exists. The\n     * directory is registered with the watch service so that entries in the\n     * directory can be watched. The {@code events} parameter is the events to\n     * register and may contain the following events:\n     * \u003cul\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_CREATE ENTRY_CREATE} -\n     *       entry created or moved into the directory\u003c/li\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_DELETE ENTRY_DELETE} -\n     *        entry deleted or moved out of the directory\u003c/li\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_MODIFY ENTRY_MODIFY} -\n     *        entry in directory was modified\u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e The {@link WatchEvent#context context} for these events is the\n     * relative path between the directory located by this path, and the path\n     * that locates the directory entry that is created, deleted, or modified.\n     *\n     * \u003cp\u003e The set of events may include additional implementation specific\n     * event that are not defined by the enum {@link StandardWatchEventKinds}\n     *\n     * \u003cp\u003e The {@code modifiers} parameter specifies \u003cem\u003emodifiers\u003c/em\u003e that\n     * qualify how the directory is registered. This release does not define any\n     * \u003cem\u003estandard\u003c/em\u003e modifiers. It may contain implementation specific\n     * modifiers.\n     *\n     * \u003cp\u003e Where a file is registered with a watch service by means of a symbolic\n     * link then it is implementation specific if the watch continues to depend\n     * on the existence of the symbolic link after it is registered.\n     *\n     * @param   watcher\n     *          the watch service to which this object is to be registered\n     * @param   events\n     *          the events for which this object should be registered\n     * @param   modifiers\n     *          the modifiers, if any, that modify how the object is registered\n     *\n     * @return  a key representing the registration of this object with the\n     *          given watch service\n     *\n     * @throws  UnsupportedOperationException\n     *          if unsupported events or modifiers are specified\n     * @throws  IllegalArgumentException\n     *          if an invalid combination of events or modifiers is specified\n     * @throws  ClosedWatchServiceException\n     *          if the watch service is closed\n     * @throws  NotDirectoryException\n     *          if the file is registered to watch the entries in a directory\n     *          and the file is not a directory  \u003ci\u003e(optional specific exception)\u003c/i\u003e\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     */\n    @Override\n    WatchKey register(WatchService watcher,\n                      WatchEvent.Kind\u003c?\u003e[] events,\n                      WatchEvent.Modifier... modifiers)\n        throws IOException;\n\n    /**\n     * Registers the file located by this path with a watch service.\n     *\n     * \u003cp\u003e An invocation of this method behaves in exactly the same way as the\n     * invocation\n     * \u003cpre\u003e\n     *     watchable.{@link #register(WatchService,WatchEvent.Kind[],WatchEvent.Modifier[]) register}(watcher, events, new WatchEvent.Modifier[0]);\n     * \u003c/pre\u003e\n     *\n     * \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e\n     * Suppose we wish to register a directory for entry create, delete, and modify\n     * events:\n     * \u003cpre\u003e\n     *     Path dir \u003d ...\n     *     WatchService watcher \u003d ...\n     *\n     *     WatchKey key \u003d dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);\n     * \u003c/pre\u003e\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     register(watcher, events, new WatchEvent.Modifier[0]);\n     * }\u003c/pre\u003e\n     *\n     * @param   watcher\n     *          The watch service to which this object is to be registered\n     * @param   events\n     *          The events for which this object should be registered\n     *\n     * @return  A key representing the registration of this object with the\n     *          given watch service\n     *\n     * @throws  UnsupportedOperationException\n     *          If unsupported events are specified\n     * @throws  IllegalArgumentException\n     *          If an invalid combination of events is specified\n     * @throws  ClosedWatchServiceException\n     *          If the watch service is closed\n     * @throws  NotDirectoryException\n     *          If the file is registered to watch the entries in a directory\n     *          and the file is not a directory  \u003ci\u003e(optional specific exception)\u003c/i\u003e\n     * @throws  IOException\n     *          If an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     */\n    @Override\n    default WatchKey register(WatchService watcher,\n                      WatchEvent.Kind\u003c?\u003e... events) throws IOException {\n        return register(watcher, events, new WatchEvent.Modifier[0]);\n    }\n\n    // -- Iterable --\n\n    /**\n     * Returns an iterator over the name elements of this path.\n     *\n     * \u003cp\u003e The first element returned by the iterator represents the name\n     * element that is closest to the root in the directory hierarchy, the\n     * second element is the next closest, and so on. The last element returned\n     * is the name of the file or directory denoted by this path. The {@link\n     * #getRoot root} component, if present, is not returned by the iterator.\n     *\n     * @implSpec\n     * The default implementation returns an {@code Iterator\u003cPath\u003e} which, for\n     * this path, traverses the {@code Path}s returned by\n     * {@code getName(index)}, where {@code index} ranges from zero to\n     * {@code getNameCount() - 1}, inclusive.\n     *\n     * @return  an iterator over the name elements of this path.\n     */\n    @Override\n    default Iterator\u003cPath\u003e iterator() {\n        return new Iterator\u003c\u003e() {\n            private int i \u003d 0;\n\n            @Override\n            public boolean hasNext() {\n                return (i \u003c getNameCount());\n            }\n\n            @Override\n            public Path next() {\n                if (i \u003c getNameCount()) {\n                    Path result \u003d getName(i);\n                    i++;\n                    return result;\n                } else {\n                    throw new NoSuchElementException();\n                }\n            }\n        };\n    }\n\n    // -- compareTo/equals/hashCode --\n\n    /**\n     * Compares two abstract paths lexicographically. The ordering defined by\n     * this method is provider specific, and in the case of the default\n     * provider, platform specific. This method does not access the file system\n     * and neither file is required to exist.\n     *\n     * \u003cp\u003e This method may not be used to compare paths that are associated\n     * with different file system providers.\n     *\n     * @param   other  the path compared to this path.\n     *\n     * @return  zero if the argument is {@link #equals equal} to this path, a\n     *          value less than zero if this path is lexicographically less than\n     *          the argument, or a value greater than zero if this path is\n     *          lexicographically greater than the argument\n     *\n     * @throws  ClassCastException\n     *          if the paths are associated with different providers\n     */\n    @Override\n    int compareTo(Path other);\n\n    /**\n     * Tests this path for equality with the given object.\n     *\n     * \u003cp\u003e If the given object is not a Path, or is a Path associated with a\n     * different {@code FileSystem}, then this method returns {@code false}.\n     *\n     * \u003cp\u003e Whether or not two path are equal depends on the file system\n     * implementation. In some cases the paths are compared without regard\n     * to case, and others are case sensitive. This method does not access the\n     * file system and the file is not required to exist. Where required, the\n     * {@link Files#isSameFile isSameFile} method may be used to check if two\n     * paths locate the same file.\n     *\n     * \u003cp\u003e This method satisfies the general contract of the {@link\n     * java.lang.Object#equals(Object) Object.equals} method. \u003c/p\u003e\n     *\n     * @param   other\n     *          the object to which this object is to be compared\n     *\n     * @return  {@code true} if, and only if, the given object is a {@code Path}\n     *          that is identical to this {@code Path}\n     */\n    boolean equals(Object other);\n\n    /**\n     * Computes a hash code for this path.\n     *\n     * \u003cp\u003e The hash code is based upon the components of the path, and\n     * satisfies the general contract of the {@link Object#hashCode\n     * Object.hashCode} method.\n     *\n     * @return  the hash-code value for this path\n     */\n    int hashCode();\n\n    /**\n     * Returns the string representation of this path.\n     *\n     * \u003cp\u003e If this path was created by converting a path string using the\n     * {@link FileSystem#getPath getPath} method then the path string returned\n     * by this method may differ from the original String used to create the path.\n     *\n     * \u003cp\u003e The returned path string uses the default name {@link\n     * FileSystem#getSeparator separator} to separate names in the path.\n     *\n     * @return  the string representation of this path\n     */\n    String toString();\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:319)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 24 more

Oct 10, 2023 2:50:22 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:329)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 24 more

2023.10.10 14:50:22 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/lang/String.java
Uri: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/lang/String.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:670)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 10, 2023 2:50:22 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/lang/String.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1994, 2022, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.lang;\n\nimport java.io.ObjectStreamField;\nimport java.io.UnsupportedEncodingException;\nimport java.lang.annotation.Native;\nimport java.lang.invoke.MethodHandles;\nimport java.lang.constant.Constable;\nimport java.lang.constant.ConstantDesc;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Formatter;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.Spliterator;\nimport java.util.function.Function;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\n\nimport jdk.internal.vm.annotation.ForceInline;\nimport jdk.internal.vm.annotation.IntrinsicCandidate;\nimport jdk.internal.vm.annotation.Stable;\nimport sun.nio.cs.ArrayDecoder;\nimport sun.nio.cs.ArrayEncoder;\n\nimport sun.nio.cs.ISO_8859_1;\nimport sun.nio.cs.US_ASCII;\nimport sun.nio.cs.UTF_8;\n\n/**\n * The {@code String} class represents character strings. All\n * string literals in Java programs, such as {@code \"abc\"}, are\n * implemented as instances of this class.\n * \u003cp\u003e\n * Strings are constant; their values cannot be changed after they\n * are created. String buffers support mutable strings.\n * Because String objects are immutable they can be shared. For example:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     String str \u003d \"abc\";\n * \u003c/pre\u003e\u003c/blockquote\u003e\u003cp\u003e\n * is equivalent to:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     char data[] \u003d {\u0027a\u0027, \u0027b\u0027, \u0027c\u0027};\n *     String str \u003d new String(data);\n * \u003c/pre\u003e\u003c/blockquote\u003e\u003cp\u003e\n * Here are some more examples of how strings can be used:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     System.out.println(\"abc\");\n *     String cde \u003d \"cde\";\n *     System.out.println(\"abc\" + cde);\n *     String c \u003d \"abc\".substring(2, 3);\n *     String d \u003d cde.substring(1, 2);\n * \u003c/pre\u003e\u003c/blockquote\u003e\n * \u003cp\u003e\n * The class {@code String} includes methods for examining\n * individual characters of the sequence, for comparing strings, for\n * searching strings, for extracting substrings, and for creating a\n * copy of a string with all characters translated to uppercase or to\n * lowercase. Case mapping is based on the Unicode Standard version\n * specified by the {@link java.lang.Character Character} class.\n * \u003cp\u003e\n * The Java language provides special support for the string\n * concatenation operator (\u0026nbsp;+\u0026nbsp;), and for conversion of\n * other objects to strings. For additional information on string\n * concatenation and conversion, see \u003ci\u003eThe Java Language Specification\u003c/i\u003e.\n *\n * \u003cp\u003e Unless otherwise noted, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n *\n * \u003cp\u003eA {@code String} represents a string in the UTF-16 format\n * in which \u003cem\u003esupplementary characters\u003c/em\u003e are represented by \u003cem\u003esurrogate\n * pairs\u003c/em\u003e (see the section \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode\n * Character Representations\u003c/a\u003e in the {@code Character} class for\n * more information).\n * Index values refer to {@code char} code units, so a supplementary\n * character uses two positions in a {@code String}.\n * \u003cp\u003eThe {@code String} class provides methods for dealing with\n * Unicode code points (i.e., characters), in addition to those for\n * dealing with Unicode code units (i.e., {@code char} values).\n *\n * \u003cp\u003eUnless otherwise noted, methods for comparing Strings do not take locale\n * into account.  The {@link java.text.Collator} class provides methods for\n * finer-grain, locale-sensitive String comparison.\n *\n * @implNote The implementation of the string concatenation operator is left to\n * the discretion of a Java compiler, as long as the compiler ultimately conforms\n * to \u003ci\u003eThe Java Language Specification\u003c/i\u003e. For example, the {@code javac} compiler\n * may implement the operator with {@code StringBuffer}, {@code StringBuilder},\n * or {@code java.lang.invoke.StringConcatFactory} depending on the JDK version. The\n * implementation of string conversion is typically through the method {@code toString},\n * defined by {@code Object} and inherited by all classes in Java.\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Martin Buchholz\n * @author  Ulf Zibis\n * @see     java.lang.Object#toString()\n * @see     java.lang.StringBuffer\n * @see     java.lang.StringBuilder\n * @see     java.nio.charset.Charset\n * @since   1.0\n * @jls     15.18.1 String Concatenation Operator +\n */\n\npublic final class String\n    implements java.io.Serializable, Comparable\u003cString\u003e, CharSequence,\n               Constable, ConstantDesc {\n\n    /**\n     * The value is used for character storage.\n     *\n     * @implNote This field is trusted by the VM, and is a subject to\n     * constant folding if String instance is constant. Overwriting this\n     * field after construction will cause problems.\n     *\n     * Additionally, it is marked with {@link Stable} to trust the contents\n     * of the array. No other facility in JDK provides this functionality (yet).\n     * {@link Stable} is safe here, because value is never null.\n     */\n    @Stable\n    private final byte[] value;\n\n    /**\n     * The identifier of the encoding used to encode the bytes in\n     * {@code value}. The supported values in this implementation are\n     *\n     * LATIN1\n     * UTF16\n     *\n     * @implNote This field is trusted by the VM, and is a subject to\n     * constant folding if String instance is constant. Overwriting this\n     * field after construction will cause problems.\n     */\n    private final byte coder;\n\n    /** Cache the hash code for the string */\n    private int hash; // Default to 0\n\n    /**\n     * Cache if the hash has been calculated as actually being zero, enabling\n     * us to avoid recalculating this.\n     */\n    private boolean hashIsZero; // Default to false;\n\n    /** use serialVersionUID from JDK 1.0.2 for interoperability */\n    @java.io.Serial\n    private static final long serialVersionUID \u003d -6849794470754667710L;\n\n    /**\n     * If String compaction is disabled, the bytes in {@code value} are\n     * always encoded in UTF16.\n     *\n     * For methods with several possible implementation paths, when String\n     * compaction is disabled, only one code path is taken.\n     *\n     * The instance field value is generally opaque to optimizing JIT\n     * compilers. Therefore, in performance-sensitive place, an explicit\n     * check of the static boolean {@code COMPACT_STRINGS} is done first\n     * before checking the {@code coder} field since the static boolean\n     * {@code COMPACT_STRINGS} would be constant folded away by an\n     * optimizing JIT compiler. The idioms for these cases are as follows.\n     *\n     * For code such as:\n     *\n     *    if (coder \u003d\u003d LATIN1) { ... }\n     *\n     * can be written more optimally as\n     *\n     *    if (coder() \u003d\u003d LATIN1) { ... }\n     *\n     * or:\n     *\n     *    if (COMPACT_STRINGS \u0026\u0026 coder \u003d\u003d LATIN1) { ... }\n     *\n     * An optimizing JIT compiler can fold the above conditional as:\n     *\n     *    COMPACT_STRINGS \u003d\u003d true  \u003d\u003e if (coder \u003d\u003d LATIN1) { ... }\n     *    COMPACT_STRINGS \u003d\u003d false \u003d\u003e if (false)           { ... }\n     *\n     * @implNote\n     * The actual value for this field is injected by JVM. The static\n     * initialization block is used to set the value here to communicate\n     * that this static final field is not statically foldable, and to\n     * avoid any possible circular dependency during vm initialization.\n     */\n    static final boolean COMPACT_STRINGS;\n\n    static {\n        COMPACT_STRINGS \u003d true;\n    }\n\n    /**\n     * Class String is special cased within the Serialization Stream Protocol.\n     *\n     * A String instance is written into an ObjectOutputStream according to\n     * \u003ca href\u003d\"{@docRoot}/../specs/serialization/protocol.html#stream-elements\"\u003e\n     * Object Serialization Specification, Section 6.2, \"Stream Elements\"\u003c/a\u003e\n     */\n    @java.io.Serial\n    private static final ObjectStreamField[] serialPersistentFields \u003d\n        new ObjectStreamField[0];\n\n    /**\n     * Initializes a newly created {@code String} object so that it represents\n     * an empty character sequence.  Note that use of this constructor is\n     * unnecessary since Strings are immutable.\n     */\n    public String() {\n        this.value \u003d \"\".value;\n        this.coder \u003d \"\".coder;\n    }\n\n    /**\n     * Initializes a newly created {@code String} object so that it represents\n     * the same sequence of characters as the argument; in other words, the\n     * newly created string is a copy of the argument string. Unless an\n     * explicit copy of {@code original} is needed, use of this constructor is\n     * unnecessary since Strings are immutable.\n     *\n     * @param  original\n     *         A {@code String}\n     */\n    @IntrinsicCandidate\n    public String(String original) {\n        this.value \u003d original.value;\n        this.coder \u003d original.coder;\n        this.hash \u003d original.hash;\n    }\n\n    /**\n     * Allocates a new {@code String} so that it represents the sequence of\n     * characters currently contained in the character array argument. The\n     * contents of the character array are copied; subsequent modification of\n     * the character array does not affect the newly created string.\n     *\n     * @param  value\n     *         The initial value of the string\n     */\n    public String(char value[]) {\n        this(value, 0, value.length, null);\n    }\n\n    /**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the character array argument. The {@code offset} argument is the\n     * index of the first character of the subarray and the {@code count}\n     * argument specifies the length of the subarray. The contents of the\n     * subarray are copied; subsequent modification of the character array does\n     * not affect the newly created string.\n     *\n     * @param  value\n     *         Array that is the source of characters\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code value.length - count}\n     */\n    public String(char value[], int offset, int count) {\n        this(value, offset, count, rangeCheck(value, offset, count));\n    }\n\n    private static Void rangeCheck(char[] value, int offset, int count) {\n        checkBoundsOffCount(offset, count, value.length);\n        return null;\n    }\n\n    /**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode code point\u003c/a\u003e array\n     * argument.  The {@code offset} argument is the index of the first code\n     * point of the subarray and the {@code count} argument specifies the\n     * length of the subarray.  The contents of the subarray are converted to\n     * {@code char}s; subsequent modification of the {@code int} array does not\n     * affect the newly created string.\n     *\n     * @param  codePoints\n     *         Array that is the source of Unicode code points\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IllegalArgumentException\n     *          If any invalid Unicode code point is found in {@code\n     *          codePoints}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code codePoints.length - count}\n     *\n     * @since  1.5\n     */\n    public String(int[] codePoints, int offset, int count) {\n        checkBoundsOffCount(offset, count, codePoints.length);\n        if (count \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS) {\n            byte[] val \u003d StringLatin1.toBytes(codePoints, offset, count);\n            if (val !\u003d null) {\n                this.coder \u003d LATIN1;\n                this.value \u003d val;\n                return;\n            }\n        }\n        this.coder \u003d UTF16;\n        this.value \u003d StringUTF16.toBytes(codePoints, offset, count);\n    }\n\n    /**\n     * Allocates a new {@code String} constructed from a subarray of an array\n     * of 8-bit integer values.\n     *\n     * \u003cp\u003e The {@code offset} argument is the index of the first byte of the\n     * subarray, and the {@code count} argument specifies the length of the\n     * subarray.\n     *\n     * \u003cp\u003e Each {@code byte} in the subarray is converted to a {@code char} as\n     * specified in the {@link #String(byte[],int) String(byte[],int)} constructor.\n     *\n     * @deprecated This method does not properly convert bytes into characters.\n     * As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@code String} constructors that take a {@link\n     * java.nio.charset.Charset}, charset name, or that use the platform\u0027s\n     * default charset.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @param  offset\n     *         The initial offset\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code ascii.length - count}\n     *\n     * @see  #String(byte[], int)\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public String(byte ascii[], int hibyte, int offset, int count) {\n        checkBoundsOffCount(offset, count, ascii.length);\n        if (count \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS \u0026\u0026 (byte)hibyte \u003d\u003d 0) {\n            this.value \u003d Arrays.copyOfRange(ascii, offset, offset + count);\n            this.coder \u003d LATIN1;\n        } else {\n            hibyte \u003c\u003c\u003d 8;\n            byte[] val \u003d StringUTF16.newBytesFor(count);\n            for (int i \u003d 0; i \u003c count; i++) {\n                StringUTF16.putChar(val, i, hibyte | (ascii[offset++] \u0026 0xff));\n            }\n            this.value \u003d val;\n            this.coder \u003d UTF16;\n        }\n    }\n\n    /**\n     * Allocates a new {@code String} containing characters constructed from\n     * an array of 8-bit integer values. Each character \u003ci\u003ec\u003c/i\u003e in the\n     * resulting string is constructed from the corresponding component\n     * \u003ci\u003eb\u003c/i\u003e in the byte array such that:\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     \u003cb\u003e\u003ci\u003ec\u003c/i\u003e\u003c/b\u003e \u003d\u003d (char)(((hibyte \u0026amp; 0xff) \u0026lt;\u0026lt; 8)\n     *                         | (\u003cb\u003e\u003ci\u003eb\u003c/i\u003e\u003c/b\u003e \u0026amp; 0xff))\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @deprecated  This method does not properly convert bytes into\n     * characters.  As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@code String} constructors that take a {@link\n     * java.nio.charset.Charset}, charset name, or that use the platform\u0027s\n     * default charset.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public String(byte ascii[], int hibyte) {\n        this(ascii, hibyte, 0, ascii.length);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified charset.  The length of the new {@code String}\n     * is a function of the charset, and hence may not be equal to the length\n     * of the subarray.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.1\n     */\n    public String(byte[] bytes, int offset, int length, String charsetName)\n            throws UnsupportedEncodingException {\n        this(bytes, offset, length, lookupCharset(charsetName));\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n     * The length of the new {@code String} is a function of the charset, and\n     * hence may not be equal to the length of the subarray.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement string.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset charset} to be used to\n     *         decode the {@code bytes}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.6\n     */\n    @SuppressWarnings(\"removal\")\n    public String(byte[] bytes, int offset, int length, Charset charset) {\n        Objects.requireNonNull(charset);\n        checkBoundsOffCount(offset, length, bytes.length);\n        if (length \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n        } else if (charset \u003d\u003d UTF_8.INSTANCE) {\n            if (COMPACT_STRINGS \u0026\u0026 !StringCoding.hasNegatives(bytes, offset, length)) {\n                this.value \u003d Arrays.copyOfRange(bytes, offset, offset + length);\n                this.coder \u003d LATIN1;\n            } else {\n                int sl \u003d offset + length;\n                int dp \u003d 0;\n                byte[] dst \u003d null;\n                if (COMPACT_STRINGS) {\n                    dst \u003d new byte[length];\n                    while (offset \u003c sl) {\n                        int b1 \u003d bytes[offset];\n                        if (b1 \u003e\u003d 0) {\n                            dst[dp++] \u003d (byte)b1;\n                            offset++;\n                            continue;\n                        }\n                        if ((b1 \u003d\u003d (byte)0xc2 || b1 \u003d\u003d (byte)0xc3) \u0026\u0026\n                                offset + 1 \u003c sl) {\n                            int b2 \u003d bytes[offset + 1];\n                            if (!isNotContinuation(b2)) {\n                                dst[dp++] \u003d (byte)decode2(b1, b2);\n                                offset +\u003d 2;\n                                continue;\n                            }\n                        }\n                        // anything not a latin1, including the repl\n                        // we have to go with the utf16\n                        break;\n                    }\n                    if (offset \u003d\u003d sl) {\n                        if (dp !\u003d dst.length) {\n                            dst \u003d Arrays.copyOf(dst, dp);\n                        }\n                        this.value \u003d dst;\n                        this.coder \u003d LATIN1;\n                        return;\n                    }\n                }\n                if (dp \u003d\u003d 0 || dst \u003d\u003d null) {\n                    dst \u003d new byte[length \u003c\u003c 1];\n                } else {\n                    byte[] buf \u003d new byte[length \u003c\u003c 1];\n                    StringLatin1.inflate(dst, 0, buf, 0, dp);\n                    dst \u003d buf;\n                }\n                dp \u003d decodeUTF8_UTF16(bytes, offset, sl, dst, dp, true);\n                if (dp !\u003d length) {\n                    dst \u003d Arrays.copyOf(dst, dp \u003c\u003c 1);\n                }\n                this.value \u003d dst;\n                this.coder \u003d UTF16;\n            }\n        } else if (charset \u003d\u003d ISO_8859_1.INSTANCE) {\n            if (COMPACT_STRINGS) {\n                this.value \u003d Arrays.copyOfRange(bytes, offset, offset + length);\n                this.coder \u003d LATIN1;\n            } else {\n                this.value \u003d StringLatin1.inflate(bytes, offset, length);\n                this.coder \u003d UTF16;\n            }\n        } else if (charset \u003d\u003d US_ASCII.INSTANCE) {\n            if (COMPACT_STRINGS \u0026\u0026 !StringCoding.hasNegatives(bytes, offset, length)) {\n                this.value \u003d Arrays.copyOfRange(bytes, offset, offset + length);\n                this.coder \u003d LATIN1;\n            } else {\n                byte[] dst \u003d new byte[length \u003c\u003c 1];\n                int dp \u003d 0;\n                while (dp \u003c length) {\n                    int b \u003d bytes[offset++];\n                    StringUTF16.putChar(dst, dp++, (b \u003e\u003d 0) ? (char) b : REPL);\n                }\n                this.value \u003d dst;\n                this.coder \u003d UTF16;\n            }\n        } else {\n            // (1)We never cache the \"external\" cs, the only benefit of creating\n            // an additional StringDe/Encoder object to wrap it is to share the\n            // de/encode() method. These SD/E objects are short-lived, the young-gen\n            // gc should be able to take care of them well. But the best approach\n            // is still not to generate them if not really necessary.\n            // (2)The defensive copy of the input byte/char[] has a big performance\n            // impact, as well as the outgoing result byte/char[]. Need to do the\n            // optimization check of (sm\u003d\u003dnull \u0026\u0026 classLoader0\u003d\u003dnull) for both.\n            CharsetDecoder cd \u003d charset.newDecoder();\n            // ArrayDecoder fastpaths\n            if (cd instanceof ArrayDecoder ad) {\n                // ascii\n                if (ad.isASCIICompatible() \u0026\u0026 !StringCoding.hasNegatives(bytes, offset, length)) {\n                    if (COMPACT_STRINGS) {\n                        this.value \u003d Arrays.copyOfRange(bytes, offset, offset + length);\n                        this.coder \u003d LATIN1;\n                        return;\n                    }\n                    this.value \u003d StringLatin1.inflate(bytes, offset, length);\n                    this.coder \u003d UTF16;\n                    return;\n                }\n\n                // fastpath for always Latin1 decodable single byte\n                if (COMPACT_STRINGS \u0026\u0026 ad.isLatin1Decodable()) {\n                    byte[] dst \u003d new byte[length];\n                    ad.decodeToLatin1(bytes, offset, length, dst);\n                    this.value \u003d dst;\n                    this.coder \u003d LATIN1;\n                    return;\n                }\n\n                int en \u003d scale(length, cd.maxCharsPerByte());\n                cd.onMalformedInput(CodingErrorAction.REPLACE)\n                        .onUnmappableCharacter(CodingErrorAction.REPLACE);\n                char[] ca \u003d new char[en];\n                int clen \u003d ad.decode(bytes, offset, length, ca);\n                if (COMPACT_STRINGS) {\n                    byte[] bs \u003d StringUTF16.compress(ca, 0, clen);\n                    if (bs !\u003d null) {\n                        value \u003d bs;\n                        coder \u003d LATIN1;\n                        return;\n                    }\n                }\n                coder \u003d UTF16;\n                value \u003d StringUTF16.toBytes(ca, 0, clen);\n                return;\n            }\n\n            // decode using CharsetDecoder\n            int en \u003d scale(length, cd.maxCharsPerByte());\n            char[] ca \u003d new char[en];\n            if (charset.getClass().getClassLoader0() !\u003d null \u0026\u0026\n                    System.getSecurityManager() !\u003d null) {\n                bytes \u003d Arrays.copyOfRange(bytes, offset, offset + length);\n                offset \u003d 0;\n            }\n\n            int caLen \u003d decodeWithDecoder(cd, ca, bytes, offset, length);\n            if (COMPACT_STRINGS) {\n                byte[] bs \u003d StringUTF16.compress(ca, 0, caLen);\n                if (bs !\u003d null) {\n                    value \u003d bs;\n                    coder \u003d LATIN1;\n                    return;\n                }\n            }\n            coder \u003d UTF16;\n            value \u003d StringUTF16.toBytes(ca, 0, caLen);\n        }\n    }\n\n    /*\n     * Throws iae, instead of replacing, if malformed or unmappable.\n     */\n    static String newStringUTF8NoRepl(byte[] bytes, int offset, int length) {\n        checkBoundsOffCount(offset, length, bytes.length);\n        if (length \u003d\u003d 0) {\n            return \"\";\n        }\n        if (COMPACT_STRINGS \u0026\u0026 !StringCoding.hasNegatives(bytes, offset, length)) {\n            return new String(Arrays.copyOfRange(bytes, offset, offset + length), LATIN1);\n        } else {\n            int sl \u003d offset + length;\n            int dp \u003d 0;\n            byte[] dst \u003d null;\n            if (COMPACT_STRINGS) {\n                dst \u003d new byte[length];\n                while (offset \u003c sl) {\n                    int b1 \u003d bytes[offset];\n                    if (b1 \u003e\u003d 0) {\n                        dst[dp++] \u003d (byte) b1;\n                        offset++;\n                        continue;\n                    }\n                    if ((b1 \u003d\u003d (byte) 0xc2 || b1 \u003d\u003d (byte) 0xc3) \u0026\u0026\n                            offset + 1 \u003c sl) {\n                        int b2 \u003d bytes[offset + 1];\n                        if (!isNotContinuation(b2)) {\n                            dst[dp++] \u003d (byte) decode2(b1, b2);\n                            offset +\u003d 2;\n                            continue;\n                        }\n                    }\n                    // anything not a latin1, including the REPL\n                    // we have to go with the utf16\n                    break;\n                }\n                if (offset \u003d\u003d sl) {\n                    if (dp !\u003d dst.length) {\n                        dst \u003d Arrays.copyOf(dst, dp);\n                    }\n                    return new String(dst, LATIN1);\n                }\n            }\n            if (dp \u003d\u003d 0 || dst \u003d\u003d null) {\n                dst \u003d new byte[length \u003c\u003c 1];\n            } else {\n                byte[] buf \u003d new byte[length \u003c\u003c 1];\n                StringLatin1.inflate(dst, 0, buf, 0, dp);\n                dst \u003d buf;\n            }\n            dp \u003d decodeUTF8_UTF16(bytes, offset, sl, dst, dp, false);\n            if (dp !\u003d length) {\n                dst \u003d Arrays.copyOf(dst, dp \u003c\u003c 1);\n            }\n            return new String(dst, UTF16);\n        }\n    }\n\n    static String newStringNoRepl(byte[] src, Charset cs) throws CharacterCodingException {\n        try {\n            return newStringNoRepl1(src, cs);\n        } catch (IllegalArgumentException e) {\n            //newStringNoRepl1 throws IAE with MalformedInputException or CCE as the cause\n            Throwable cause \u003d e.getCause();\n            if (cause instanceof MalformedInputException mie) {\n                throw mie;\n            }\n            throw (CharacterCodingException)cause;\n        }\n    }\n\n    @SuppressWarnings(\"removal\")\n    private static String newStringNoRepl1(byte[] src, Charset cs) {\n        int len \u003d src.length;\n        if (len \u003d\u003d 0) {\n            return \"\";\n        }\n        if (cs \u003d\u003d UTF_8.INSTANCE) {\n            return newStringUTF8NoRepl(src, 0, src.length);\n        }\n        if (cs \u003d\u003d ISO_8859_1.INSTANCE) {\n            if (COMPACT_STRINGS)\n                return new String(src, LATIN1);\n            return new String(StringLatin1.inflate(src, 0, src.length), UTF16);\n        }\n        if (cs \u003d\u003d US_ASCII.INSTANCE) {\n            if (!StringCoding.hasNegatives(src, 0, src.length)) {\n                if (COMPACT_STRINGS)\n                    return new String(src, LATIN1);\n                return new String(StringLatin1.inflate(src, 0, src.length), UTF16);\n            } else {\n                throwMalformed(src);\n            }\n        }\n\n        CharsetDecoder cd \u003d cs.newDecoder();\n        // ascii fastpath\n        if (cd instanceof ArrayDecoder ad \u0026\u0026\n                ad.isASCIICompatible() \u0026\u0026\n                !StringCoding.hasNegatives(src, 0, src.length)) {\n            return new String(src, 0, src.length, ISO_8859_1.INSTANCE);\n        }\n        int en \u003d scale(len, cd.maxCharsPerByte());\n        char[] ca \u003d new char[en];\n        if (cs.getClass().getClassLoader0() !\u003d null \u0026\u0026\n                System.getSecurityManager() !\u003d null) {\n            src \u003d Arrays.copyOf(src, len);\n        }\n        int caLen \u003d decodeWithDecoder(cd, ca, src, 0, src.length);\n        if (COMPACT_STRINGS) {\n            byte[] bs \u003d StringUTF16.compress(ca, 0, caLen);\n            if (bs !\u003d null) {\n                return new String(bs, LATIN1);\n            }\n        }\n        return new String(StringUTF16.toBytes(ca, 0, caLen), UTF16);\n    }\n\n    private static final char REPL \u003d \u0027\\ufffd\u0027;\n\n    // Trim the given byte array to the given length\n    @SuppressWarnings(\"removal\")\n    private static byte[] safeTrim(byte[] ba, int len, boolean isTrusted) {\n        if (len \u003d\u003d ba.length \u0026\u0026 (isTrusted || System.getSecurityManager() \u003d\u003d null)) {\n            return ba;\n        } else {\n            return Arrays.copyOf(ba, len);\n        }\n    }\n\n    private static int scale(int len, float expansionFactor) {\n        // We need to perform double, not float, arithmetic; otherwise\n        // we lose low order bits when len is larger than 2**24.\n        return (int)(len * (double)expansionFactor);\n    }\n\n    private static Charset lookupCharset(String csn) throws UnsupportedEncodingException {\n        Objects.requireNonNull(csn);\n        try {\n            return Charset.forName(csn);\n        } catch (UnsupportedCharsetException | IllegalCharsetNameException x) {\n            throw new UnsupportedEncodingException(csn);\n        }\n    }\n\n    private static byte[] encode(Charset cs, byte coder, byte[] val) {\n        if (cs \u003d\u003d UTF_8.INSTANCE) {\n            return encodeUTF8(coder, val, true);\n        }\n        if (cs \u003d\u003d ISO_8859_1.INSTANCE) {\n            return encode8859_1(coder, val);\n        }\n        if (cs \u003d\u003d US_ASCII.INSTANCE) {\n            return encodeASCII(coder, val);\n        }\n        return encodeWithEncoder(cs, coder, val, true);\n    }\n\n    private static byte[] encodeWithEncoder(Charset cs, byte coder, byte[] val, boolean doReplace) {\n        CharsetEncoder ce \u003d cs.newEncoder();\n        int len \u003d val.length \u003e\u003e coder;  // assume LATIN1\u003d0/UTF16\u003d1;\n        int en \u003d scale(len, ce.maxBytesPerChar());\n        if (ce instanceof ArrayEncoder ae) {\n            // fastpath for ascii compatible\n            if (coder \u003d\u003d LATIN1 \u0026\u0026\n                    ae.isASCIICompatible() \u0026\u0026\n                    !StringCoding.hasNegatives(val, 0, val.length)) {\n                return Arrays.copyOf(val, val.length);\n            }\n            byte[] ba \u003d new byte[en];\n            if (len \u003d\u003d 0) {\n                return ba;\n            }\n            if (doReplace) {\n                ce.onMalformedInput(CodingErrorAction.REPLACE)\n                        .onUnmappableCharacter(CodingErrorAction.REPLACE);\n            }\n\n            int blen \u003d (coder \u003d\u003d LATIN1) ? ae.encodeFromLatin1(val, 0, len, ba)\n                    : ae.encodeFromUTF16(val, 0, len, ba);\n            if (blen !\u003d -1) {\n                return safeTrim(ba, blen, true);\n            }\n        }\n\n        byte[] ba \u003d new byte[en];\n        if (len \u003d\u003d 0) {\n            return ba;\n        }\n        if (doReplace) {\n            ce.onMalformedInput(CodingErrorAction.REPLACE)\n                    .onUnmappableCharacter(CodingErrorAction.REPLACE);\n        }\n        char[] ca \u003d (coder \u003d\u003d LATIN1 ) ? StringLatin1.toChars(val)\n                : StringUTF16.toChars(val);\n        ByteBuffer bb \u003d ByteBuffer.wrap(ba);\n        CharBuffer cb \u003d CharBuffer.wrap(ca, 0, len);\n        try {\n            CoderResult cr \u003d ce.encode(cb, bb, true);\n            if (!cr.isUnderflow())\n                cr.throwException();\n            cr \u003d ce.flush(bb);\n            if (!cr.isUnderflow())\n                cr.throwException();\n        } catch (CharacterCodingException x) {\n            if (!doReplace) {\n                throw new IllegalArgumentException(x);\n            } else {\n                throw new Error(x);\n            }\n        }\n        return safeTrim(ba, bb.position(), cs.getClass().getClassLoader0() \u003d\u003d null);\n    }\n\n    /*\n     * Throws iae, instead of replacing, if unmappable.\n     */\n    static byte[] getBytesUTF8NoRepl(String s) {\n        return encodeUTF8(s.coder(), s.value(), false);\n    }\n\n    private static boolean isASCII(byte[] src) {\n        return !StringCoding.hasNegatives(src, 0, src.length);\n    }\n\n    /*\n     * Throws CCE, instead of replacing, if unmappable.\n     */\n    static byte[] getBytesNoRepl(String s, Charset cs) throws CharacterCodingException {\n        try {\n            return getBytesNoRepl1(s, cs);\n        } catch (IllegalArgumentException e) {\n            //getBytesNoRepl1 throws IAE with UnmappableCharacterException or CCE as the cause\n            Throwable cause \u003d e.getCause();\n            if (cause instanceof UnmappableCharacterException) {\n                throw (UnmappableCharacterException)cause;\n            }\n            throw (CharacterCodingException)cause;\n        }\n    }\n\n    private static byte[] getBytesNoRepl1(String s, Charset cs) {\n        byte[] val \u003d s.value();\n        byte coder \u003d s.coder();\n        if (cs \u003d\u003d UTF_8.INSTANCE) {\n            if (coder \u003d\u003d LATIN1 \u0026\u0026 isASCII(val)) {\n                return val;\n            }\n            return encodeUTF8(coder, val, false);\n        }\n        if (cs \u003d\u003d ISO_8859_1.INSTANCE) {\n            if (coder \u003d\u003d LATIN1) {\n                return val;\n            }\n            return encode8859_1(coder, val, false);\n        }\n        if (cs \u003d\u003d US_ASCII.INSTANCE) {\n            if (coder \u003d\u003d LATIN1) {\n                if (isASCII(val)) {\n                    return val;\n                } else {\n                    throwUnmappable(val);\n                }\n            }\n        }\n        return encodeWithEncoder(cs, coder, val, false);\n    }\n\n    private static byte[] encodeASCII(byte coder, byte[] val) {\n        if (coder \u003d\u003d LATIN1) {\n            byte[] dst \u003d Arrays.copyOf(val, val.length);\n            for (int i \u003d 0; i \u003c dst.length; i++) {\n                if (dst[i] \u003c 0) {\n                    dst[i] \u003d \u0027?\u0027;\n                }\n            }\n            return dst;\n        }\n        int len \u003d val.length \u003e\u003e 1;\n        byte[] dst \u003d new byte[len];\n        int dp \u003d 0;\n        for (int i \u003d 0; i \u003c len; i++) {\n            char c \u003d StringUTF16.getChar(val, i);\n            if (c \u003c 0x80) {\n                dst[dp++] \u003d (byte)c;\n                continue;\n            }\n            if (Character.isHighSurrogate(c) \u0026\u0026 i + 1 \u003c len \u0026\u0026\n                    Character.isLowSurrogate(StringUTF16.getChar(val, i + 1))) {\n                i++;\n            }\n            dst[dp++] \u003d \u0027?\u0027;\n        }\n        if (len \u003d\u003d dp) {\n            return dst;\n        }\n        return Arrays.copyOf(dst, dp);\n    }\n\n    private static byte[] encode8859_1(byte coder, byte[] val) {\n        return encode8859_1(coder, val, true);\n    }\n\n    private static byte[] encode8859_1(byte coder, byte[] val, boolean doReplace) {\n        if (coder \u003d\u003d LATIN1) {\n            return Arrays.copyOf(val, val.length);\n        }\n        int len \u003d val.length \u003e\u003e 1;\n        byte[] dst \u003d new byte[len];\n        int dp \u003d 0;\n        int sp \u003d 0;\n        int sl \u003d len;\n        while (sp \u003c sl) {\n            int ret \u003d StringCoding.implEncodeISOArray(val, sp, dst, dp, len);\n            sp \u003d sp + ret;\n            dp \u003d dp + ret;\n            if (ret !\u003d len) {\n                if (!doReplace) {\n                    throwUnmappable(sp);\n                }\n                char c \u003d StringUTF16.getChar(val, sp++);\n                if (Character.isHighSurrogate(c) \u0026\u0026 sp \u003c sl \u0026\u0026\n                        Character.isLowSurrogate(StringUTF16.getChar(val, sp))) {\n                    sp++;\n                }\n                dst[dp++] \u003d \u0027?\u0027;\n                len \u003d sl - sp;\n            }\n        }\n        if (dp \u003d\u003d dst.length) {\n            return dst;\n        }\n        return Arrays.copyOf(dst, dp);\n    }\n\n    //////////////////////////////// utf8 ////////////////////////////////////\n\n    /**\n     * Decodes ASCII from the source byte array into the destination\n     * char array. Used via JavaLangAccess from UTF_8 and other charset\n     * decoders.\n     *\n     * @return the number of bytes successfully decoded, at most len\n     */\n    /* package-private */\n    static int decodeASCII(byte[] sa, int sp, char[] da, int dp, int len) {\n        if (!StringCoding.hasNegatives(sa, sp, len)) {\n            StringLatin1.inflate(sa, sp, da, dp, len);\n            return len;\n        } else {\n            int start \u003d sp;\n            int end \u003d sp + len;\n            while (sp \u003c end \u0026\u0026 sa[sp] \u003e\u003d 0) {\n                da[dp++] \u003d (char) sa[sp++];\n            }\n            return sp - start;\n        }\n    }\n\n    private static boolean isNotContinuation(int b) {\n        return (b \u0026 0xc0) !\u003d 0x80;\n    }\n\n    private static boolean isMalformed3(int b1, int b2, int b3) {\n        return (b1 \u003d\u003d (byte)0xe0 \u0026\u0026 (b2 \u0026 0xe0) \u003d\u003d 0x80) ||\n                (b2 \u0026 0xc0) !\u003d 0x80 || (b3 \u0026 0xc0) !\u003d 0x80;\n    }\n\n    private static boolean isMalformed3_2(int b1, int b2) {\n        return (b1 \u003d\u003d (byte)0xe0 \u0026\u0026 (b2 \u0026 0xe0) \u003d\u003d 0x80) ||\n                (b2 \u0026 0xc0) !\u003d 0x80;\n    }\n\n    private static boolean isMalformed4(int b2, int b3, int b4) {\n        return (b2 \u0026 0xc0) !\u003d 0x80 || (b3 \u0026 0xc0) !\u003d 0x80 ||\n                (b4 \u0026 0xc0) !\u003d 0x80;\n    }\n\n    private static boolean isMalformed4_2(int b1, int b2) {\n        return (b1 \u003d\u003d 0xf0 \u0026\u0026 (b2 \u003c 0x90 || b2 \u003e 0xbf)) ||\n                (b1 \u003d\u003d 0xf4 \u0026\u0026 (b2 \u0026 0xf0) !\u003d 0x80) ||\n                (b2 \u0026 0xc0) !\u003d 0x80;\n    }\n\n    private static boolean isMalformed4_3(int b3) {\n        return (b3 \u0026 0xc0) !\u003d 0x80;\n    }\n\n    private static char decode2(int b1, int b2) {\n        return (char)(((b1 \u003c\u003c 6) ^ b2) ^\n                (((byte) 0xC0 \u003c\u003c 6) ^\n                        ((byte) 0x80 \u003c\u003c 0)));\n    }\n\n    private static char decode3(int b1, int b2, int b3) {\n        return (char)((b1 \u003c\u003c 12) ^\n                (b2 \u003c\u003c  6) ^\n                (b3 ^\n                        (((byte) 0xE0 \u003c\u003c 12) ^\n                                ((byte) 0x80 \u003c\u003c  6) ^\n                                ((byte) 0x80 \u003c\u003c  0))));\n    }\n\n    private static int decode4(int b1, int b2, int b3, int b4) {\n        return ((b1 \u003c\u003c 18) ^\n                (b2 \u003c\u003c 12) ^\n                (b3 \u003c\u003c  6) ^\n                (b4 ^\n                        (((byte) 0xF0 \u003c\u003c 18) ^\n                                ((byte) 0x80 \u003c\u003c 12) ^\n                                ((byte) 0x80 \u003c\u003c  6) ^\n                                ((byte) 0x80 \u003c\u003c  0))));\n    }\n\n    private static int decodeUTF8_UTF16(byte[] src, int sp, int sl, byte[] dst, int dp, boolean doReplace) {\n        while (sp \u003c sl) {\n            int b1 \u003d src[sp++];\n            if (b1 \u003e\u003d 0) {\n                StringUTF16.putChar(dst, dp++, (char) b1);\n            } else if ((b1 \u003e\u003e 5) \u003d\u003d -2 \u0026\u0026 (b1 \u0026 0x1e) !\u003d 0) {\n                if (sp \u003c sl) {\n                    int b2 \u003d src[sp++];\n                    if (isNotContinuation(b2)) {\n                        if (!doReplace) {\n                            throwMalformed(sp - 1, 1);\n                        }\n                        StringUTF16.putChar(dst, dp++, REPL);\n                        sp--;\n                    } else {\n                        StringUTF16.putChar(dst, dp++, decode2(b1, b2));\n                    }\n                    continue;\n                }\n                if (!doReplace) {\n                    throwMalformed(sp, 1);  // underflow()\n                }\n                StringUTF16.putChar(dst, dp++, REPL);\n                break;\n            } else if ((b1 \u003e\u003e 4) \u003d\u003d -2) {\n                if (sp + 1 \u003c sl) {\n                    int b2 \u003d src[sp++];\n                    int b3 \u003d src[sp++];\n                    if (isMalformed3(b1, b2, b3)) {\n                        if (!doReplace) {\n                            throwMalformed(sp - 3, 3);\n                        }\n                        StringUTF16.putChar(dst, dp++, REPL);\n                        sp -\u003d 3;\n                        sp +\u003d malformed3(src, sp);\n                    } else {\n                        char c \u003d decode3(b1, b2, b3);\n                        if (Character.isSurrogate(c)) {\n                            if (!doReplace) {\n                                throwMalformed(sp - 3, 3);\n                            }\n                            StringUTF16.putChar(dst, dp++, REPL);\n                        } else {\n                            StringUTF16.putChar(dst, dp++, c);\n                        }\n                    }\n                    continue;\n                }\n                if (sp \u003c sl \u0026\u0026 isMalformed3_2(b1, src[sp])) {\n                    if (!doReplace) {\n                        throwMalformed(sp - 1, 2);\n                    }\n                    StringUTF16.putChar(dst, dp++, REPL);\n                    continue;\n                }\n                if (!doReplace) {\n                    throwMalformed(sp, 1);\n                }\n                StringUTF16.putChar(dst, dp++, REPL);\n                break;\n            } else if ((b1 \u003e\u003e 3) \u003d\u003d -2) {\n                if (sp + 2 \u003c sl) {\n                    int b2 \u003d src[sp++];\n                    int b3 \u003d src[sp++];\n                    int b4 \u003d src[sp++];\n                    int uc \u003d decode4(b1, b2, b3, b4);\n                    if (isMalformed4(b2, b3, b4) ||\n                            !Character.isSupplementaryCodePoint(uc)) { // shortest form check\n                        if (!doReplace) {\n                            throwMalformed(sp - 4, 4);\n                        }\n                        StringUTF16.putChar(dst, dp++, REPL);\n                        sp -\u003d 4;\n                        sp +\u003d malformed4(src, sp);\n                    } else {\n                        StringUTF16.putChar(dst, dp++, Character.highSurrogate(uc));\n                        StringUTF16.putChar(dst, dp++, Character.lowSurrogate(uc));\n                    }\n                    continue;\n                }\n                b1 \u0026\u003d 0xff;\n                if (b1 \u003e 0xf4 || sp \u003c sl \u0026\u0026 isMalformed4_2(b1, src[sp] \u0026 0xff)) {\n                    if (!doReplace) {\n                        throwMalformed(sp - 1, 1);  // or 2\n                    }\n                    StringUTF16.putChar(dst, dp++, REPL);\n                    continue;\n                }\n                if (!doReplace) {\n                    throwMalformed(sp - 1, 1);\n                }\n                sp++;\n                StringUTF16.putChar(dst, dp++, REPL);\n                if (sp \u003c sl \u0026\u0026 isMalformed4_3(src[sp])) {\n                    continue;\n                }\n                break;\n            } else {\n                if (!doReplace) {\n                    throwMalformed(sp - 1, 1);\n                }\n                StringUTF16.putChar(dst, dp++, REPL);\n            }\n        }\n        return dp;\n    }\n\n    private static int decodeWithDecoder(CharsetDecoder cd, char[] dst, byte[] src, int offset, int length) {\n        ByteBuffer bb \u003d ByteBuffer.wrap(src, offset, length);\n        CharBuffer cb \u003d CharBuffer.wrap(dst, 0, dst.length);\n        cd.onMalformedInput(CodingErrorAction.REPLACE)\n                .onUnmappableCharacter(CodingErrorAction.REPLACE);\n        try {\n            CoderResult cr \u003d cd.decode(bb, cb, true);\n            if (!cr.isUnderflow())\n                cr.throwException();\n            cr \u003d cd.flush(cb);\n            if (!cr.isUnderflow())\n                cr.throwException();\n        } catch (CharacterCodingException x) {\n            // Substitution is always enabled,\n            // so this shouldn\u0027t happen\n            throw new Error(x);\n        }\n        return cb.position();\n    }\n\n    private static int malformed3(byte[] src, int sp) {\n        int b1 \u003d src[sp++];\n        int b2 \u003d src[sp];    // no need to lookup b3\n        return ((b1 \u003d\u003d (byte)0xe0 \u0026\u0026 (b2 \u0026 0xe0) \u003d\u003d 0x80) ||\n                isNotContinuation(b2)) ? 1 : 2;\n    }\n\n    private static int malformed4(byte[] src, int sp) {\n        // we don\u0027t care the speed here\n        int b1 \u003d src[sp++] \u0026 0xff;\n        int b2 \u003d src[sp++] \u0026 0xff;\n        if (b1 \u003e 0xf4 ||\n                (b1 \u003d\u003d 0xf0 \u0026\u0026 (b2 \u003c 0x90 || b2 \u003e 0xbf)) ||\n                (b1 \u003d\u003d 0xf4 \u0026\u0026 (b2 \u0026 0xf0) !\u003d 0x80) ||\n                isNotContinuation(b2))\n            return 1;\n        if (isNotContinuation(src[sp]))\n            return 2;\n        return 3;\n    }\n\n    private static void throwMalformed(int off, int nb) {\n        String msg \u003d \"malformed input off : \" + off + \", length : \" + nb;\n        throw new IllegalArgumentException(msg, new MalformedInputException(nb));\n    }\n\n    private static void throwMalformed(byte[] val) {\n        int dp \u003d 0;\n        while (dp \u003c val.length \u0026\u0026 val[dp] \u003e\u003d0) { dp++; }\n        throwMalformed(dp, 1);\n    }\n\n    private static void throwUnmappable(int off) {\n        String msg \u003d \"malformed input off : \" + off + \", length : 1\";\n        throw new IllegalArgumentException(msg, new UnmappableCharacterException(1));\n    }\n\n    private static void throwUnmappable(byte[] val) {\n        int dp \u003d 0;\n        while (dp \u003c val.length \u0026\u0026 val[dp] \u003e\u003d0) { dp++; }\n        throwUnmappable(dp);\n    }\n\n    private static byte[] encodeUTF8(byte coder, byte[] val, boolean doReplace) {\n        if (coder \u003d\u003d UTF16)\n            return encodeUTF8_UTF16(val, doReplace);\n\n        if (!StringCoding.hasNegatives(val, 0, val.length))\n            return Arrays.copyOf(val, val.length);\n\n        int dp \u003d 0;\n        byte[] dst \u003d new byte[val.length \u003c\u003c 1];\n        for (byte c : val) {\n            if (c \u003c 0) {\n                dst[dp++] \u003d (byte) (0xc0 | ((c \u0026 0xff) \u003e\u003e 6));\n                dst[dp++] \u003d (byte) (0x80 | (c \u0026 0x3f));\n            } else {\n                dst[dp++] \u003d c;\n            }\n        }\n        if (dp \u003d\u003d dst.length)\n            return dst;\n        return Arrays.copyOf(dst, dp);\n    }\n\n    private static byte[] encodeUTF8_UTF16(byte[] val, boolean doReplace) {\n        int dp \u003d 0;\n        int sp \u003d 0;\n        int sl \u003d val.length \u003e\u003e 1;\n        byte[] dst \u003d new byte[sl * 3];\n        while (sp \u003c sl) {\n            // ascii fast loop;\n            char c \u003d StringUTF16.getChar(val, sp);\n            if (c \u003e\u003d \u0027\\u0080\u0027) {\n                break;\n            }\n            dst[dp++] \u003d (byte)c;\n            sp++;\n        }\n        while (sp \u003c sl) {\n            char c \u003d StringUTF16.getChar(val, sp++);\n            if (c \u003c 0x80) {\n                dst[dp++] \u003d (byte)c;\n            } else if (c \u003c 0x800) {\n                dst[dp++] \u003d (byte)(0xc0 | (c \u003e\u003e 6));\n                dst[dp++] \u003d (byte)(0x80 | (c \u0026 0x3f));\n            } else if (Character.isSurrogate(c)) {\n                int uc \u003d -1;\n                char c2;\n                if (Character.isHighSurrogate(c) \u0026\u0026 sp \u003c sl \u0026\u0026\n                        Character.isLowSurrogate(c2 \u003d StringUTF16.getChar(val, sp))) {\n                    uc \u003d Character.toCodePoint(c, c2);\n                }\n                if (uc \u003c 0) {\n                    if (doReplace) {\n                        dst[dp++] \u003d \u0027?\u0027;\n                    } else {\n                        throwUnmappable(sp - 1);\n                    }\n                } else {\n                    dst[dp++] \u003d (byte)(0xf0 | ((uc \u003e\u003e 18)));\n                    dst[dp++] \u003d (byte)(0x80 | ((uc \u003e\u003e 12) \u0026 0x3f));\n                    dst[dp++] \u003d (byte)(0x80 | ((uc \u003e\u003e  6) \u0026 0x3f));\n                    dst[dp++] \u003d (byte)(0x80 | (uc \u0026 0x3f));\n                    sp++;  // 2 chars\n                }\n            } else {\n                // 3 bytes, 16 bits\n                dst[dp++] \u003d (byte)(0xe0 | ((c \u003e\u003e 12)));\n                dst[dp++] \u003d (byte)(0x80 | ((c \u003e\u003e  6) \u0026 0x3f));\n                dst[dp++] \u003d (byte)(0x80 | (c \u0026 0x3f));\n            }\n        }\n        if (dp \u003d\u003d dst.length) {\n            return dst;\n        }\n        return Arrays.copyOf(dst, dp);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of bytes\n     * using the specified {@linkplain java.nio.charset.Charset charset}.  The\n     * length of the new {@code String} is a function of the charset, and hence\n     * may not be equal to the length of the byte array.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.1\n     */\n    public String(byte bytes[], String charsetName)\n            throws UnsupportedEncodingException {\n        this(bytes, 0, bytes.length, charsetName);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of\n     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n     * The length of the new {@code String} is a function of the charset, and\n     * hence may not be equal to the length of the byte array.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement string.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset charset} to be used to\n     *         decode the {@code bytes}\n     *\n     * @since  1.6\n     */\n    public String(byte bytes[], Charset charset) {\n        this(bytes, 0, bytes.length, charset);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the platform\u0027s default charset.  The length of the new\n     * {@code String} is a function of the charset, and hence may not be equal\n     * to the length of the subarray.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.1\n     */\n    public String(byte[] bytes, int offset, int length) {\n        this(bytes, offset, length, Charset.defaultCharset());\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of bytes\n     * using the platform\u0027s default charset.  The length of the new {@code\n     * String} is a function of the charset, and hence may not be equal to the\n     * length of the byte array.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @since  1.1\n     */\n    public String(byte[] bytes) {\n        this(bytes, 0, bytes.length);\n    }\n\n    /**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string buffer argument. The contents of the\n     * string buffer are copied; subsequent modification of the string buffer\n     * does not affect the newly created string.\n     *\n     * @param  buffer\n     *         A {@code StringBuffer}\n     */\n    public String(StringBuffer buffer) {\n        this(buffer.toString());\n    }\n\n    /**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string builder argument. The contents of the\n     * string builder are copied; subsequent modification of the string builder\n     * does not affect the newly created string.\n     *\n     * \u003cp\u003e This constructor is provided to ease migration to {@code\n     * StringBuilder}. Obtaining a string from a string builder via the {@code\n     * toString} method is likely to run faster and is generally preferred.\n     *\n     * @param   builder\n     *          A {@code StringBuilder}\n     *\n     * @since  1.5\n     */\n    public String(StringBuilder builder) {\n        this(builder, null);\n    }\n\n    /**\n     * Returns the length of this string.\n     * The length is equal to the number of \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode\n     * code units\u003c/a\u003e in the string.\n     *\n     * @return  the length of the sequence of characters represented by this\n     *          object.\n     */\n    public int length() {\n        return value.length \u003e\u003e coder();\n    }\n\n    /**\n     * Returns {@code true} if, and only if, {@link #length()} is {@code 0}.\n     *\n     * @return {@code true} if {@link #length()} is {@code 0}, otherwise\n     * {@code false}\n     *\n     * @since 1.6\n     */\n    @Override\n    public boolean isEmpty() {\n        return value.length \u003d\u003d 0;\n    }\n\n    /**\n     * Returns the {@code char} value at the\n     * specified index. An index ranges from {@code 0} to\n     * {@code length() - 1}. The first {@code char} value of the sequence\n     * is at index {@code 0}, the next at index {@code 1},\n     * and so on, as for array indexing.\n     *\n     * \u003cp\u003eIf the {@code char} value specified by the index is a\n     * \u003ca href\u003d\"Character.html#unicode\"\u003esurrogate\u003c/a\u003e, the surrogate\n     * value is returned.\n     *\n     * @param      index   the index of the {@code char} value.\n     * @return     the {@code char} value at the specified index of this string.\n     *             The first {@code char} value is at index {@code 0}.\n     * @throws     IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     */\n    public char charAt(int index) {\n        if (isLatin1()) {\n            return StringLatin1.charAt(value, index);\n        } else {\n            return StringUTF16.charAt(value, index);\n        }\n    }\n\n    /**\n     * Returns the character (Unicode code point) at the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 0} to\n     * {@link #length()}{@code  - 1}.\n     *\n     * \u003cp\u003e If the {@code char} value specified at the given index\n     * is in the high-surrogate range, the following index is less\n     * than the length of this {@code String}, and the\n     * {@code char} value at the following index is in the\n     * low-surrogate range, then the supplementary code point\n     * corresponding to this surrogate pair is returned. Otherwise,\n     * the {@code char} value at the given index is returned.\n     *\n     * @param      index the index to the {@code char} values\n     * @return     the code point value of the character at the\n     *             {@code index}\n     * @throws     IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     * @since      1.5\n     */\n    public int codePointAt(int index) {\n        if (isLatin1()) {\n            checkIndex(index, value.length);\n            return value[index] \u0026 0xff;\n        }\n        int length \u003d value.length \u003e\u003e 1;\n        checkIndex(index, length);\n        return StringUTF16.codePointAt(value, index, length);\n    }\n\n    /**\n     * Returns the character (Unicode code point) before the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 1} to {@link\n     * CharSequence#length() length}.\n     *\n     * \u003cp\u003e If the {@code char} value at {@code (index - 1)}\n     * is in the low-surrogate range, {@code (index - 2)} is not\n     * negative, and the {@code char} value at {@code (index -\n     * 2)} is in the high-surrogate range, then the\n     * supplementary code point value of the surrogate pair is\n     * returned. If the {@code char} value at {@code index -\n     * 1} is an unpaired low-surrogate or a high-surrogate, the\n     * surrogate value is returned.\n     *\n     * @param     index the index following the code point that should be returned\n     * @return    the Unicode code point value before the given index.\n     * @throws    IndexOutOfBoundsException if the {@code index}\n     *            argument is less than 1 or greater than the length\n     *            of this string.\n     * @since     1.5\n     */\n    public int codePointBefore(int index) {\n        int i \u003d index - 1;\n        if (i \u003c 0 || i \u003e\u003d length()) {\n            throw new StringIndexOutOfBoundsException(index);\n        }\n        if (isLatin1()) {\n            return (value[i] \u0026 0xff);\n        }\n        return StringUTF16.codePointBefore(value, index);\n    }\n\n    /**\n     * Returns the number of Unicode code points in the specified text\n     * range of this {@code String}. The text range begins at the\n     * specified {@code beginIndex} and extends to the\n     * {@code char} at index {@code endIndex - 1}. Thus the\n     * length (in {@code char}s) of the text range is\n     * {@code endIndex-beginIndex}. Unpaired surrogates within\n     * the text range count as one code point each.\n     *\n     * @param beginIndex the index to the first {@code char} of\n     * the text range.\n     * @param endIndex the index after the last {@code char} of\n     * the text range.\n     * @return the number of Unicode code points in the specified text\n     * range\n     * @throws    IndexOutOfBoundsException if the\n     * {@code beginIndex} is negative, or {@code endIndex}\n     * is larger than the length of this {@code String}, or\n     * {@code beginIndex} is larger than {@code endIndex}.\n     * @since  1.5\n     */\n    public int codePointCount(int beginIndex, int endIndex) {\n        if (beginIndex \u003c 0 || beginIndex \u003e endIndex ||\n            endIndex \u003e length()) {\n            throw new IndexOutOfBoundsException();\n        }\n        if (isLatin1()) {\n            return endIndex - beginIndex;\n        }\n        return StringUTF16.codePointCount(value, beginIndex, endIndex);\n    }\n\n    /**\n     * Returns the index within this {@code String} that is\n     * offset from the given {@code index} by\n     * {@code codePointOffset} code points. Unpaired surrogates\n     * within the text range given by {@code index} and\n     * {@code codePointOffset} count as one code point each.\n     *\n     * @param index the index to be offset\n     * @param codePointOffset the offset in code points\n     * @return the index within this {@code String}\n     * @throws    IndexOutOfBoundsException if {@code index}\n     *   is negative or larger then the length of this\n     *   {@code String}, or if {@code codePointOffset} is positive\n     *   and the substring starting with {@code index} has fewer\n     *   than {@code codePointOffset} code points,\n     *   or if {@code codePointOffset} is negative and the substring\n     *   before {@code index} has fewer than the absolute value\n     *   of {@code codePointOffset} code points.\n     * @since 1.5\n     */\n    public int offsetByCodePoints(int index, int codePointOffset) {\n        if (index \u003c 0 || index \u003e length()) {\n            throw new IndexOutOfBoundsException();\n        }\n        return Character.offsetByCodePoints(this, index, codePointOffset);\n    }\n\n    /**\n     * Copies characters from this string into the destination character\n     * array.\n     * \u003cp\u003e\n     * The first character to be copied is at index {@code srcBegin};\n     * the last character to be copied is at index {@code srcEnd-1}\n     * (thus the total number of characters to be copied is\n     * {@code srcEnd-srcBegin}). The characters are copied into the\n     * subarray of {@code dst} starting at index {@code dstBegin}\n     * and ending at index:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      srcBegin   index of the first character in the string\n     *                        to copy.\n     * @param      srcEnd     index after the last character in the string\n     *                        to copy.\n     * @param      dst        the destination array.\n     * @param      dstBegin   the start offset in the destination array.\n     * @throws    IndexOutOfBoundsException If any of the following\n     *            is true:\n     *            \u003cul\u003e\u003cli\u003e{@code srcBegin} is negative.\n     *            \u003cli\u003e{@code srcBegin} is greater than {@code srcEnd}\n     *            \u003cli\u003e{@code srcEnd} is greater than the length of this\n     *                string\n     *            \u003cli\u003e{@code dstBegin} is negative\n     *            \u003cli\u003e{@code dstBegin+(srcEnd-srcBegin)} is larger than\n     *                {@code dst.length}\u003c/ul\u003e\n     */\n    public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin) {\n        checkBoundsBeginEnd(srcBegin, srcEnd, length());\n        checkBoundsOffCount(dstBegin, srcEnd - srcBegin, dst.length);\n        if (isLatin1()) {\n            StringLatin1.getChars(value, srcBegin, srcEnd, dst, dstBegin);\n        } else {\n            StringUTF16.getChars(value, srcBegin, srcEnd, dst, dstBegin);\n        }\n    }\n\n    /**\n     * Copies characters from this string into the destination byte array. Each\n     * byte receives the 8 low-order bits of the corresponding character. The\n     * eight high-order bits of each character are not copied and do not\n     * participate in the transfer in any way.\n     *\n     * \u003cp\u003e The first character to be copied is at index {@code srcBegin}; the\n     * last character to be copied is at index {@code srcEnd-1}.  The total\n     * number of characters to be copied is {@code srcEnd-srcBegin}. The\n     * characters, converted to bytes, are copied into the subarray of {@code\n     * dst} starting at index {@code dstBegin} and ending at index:\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @deprecated  This method does not properly convert characters into\n     * bytes.  As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@link #getBytes()} method, which uses the platform\u0027s default charset.\n     *\n     * @param  srcBegin\n     *         Index of the first character in the string to copy\n     *\n     * @param  srcEnd\n     *         Index after the last character in the string to copy\n     *\n     * @param  dst\n     *         The destination array\n     *\n     * @param  dstBegin\n     *         The start offset in the destination array\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If any of the following is true:\n     *          \u003cul\u003e\n     *            \u003cli\u003e {@code srcBegin} is negative\n     *            \u003cli\u003e {@code srcBegin} is greater than {@code srcEnd}\n     *            \u003cli\u003e {@code srcEnd} is greater than the length of this String\n     *            \u003cli\u003e {@code dstBegin} is negative\n     *            \u003cli\u003e {@code dstBegin+(srcEnd-srcBegin)} is larger than {@code\n     *                 dst.length}\n     *          \u003c/ul\u003e\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public void getBytes(int srcBegin, int srcEnd, byte dst[], int dstBegin) {\n        checkBoundsBeginEnd(srcBegin, srcEnd, length());\n        Objects.requireNonNull(dst);\n        checkBoundsOffCount(dstBegin, srcEnd - srcBegin, dst.length);\n        if (isLatin1()) {\n            StringLatin1.getBytes(value, srcBegin, srcEnd, dst, dstBegin);\n        } else {\n            StringUTF16.getBytes(value, srcBegin, srcEnd, dst, dstBegin);\n        }\n    }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the named\n     * charset, storing the result into a new byte array.\n     *\n     * \u003cp\u003e The behavior of this method when this string cannot be encoded in\n     * the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @return  The resultant byte array\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.1\n     */\n    public byte[] getBytes(String charsetName)\n            throws UnsupportedEncodingException {\n        if (charsetName \u003d\u003d null) throw new NullPointerException();\n        return encode(lookupCharset(charsetName), coder(), value);\n    }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the given\n     * {@linkplain java.nio.charset.Charset charset}, storing the result into a\n     * new byte array.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement byte array.  The\n     * {@link java.nio.charset.CharsetEncoder} class should be used when more\n     * control over the encoding process is required.\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset} to be used to encode\n     *         the {@code String}\n     *\n     * @return  The resultant byte array\n     *\n     * @since  1.6\n     */\n    public byte[] getBytes(Charset charset) {\n        if (charset \u003d\u003d null) throw new NullPointerException();\n        return encode(charset, coder(), value);\n     }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the\n     * platform\u0027s default charset, storing the result into a new byte array.\n     *\n     * \u003cp\u003e The behavior of this method when this string cannot be encoded in\n     * the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @return  The resultant byte array\n     *\n     * @since      1.1\n     */\n    public byte[] getBytes() {\n        return encode(Charset.defaultCharset(), coder(), value);\n    }\n\n    /**\n     * Compares this string to the specified object.  The result is {@code\n     * true} if and only if the argument is not {@code null} and is a {@code\n     * String} object that represents the same sequence of characters as this\n     * object.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  anObject\n     *         The object to compare this {@code String} against\n     *\n     * @return  {@code true} if the given object represents a {@code String}\n     *          equivalent to this string, {@code false} otherwise\n     *\n     * @see  #compareTo(String)\n     * @see  #equalsIgnoreCase(String)\n     */\n    public boolean equals(Object anObject) {\n        if (this \u003d\u003d anObject) {\n            return true;\n        }\n        return (anObject instanceof String aString)\n                \u0026\u0026 (!COMPACT_STRINGS || this.coder \u003d\u003d aString.coder)\n                \u0026\u0026 StringLatin1.equals(value, aString.value);\n    }\n\n    /**\n     * Compares this string to the specified {@code StringBuffer}.  The result\n     * is {@code true} if and only if this {@code String} represents the same\n     * sequence of characters as the specified {@code StringBuffer}. This method\n     * synchronizes on the {@code StringBuffer}.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  sb\n     *         The {@code StringBuffer} to compare this {@code String} against\n     *\n     * @return  {@code true} if this {@code String} represents the same\n     *          sequence of characters as the specified {@code StringBuffer},\n     *          {@code false} otherwise\n     *\n     * @since  1.4\n     */\n    public boolean contentEquals(StringBuffer sb) {\n        return contentEquals((CharSequence)sb);\n    }\n\n    private boolean nonSyncContentEquals(AbstractStringBuilder sb) {\n        int len \u003d length();\n        if (len !\u003d sb.length()) {\n            return false;\n        }\n        byte v1[] \u003d value;\n        byte v2[] \u003d sb.getValue();\n        byte coder \u003d coder();\n        if (coder \u003d\u003d sb.getCoder()) {\n            int n \u003d v1.length;\n            for (int i \u003d 0; i \u003c n; i++) {\n                if (v1[i] !\u003d v2[i]) {\n                    return false;\n                }\n            }\n        } else {\n            if (coder !\u003d LATIN1) {  // utf16 str and latin1 abs can never be \"equal\"\n                return false;\n            }\n            return StringUTF16.contentEquals(v1, v2, len);\n        }\n        return true;\n    }\n\n    /**\n     * Compares this string to the specified {@code CharSequence}.  The\n     * result is {@code true} if and only if this {@code String} represents the\n     * same sequence of char values as the specified sequence. Note that if the\n     * {@code CharSequence} is a {@code StringBuffer} then the method\n     * synchronizes on it.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  cs\n     *         The sequence to compare this {@code String} against\n     *\n     * @return  {@code true} if this {@code String} represents the same\n     *          sequence of char values as the specified sequence, {@code\n     *          false} otherwise\n     *\n     * @since  1.5\n     */\n    public boolean contentEquals(CharSequence cs) {\n        // Argument is a StringBuffer, StringBuilder\n        if (cs instanceof AbstractStringBuilder) {\n            if (cs instanceof StringBuffer) {\n                synchronized(cs) {\n                   return nonSyncContentEquals((AbstractStringBuilder)cs);\n                }\n            } else {\n                return nonSyncContentEquals((AbstractStringBuilder)cs);\n            }\n        }\n        // Argument is a String\n        if (cs instanceof String) {\n            return equals(cs);\n        }\n        // Argument is a generic CharSequence\n        int n \u003d cs.length();\n        if (n !\u003d length()) {\n            return false;\n        }\n        byte[] val \u003d this.value;\n        if (isLatin1()) {\n            for (int i \u003d 0; i \u003c n; i++) {\n                if ((val[i] \u0026 0xff) !\u003d cs.charAt(i)) {\n                    return false;\n                }\n            }\n        } else {\n            if (!StringUTF16.contentEquals(val, cs, n)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Compares this {@code String} to another {@code String}, ignoring case\n     * considerations.  Two strings are considered equal ignoring case if they\n     * are of the same length and corresponding Unicode code points in the two\n     * strings are equal ignoring case.\n     *\n     * \u003cp\u003e Two Unicode code points are considered the same\n     * ignoring case if at least one of the following is true:\n     * \u003cul\u003e\n     *   \u003cli\u003e The two Unicode code points are the same (as compared by the\n     *        {@code \u003d\u003d} operator)\n     *   \u003cli\u003e Calling {@code Character.toLowerCase(Character.toUpperCase(int))}\n     *        on each Unicode code point produces the same result\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account, and\n     * will result in unsatisfactory results for certain locales.  The\n     * {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param  anotherString\n     *         The {@code String} to compare this {@code String} against\n     *\n     * @return  {@code true} if the argument is not {@code null} and it\n     *          represents an equivalent {@code String} ignoring case; {@code\n     *          false} otherwise\n     *\n     * @see  #equals(Object)\n     * @see  #codePoints()\n     */\n    public boolean equalsIgnoreCase(String anotherString) {\n        return (this \u003d\u003d anotherString) ? true\n                : (anotherString !\u003d null)\n                \u0026\u0026 (anotherString.length() \u003d\u003d length())\n                \u0026\u0026 regionMatches(true, 0, anotherString, 0, length());\n    }\n\n    /**\n     * Compares two strings lexicographically.\n     * The comparison is based on the Unicode value of each character in\n     * the strings. The character sequence represented by this\n     * {@code String} object is compared lexicographically to the\n     * character sequence represented by the argument string. The result is\n     * a negative integer if this {@code String} object\n     * lexicographically precedes the argument string. The result is a\n     * positive integer if this {@code String} object lexicographically\n     * follows the argument string. The result is zero if the strings\n     * are equal; {@code compareTo} returns {@code 0} exactly when\n     * the {@link #equals(Object)} method would return {@code true}.\n     * \u003cp\u003e\n     * This is the definition of lexicographic ordering. If two strings are\n     * different, then either they have different characters at some index\n     * that is a valid index for both strings, or their lengths are different,\n     * or both. If they have different characters at one or more index\n     * positions, let \u003ci\u003ek\u003c/i\u003e be the smallest such index; then the string\n     * whose character at position \u003ci\u003ek\u003c/i\u003e has the smaller value, as\n     * determined by using the {@code \u003c} operator, lexicographically precedes the\n     * other string. In this case, {@code compareTo} returns the\n     * difference of the two character values at position {@code k} in\n     * the two string -- that is, the value:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(k)-anotherString.charAt(k)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * If there is no index position at which they differ, then the shorter\n     * string lexicographically precedes the longer string. In this case,\n     * {@code compareTo} returns the difference of the lengths of the\n     * strings -- that is, the value:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.length()-anotherString.length()\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param   anotherString   the {@code String} to be compared.\n     * @return  the value {@code 0} if the argument string is equal to\n     *          this string; a value less than {@code 0} if this string\n     *          is lexicographically less than the string argument; and a\n     *          value greater than {@code 0} if this string is\n     *          lexicographically greater than the string argument.\n     */\n    public int compareTo(String anotherString) {\n        byte v1[] \u003d value;\n        byte v2[] \u003d anotherString.value;\n        byte coder \u003d coder();\n        if (coder \u003d\u003d anotherString.coder()) {\n            return coder \u003d\u003d LATIN1 ? StringLatin1.compareTo(v1, v2)\n                                   : StringUTF16.compareTo(v1, v2);\n        }\n        return coder \u003d\u003d LATIN1 ? StringLatin1.compareToUTF16(v1, v2)\n                               : StringUTF16.compareToLatin1(v1, v2);\n     }\n\n    /**\n     * A Comparator that orders {@code String} objects as by\n     * {@link #compareToIgnoreCase(String) compareToIgnoreCase}.\n     * This comparator is serializable.\n     * \u003cp\u003e\n     * Note that this Comparator does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @see     java.text.Collator\n     * @since   1.2\n     */\n    public static final Comparator\u003cString\u003e CASE_INSENSITIVE_ORDER\n                                         \u003d new CaseInsensitiveComparator();\n\n    /**\n     * CaseInsensitiveComparator for Strings.\n     */\n    private static class CaseInsensitiveComparator\n            implements Comparator\u003cString\u003e, java.io.Serializable {\n        // use serialVersionUID from JDK 1.2.2 for interoperability\n        @java.io.Serial\n        private static final long serialVersionUID \u003d 8575799808933029326L;\n\n        public int compare(String s1, String s2) {\n            byte v1[] \u003d s1.value;\n            byte v2[] \u003d s2.value;\n            byte coder \u003d s1.coder();\n            if (coder \u003d\u003d s2.coder()) {\n                return coder \u003d\u003d LATIN1 ? StringLatin1.compareToCI(v1, v2)\n                                       : StringUTF16.compareToCI(v1, v2);\n            }\n            return coder \u003d\u003d LATIN1 ? StringLatin1.compareToCI_UTF16(v1, v2)\n                                   : StringUTF16.compareToCI_Latin1(v1, v2);\n        }\n\n        /** Replaces the de-serialized object. */\n        @java.io.Serial\n        private Object readResolve() { return CASE_INSENSITIVE_ORDER; }\n    }\n\n    /**\n     * Compares two strings lexicographically, ignoring case\n     * differences. This method returns an integer whose sign is that of\n     * calling {@code compareTo} with case folded versions of the strings\n     * where case differences have been eliminated by calling\n     * {@code Character.toLowerCase(Character.toUpperCase(int))} on\n     * each Unicode code point.\n     * \u003cp\u003e\n     * Note that this method does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param   str   the {@code String} to be compared.\n     * @return  a negative integer, zero, or a positive integer as the\n     *          specified String is greater than, equal to, or less\n     *          than this String, ignoring case considerations.\n     * @see     java.text.Collator\n     * @see     #codePoints()\n     * @since   1.2\n     */\n    public int compareToIgnoreCase(String str) {\n        return CASE_INSENSITIVE_ORDER.compare(this, str);\n    }\n\n    /**\n     * Tests if two string regions are equal.\n     * \u003cp\u003e\n     * A substring of this {@code String} object is compared to a substring\n     * of the argument other. The result is true if these substrings\n     * represent identical character sequences. The substring of this\n     * {@code String} object to be compared begins at index {@code toffset}\n     * and has length {@code len}. The substring of other to be compared\n     * begins at index {@code ooffset} and has length {@code len}. The\n     * result is {@code false} if and only if at least one of the following\n     * is true:\n     * \u003cul\u003e\u003cli\u003e{@code toffset} is negative.\n     * \u003cli\u003e{@code ooffset} is negative.\n     * \u003cli\u003e{@code toffset+len} is greater than the length of this\n     * {@code String} object.\n     * \u003cli\u003e{@code ooffset+len} is greater than the length of the other\n     * argument.\n     * \u003cli\u003eThere is some nonnegative integer \u003ci\u003ek\u003c/i\u003e less than {@code len}\n     * such that:\n     * {@code this.charAt(toffset + }\u003ci\u003ek\u003c/i\u003e{@code ) !\u003d other.charAt(ooffset + }\n     * \u003ci\u003ek\u003c/i\u003e{@code )}\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account.  The\n     * {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param   toffset   the starting offset of the subregion in this string.\n     * @param   other     the string argument.\n     * @param   ooffset   the starting offset of the subregion in the string\n     *                    argument.\n     * @param   len       the number of characters to compare.\n     * @return  {@code true} if the specified subregion of this string\n     *          exactly matches the specified subregion of the string argument;\n     *          {@code false} otherwise.\n     */\n    public boolean regionMatches(int toffset, String other, int ooffset, int len) {\n        byte tv[] \u003d value;\n        byte ov[] \u003d other.value;\n        // Note: toffset, ooffset, or len might be near -1\u003e\u003e\u003e1.\n        if ((ooffset \u003c 0) || (toffset \u003c 0) ||\n             (toffset \u003e (long)length() - len) ||\n             (ooffset \u003e (long)other.length() - len)) {\n            return false;\n        }\n        byte coder \u003d coder();\n        if (coder \u003d\u003d other.coder()) {\n            if (!isLatin1() \u0026\u0026 (len \u003e 0)) {\n                toffset \u003d toffset \u003c\u003c 1;\n                ooffset \u003d ooffset \u003c\u003c 1;\n                len \u003d len \u003c\u003c 1;\n            }\n            while (len-- \u003e 0) {\n                if (tv[toffset++] !\u003d ov[ooffset++]) {\n                    return false;\n                }\n            }\n        } else {\n            if (coder \u003d\u003d LATIN1) {\n                while (len-- \u003e 0) {\n                    if (StringLatin1.getChar(tv, toffset++) !\u003d\n                        StringUTF16.getChar(ov, ooffset++)) {\n                        return false;\n                    }\n                }\n            } else {\n                while (len-- \u003e 0) {\n                    if (StringUTF16.getChar(tv, toffset++) !\u003d\n                        StringLatin1.getChar(ov, ooffset++)) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Tests if two string regions are equal.\n     * \u003cp\u003e\n     * A substring of this {@code String} object is compared to a substring\n     * of the argument {@code other}. The result is {@code true} if these\n     * substrings represent Unicode code point sequences that are the same,\n     * ignoring case if and only if {@code ignoreCase} is true.\n     * The sequences {@code tsequence} and {@code osequence} are compared,\n     * where {@code tsequence} is the sequence produced as if by calling\n     * {@code this.substring(toffset, toffset + len).codePoints()} and\n     * {@code osequence} is the sequence produced as if by calling\n     * {@code other.substring(ooffset, ooffset + len).codePoints()}.\n     * The result is {@code true} if and only if all of the following\n     * are true:\n     * \u003cul\u003e\u003cli\u003e{@code toffset} is non-negative.\n     * \u003cli\u003e{@code ooffset} is non-negative.\n     * \u003cli\u003e{@code toffset+len} is less than or equal to the length of this\n     * {@code String} object.\n     * \u003cli\u003e{@code ooffset+len} is less than or equal to the length of the other\n     * argument.\n     * \u003cli\u003eif {@code ignoreCase} is {@code false}, all pairs of corresponding Unicode\n     * code points are equal integer values; or if {@code ignoreCase} is {@code true},\n     * {@link Character#toLowerCase(int) Character.toLowerCase(}\n     * {@link Character#toUpperCase(int)}{@code )} on all pairs of Unicode code points\n     * results in equal integer values.\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in unsatisfactory results for certain locales when\n     * {@code ignoreCase} is {@code true}.  The {@link java.text.Collator} class\n     * provides locale-sensitive comparison.\n     *\n     * @param   ignoreCase   if {@code true}, ignore case when comparing\n     *                       characters.\n     * @param   toffset      the starting offset of the subregion in this\n     *                       string.\n     * @param   other        the string argument.\n     * @param   ooffset      the starting offset of the subregion in the string\n     *                       argument.\n     * @param   len          the number of characters (Unicode code units -\n     *                       16bit {@code char} value) to compare.\n     * @return  {@code true} if the specified subregion of this string\n     *          matches the specified subregion of the string argument;\n     *          {@code false} otherwise. Whether the matching is exact\n     *          or case insensitive depends on the {@code ignoreCase}\n     *          argument.\n     * @see     #codePoints()\n     */\n    public boolean regionMatches(boolean ignoreCase, int toffset,\n            String other, int ooffset, int len) {\n        if (!ignoreCase) {\n            return regionMatches(toffset, other, ooffset, len);\n        }\n        // Note: toffset, ooffset, or len might be near -1\u003e\u003e\u003e1.\n        if ((ooffset \u003c 0) || (toffset \u003c 0)\n                || (toffset \u003e (long)length() - len)\n                || (ooffset \u003e (long)other.length() - len)) {\n            return false;\n        }\n        byte tv[] \u003d value;\n        byte ov[] \u003d other.value;\n        byte coder \u003d coder();\n        if (coder \u003d\u003d other.coder()) {\n            return coder \u003d\u003d LATIN1\n              ? StringLatin1.regionMatchesCI(tv, toffset, ov, ooffset, len)\n              : StringUTF16.regionMatchesCI(tv, toffset, ov, ooffset, len);\n        }\n        return coder \u003d\u003d LATIN1\n              ? StringLatin1.regionMatchesCI_UTF16(tv, toffset, ov, ooffset, len)\n              : StringUTF16.regionMatchesCI_Latin1(tv, toffset, ov, ooffset, len);\n    }\n\n    /**\n     * Tests if the substring of this string beginning at the\n     * specified index starts with the specified prefix.\n     *\n     * @param   prefix    the prefix.\n     * @param   toffset   where to begin looking in this string.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a prefix of the substring of this object starting\n     *          at index {@code toffset}; {@code false} otherwise.\n     *          The result is {@code false} if {@code toffset} is\n     *          negative or greater than the length of this\n     *          {@code String} object; otherwise the result is the same\n     *          as the result of the expression\n     *          \u003cpre\u003e\n     *          this.substring(toffset).startsWith(prefix)\n     *          \u003c/pre\u003e\n     */\n    public boolean startsWith(String prefix, int toffset) {\n        // Note: toffset might be near -1\u003e\u003e\u003e1.\n        if (toffset \u003c 0 || toffset \u003e length() - prefix.length()) {\n            return false;\n        }\n        byte ta[] \u003d value;\n        byte pa[] \u003d prefix.value;\n        int po \u003d 0;\n        int pc \u003d pa.length;\n        byte coder \u003d coder();\n        if (coder \u003d\u003d prefix.coder()) {\n            int to \u003d (coder \u003d\u003d LATIN1) ? toffset : toffset \u003c\u003c 1;\n            while (po \u003c pc) {\n                if (ta[to++] !\u003d pa[po++]) {\n                    return false;\n                }\n            }\n        } else {\n            if (coder \u003d\u003d LATIN1) {  // \u0026\u0026 pcoder \u003d\u003d UTF16\n                return false;\n            }\n            // coder \u003d\u003d UTF16 \u0026\u0026 pcoder \u003d\u003d LATIN1)\n            while (po \u003c pc) {\n                if (StringUTF16.getChar(ta, toffset++) !\u003d (pa[po++] \u0026 0xff)) {\n                    return false;\n               }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Tests if this string starts with the specified prefix.\n     *\n     * @param   prefix   the prefix.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a prefix of the character sequence represented by\n     *          this string; {@code false} otherwise.\n     *          Note also that {@code true} will be returned if the\n     *          argument is an empty string or is equal to this\n     *          {@code String} object as determined by the\n     *          {@link #equals(Object)} method.\n     * @since   1.0\n     */\n    public boolean startsWith(String prefix) {\n        return startsWith(prefix, 0);\n    }\n\n    /**\n     * Tests if this string ends with the specified suffix.\n     *\n     * @param   suffix   the suffix.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a suffix of the character sequence represented by\n     *          this object; {@code false} otherwise. Note that the\n     *          result will be {@code true} if the argument is the\n     *          empty string or is equal to this {@code String} object\n     *          as determined by the {@link #equals(Object)} method.\n     */\n    public boolean endsWith(String suffix) {\n        return startsWith(suffix, length() - suffix.length());\n    }\n\n    /**\n     * Returns a hash code for this string. The hash code for a\n     * {@code String} object is computed as\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * using {@code int} arithmetic, where {@code s[i]} is the\n     * \u003ci\u003ei\u003c/i\u003eth character of the string, {@code n} is the length of\n     * the string, and {@code ^} indicates exponentiation.\n     * (The hash value of the empty string is zero.)\n     *\n     * @return  a hash code value for this object.\n     */\n    public int hashCode() {\n        // The hash or hashIsZero fields are subject to a benign data race,\n        // making it crucial to ensure that any observable result of the\n        // calculation in this method stays correct under any possible read of\n        // these fields. Necessary restrictions to allow this to be correct\n        // without explicit memory fences or similar concurrency primitives is\n        // that we can ever only write to one of these two fields for a given\n        // String instance, and that the computation is idempotent and derived\n        // from immutable state\n        int h \u003d hash;\n        if (h \u003d\u003d 0 \u0026\u0026 !hashIsZero) {\n            h \u003d isLatin1() ? StringLatin1.hashCode(value)\n                           : StringUTF16.hashCode(value);\n            if (h \u003d\u003d 0) {\n                hashIsZero \u003d true;\n            } else {\n                hash \u003d h;\n            }\n        }\n        return h;\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of\n     * the specified character. If a character with value\n     * {@code ch} occurs in the character sequence represented by\n     * this {@code String} object, then the index (in Unicode\n     * code units) of the first such occurrence is returned. For\n     * values of {@code ch} in the range from 0 to 0xFFFF\n     * (inclusive), this is the smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string, then {@code -1} is returned.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          {@code -1} if the character does not occur.\n     */\n    public int indexOf(int ch) {\n        return indexOf(ch, 0);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified character, starting the search at the specified index.\n     * \u003cp\u003e\n     * If a character with value {@code ch} occurs in the\n     * character sequence represented by this {@code String}\n     * object at an index no smaller than {@code fromIndex}, then\n     * the index of the first such occurrence is returned. For values\n     * of {@code ch} in the range from 0 to 0xFFFF (inclusive),\n     * this is the smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string at or after position {@code fromIndex}, then\n     * {@code -1} is returned.\n     *\n     * \u003cp\u003e\n     * There is no restriction on the value of {@code fromIndex}. If it\n     * is negative, it has the same effect as if it were zero: this entire\n     * string may be searched. If it is greater than the length of this\n     * string, it has the same effect as if it were equal to the length of\n     * this string: {@code -1} is returned.\n     *\n     * \u003cp\u003eAll indices are specified in {@code char} values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object that is greater\n     *          than or equal to {@code fromIndex}, or {@code -1}\n     *          if the character does not occur.\n     */\n    public int indexOf(int ch, int fromIndex) {\n        return isLatin1() ? StringLatin1.indexOf(value, ch, fromIndex)\n                          : StringUTF16.indexOf(value, ch, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of\n     * the specified character. For values of {@code ch} in the\n     * range from 0 to 0xFFFF (inclusive), the index (in Unicode code\n     * units) returned is the largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true.  In either case, if no such character occurs in this\n     * string, then {@code -1} is returned.  The\n     * {@code String} is searched backwards starting at the last\n     * character.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          {@code -1} if the character does not occur.\n     */\n    public int lastIndexOf(int ch) {\n        return lastIndexOf(ch, length() - 1);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of\n     * the specified character, searching backward starting at the\n     * specified index. For values of {@code ch} in the range\n     * from 0 to 0xFFFF (inclusive), the index returned is the largest\n     * value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string at or before position {@code fromIndex}, then\n     * {@code -1} is returned.\n     *\n     * \u003cp\u003eAll indices are specified in {@code char} values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from. There is no\n     *          restriction on the value of {@code fromIndex}. If it is\n     *          greater than or equal to the length of this string, it has\n     *          the same effect as if it were equal to one less than the\n     *          length of this string: this entire string may be searched.\n     *          If it is negative, it has the same effect as if it were -1:\n     *          -1 is returned.\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object that is less\n     *          than or equal to {@code fromIndex}, or {@code -1}\n     *          if the character does not occur before that point.\n     */\n    public int lastIndexOf(int ch, int fromIndex) {\n        return isLatin1() ? StringLatin1.lastIndexOf(value, ch, fromIndex)\n                          : StringUTF16.lastIndexOf(value, ch, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring.\n     *\n     * \u003cp\u003eThe returned index is the smallest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     * this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the first occurrence of the specified substring,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int indexOf(String str) {\n        byte coder \u003d coder();\n        if (coder \u003d\u003d str.coder()) {\n            return isLatin1() ? StringLatin1.indexOf(value, str.value)\n                              : StringUTF16.indexOf(value, str.value);\n        }\n        if (coder \u003d\u003d LATIN1) {  // str.coder \u003d\u003d UTF16\n            return -1;\n        }\n        return StringUTF16.indexOfLatin1(value, str.value);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring, starting at the specified index.\n     *\n     * \u003cp\u003eThe returned index is the smallest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     *     k \u003e\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n     *                   this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index from which to start the search.\n     * @return  the index of the first occurrence of the specified substring,\n     *          starting at the specified index,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int indexOf(String str, int fromIndex) {\n        return indexOf(value, coder(), length(), str, fromIndex);\n    }\n\n    /**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   src       the characters being searched.\n     * @param   srcCoder  the coder of the source string.\n     * @param   srcCount  length of the source string.\n     * @param   tgtStr    the characters being searched for.\n     * @param   fromIndex the index to begin searching from.\n     */\n    static int indexOf(byte[] src, byte srcCoder, int srcCount,\n                       String tgtStr, int fromIndex) {\n        byte[] tgt    \u003d tgtStr.value;\n        byte tgtCoder \u003d tgtStr.coder();\n        int tgtCount  \u003d tgtStr.length();\n\n        if (fromIndex \u003e\u003d srcCount) {\n            return (tgtCount \u003d\u003d 0 ? srcCount : -1);\n        }\n        if (fromIndex \u003c 0) {\n            fromIndex \u003d 0;\n        }\n        if (tgtCount \u003d\u003d 0) {\n            return fromIndex;\n        }\n        if (tgtCount \u003e srcCount) {\n            return -1;\n        }\n        if (srcCoder \u003d\u003d tgtCoder) {\n            return srcCoder \u003d\u003d LATIN1\n                ? StringLatin1.indexOf(src, srcCount, tgt, tgtCount, fromIndex)\n                : StringUTF16.indexOf(src, srcCount, tgt, tgtCount, fromIndex);\n        }\n        if (srcCoder \u003d\u003d LATIN1) {    //  \u0026\u0026 tgtCoder \u003d\u003d UTF16\n            return -1;\n        }\n        // srcCoder \u003d\u003d UTF16 \u0026\u0026 tgtCoder \u003d\u003d LATIN1) {\n        return StringUTF16.indexOfLatin1(src, srcCount, tgt, tgtCount, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring.  The last occurrence of the empty string \"\"\n     * is considered to occur at the index value {@code this.length()}.\n     *\n     * \u003cp\u003eThe returned index is the largest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     * this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the last occurrence of the specified substring,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int lastIndexOf(String str) {\n        return lastIndexOf(str, length());\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring, searching backward starting at the specified index.\n     *\n     * \u003cp\u003eThe returned index is the largest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     *     k \u003c\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n     *                   this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the last occurrence of the specified substring,\n     *          searching backward from the specified index,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int lastIndexOf(String str, int fromIndex) {\n        return lastIndexOf(value, coder(), length(), str, fromIndex);\n    }\n\n    /**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   src         the characters being searched.\n     * @param   srcCoder    coder handles the mapping between bytes/chars\n     * @param   srcCount    count of the source string.\n     * @param   tgtStr      the characters being searched for.\n     * @param   fromIndex   the index to begin searching from.\n     */\n    static int lastIndexOf(byte[] src, byte srcCoder, int srcCount,\n                           String tgtStr, int fromIndex) {\n        byte[] tgt \u003d tgtStr.value;\n        byte tgtCoder \u003d tgtStr.coder();\n        int tgtCount \u003d tgtStr.length();\n        /*\n         * Check arguments; return immediately where possible. For\n         * consistency, don\u0027t check for null str.\n         */\n        int rightIndex \u003d srcCount - tgtCount;\n        if (fromIndex \u003e rightIndex) {\n            fromIndex \u003d rightIndex;\n        }\n        if (fromIndex \u003c 0) {\n            return -1;\n        }\n        /* Empty string always matches. */\n        if (tgtCount \u003d\u003d 0) {\n            return fromIndex;\n        }\n        if (srcCoder \u003d\u003d tgtCoder) {\n            return srcCoder \u003d\u003d LATIN1\n                ? StringLatin1.lastIndexOf(src, srcCount, tgt, tgtCount, fromIndex)\n                : StringUTF16.lastIndexOf(src, srcCount, tgt, tgtCount, fromIndex);\n        }\n        if (srcCoder \u003d\u003d LATIN1) {    // \u0026\u0026 tgtCoder \u003d\u003d UTF16\n            return -1;\n        }\n        // srcCoder \u003d\u003d UTF16 \u0026\u0026 tgtCoder \u003d\u003d LATIN1\n        return StringUTF16.lastIndexOfLatin1(src, srcCount, tgt, tgtCount, fromIndex);\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins with the character at the specified index and\n     * extends to the end of this string. \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"unhappy\".substring(2) returns \"happy\"\n     * \"Harbison\".substring(3) returns \"bison\"\n     * \"emptiness\".substring(9) returns \"\" (an empty string)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @return     the specified substring.\n     * @throws     IndexOutOfBoundsException  if\n     *             {@code beginIndex} is negative or larger than the\n     *             length of this {@code String} object.\n     */\n    public String substring(int beginIndex) {\n        return substring(beginIndex, length());\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins at the specified {@code beginIndex} and\n     * extends to the character at index {@code endIndex - 1}.\n     * Thus the length of the substring is {@code endIndex-beginIndex}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"hamburger\".substring(4, 8) returns \"urge\"\n     * \"smiles\".substring(1, 5) returns \"mile\"\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @param      endIndex     the ending index, exclusive.\n     * @return     the specified substring.\n     * @throws     IndexOutOfBoundsException  if the\n     *             {@code beginIndex} is negative, or\n     *             {@code endIndex} is larger than the length of\n     *             this {@code String} object, or\n     *             {@code beginIndex} is larger than\n     *             {@code endIndex}.\n     */\n    public String substring(int beginIndex, int endIndex) {\n        int length \u003d length();\n        checkBoundsBeginEnd(beginIndex, endIndex, length);\n        if (beginIndex \u003d\u003d 0 \u0026\u0026 endIndex \u003d\u003d length) {\n            return this;\n        }\n        int subLen \u003d endIndex - beginIndex;\n        return isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)\n                          : StringUTF16.newString(value, beginIndex, subLen);\n    }\n\n    /**\n     * Returns a character sequence that is a subsequence of this sequence.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * str.subSequence(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * behaves in exactly the same way as the invocation\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * str.substring(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @apiNote\n     * This method is defined so that the {@code String} class can implement\n     * the {@link CharSequence} interface.\n     *\n     * @param   beginIndex   the begin index, inclusive.\n     * @param   endIndex     the end index, exclusive.\n     * @return  the specified subsequence.\n     *\n     * @throws  IndexOutOfBoundsException\n     *          if {@code beginIndex} or {@code endIndex} is negative,\n     *          if {@code endIndex} is greater than {@code length()},\n     *          or if {@code beginIndex} is greater than {@code endIndex}\n     *\n     * @since 1.4\n     */\n    public CharSequence subSequence(int beginIndex, int endIndex) {\n        return this.substring(beginIndex, endIndex);\n    }\n\n    /**\n     * Concatenates the specified string to the end of this string.\n     * \u003cp\u003e\n     * If the length of the argument string is {@code 0}, then this\n     * {@code String} object is returned. Otherwise, a\n     * {@code String} object is returned that represents a character\n     * sequence that is the concatenation of the character sequence\n     * represented by this {@code String} object and the character\n     * sequence represented by the argument string.\u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"cares\".concat(\"s\") returns \"caress\"\n     * \"to\".concat(\"get\").concat(\"her\") returns \"together\"\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param   str   the {@code String} that is concatenated to the end\n     *                of this {@code String}.\n     * @return  a string that represents the concatenation of this object\u0027s\n     *          characters followed by the string argument\u0027s characters.\n     */\n    public String concat(String str) {\n        if (str.isEmpty()) {\n            return this;\n        }\n        return StringConcatHelper.simpleConcat(this, str);\n    }\n\n    /**\n     * Returns a string resulting from replacing all occurrences of\n     * {@code oldChar} in this string with {@code newChar}.\n     * \u003cp\u003e\n     * If the character {@code oldChar} does not occur in the\n     * character sequence represented by this {@code String} object,\n     * then a reference to this {@code String} object is returned.\n     * Otherwise, a {@code String} object is returned that\n     * represents a character sequence identical to the character sequence\n     * represented by this {@code String} object, except that every\n     * occurrence of {@code oldChar} is replaced by an occurrence\n     * of {@code newChar}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"mesquite in your cellar\".replace(\u0027e\u0027, \u0027o\u0027)\n     *         returns \"mosquito in your collar\"\n     * \"the war of baronets\".replace(\u0027r\u0027, \u0027y\u0027)\n     *         returns \"the way of bayonets\"\n     * \"sparring with a purple porpoise\".replace(\u0027p\u0027, \u0027t\u0027)\n     *         returns \"starring with a turtle tortoise\"\n     * \"JonL\".replace(\u0027q\u0027, \u0027x\u0027) returns \"JonL\" (no change)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param   oldChar   the old character.\n     * @param   newChar   the new character.\n     * @return  a string derived from this string by replacing every\n     *          occurrence of {@code oldChar} with {@code newChar}.\n     */\n    public String replace(char oldChar, char newChar) {\n        if (oldChar !\u003d newChar) {\n            String ret \u003d isLatin1() ? StringLatin1.replace(value, oldChar, newChar)\n                                    : StringUTF16.replace(value, oldChar, newChar);\n            if (ret !\u003d null) {\n                return ret;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Tells whether or not this string matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .matches(}\u003ci\u003eregex\u003c/i\u003e{@code )} yields exactly the\n     * same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#matches(String,CharSequence)\n     * matches(\u003ci\u003eregex\u003c/i\u003e, \u003ci\u003estr\u003c/i\u003e)}\n     * \u003c/blockquote\u003e\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     *\n     * @return  {@code true} if, and only if, this string matches the\n     *          given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     */\n    public boolean matches(String regex) {\n        return Pattern.matches(regex, this);\n    }\n\n    /**\n     * Returns true if and only if this string contains the specified\n     * sequence of char values.\n     *\n     * @param s the sequence to search for\n     * @return true if this string contains {@code s}, false otherwise\n     * @since 1.5\n     */\n    public boolean contains(CharSequence s) {\n        return indexOf(s.toString()) \u003e\u003d 0;\n    }\n\n    /**\n     * Replaces the first substring of this string that matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e with the\n     * given replacement.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .replaceFirst(}\u003ci\u003eregex\u003c/i\u003e{@code ,} \u003ci\u003erepl\u003c/i\u003e{@code )}\n     * yields exactly the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile(String) compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(\u003ci\u003estr\u003c/i\u003e).{@link\n     * java.util.regex.Matcher#replaceFirst(String) replaceFirst}(\u003ci\u003erepl\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\u003cp\u003e\n     * Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * {@link java.util.regex.Matcher#replaceFirst}.\n     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for the first match\n     *\n     * @return  The resulting {@code String}\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     */\n    public String replaceFirst(String regex, String replacement) {\n        return Pattern.compile(regex).matcher(this).replaceFirst(replacement);\n    }\n\n    /**\n     * Replaces each substring of this string that matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e with the\n     * given replacement.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .replaceAll(}\u003ci\u003eregex\u003c/i\u003e{@code ,} \u003ci\u003erepl\u003c/i\u003e{@code )}\n     * yields exactly the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile(String) compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(\u003ci\u003estr\u003c/i\u003e).{@link\n     * java.util.regex.Matcher#replaceAll(String) replaceAll}(\u003ci\u003erepl\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\u003cp\u003e\n     * Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * {@link java.util.regex.Matcher#replaceAll Matcher.replaceAll}.\n     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for each match\n     *\n     * @return  The resulting {@code String}\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     */\n    public String replaceAll(String regex, String replacement) {\n        return Pattern.compile(regex).matcher(this).replaceAll(replacement);\n    }\n\n    /**\n     * Replaces each substring of this string that matches the literal target\n     * sequence with the specified literal replacement sequence. The\n     * replacement proceeds from the beginning of the string to the end, for\n     * example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in\n     * \"ba\" rather than \"ab\".\n     *\n     * @param  target The sequence of char values to be replaced\n     * @param  replacement The replacement sequence of char values\n     * @return  The resulting string\n     * @since 1.5\n     */\n    public String replace(CharSequence target, CharSequence replacement) {\n        String trgtStr \u003d target.toString();\n        String replStr \u003d replacement.toString();\n        int thisLen \u003d length();\n        int trgtLen \u003d trgtStr.length();\n        int replLen \u003d replStr.length();\n\n        if (trgtLen \u003e 0) {\n            if (trgtLen \u003d\u003d 1 \u0026\u0026 replLen \u003d\u003d 1) {\n                return replace(trgtStr.charAt(0), replStr.charAt(0));\n            }\n\n            boolean thisIsLatin1 \u003d this.isLatin1();\n            boolean trgtIsLatin1 \u003d trgtStr.isLatin1();\n            boolean replIsLatin1 \u003d replStr.isLatin1();\n            String ret \u003d (thisIsLatin1 \u0026\u0026 trgtIsLatin1 \u0026\u0026 replIsLatin1)\n                    ? StringLatin1.replace(value, thisLen,\n                                           trgtStr.value, trgtLen,\n                                           replStr.value, replLen)\n                    : StringUTF16.replace(value, thisLen, thisIsLatin1,\n                                          trgtStr.value, trgtLen, trgtIsLatin1,\n                                          replStr.value, replLen, replIsLatin1);\n            if (ret !\u003d null) {\n                return ret;\n            }\n            return this;\n\n        } else { // trgtLen \u003d\u003d 0\n            int resultLen;\n            try {\n                resultLen \u003d Math.addExact(thisLen, Math.multiplyExact(\n                        Math.addExact(thisLen, 1), replLen));\n            } catch (ArithmeticException ignored) {\n                throw new OutOfMemoryError(\"Required length exceeds implementation limit\");\n            }\n\n            StringBuilder sb \u003d new StringBuilder(resultLen);\n            sb.append(replStr);\n            for (int i \u003d 0; i \u003c thisLen; ++i) {\n                sb.append(charAt(i)).append(replStr);\n            }\n            return sb.toString();\n        }\n    }\n\n    /**\n     * Splits this string around matches of the given\n     * \u003ca href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e The array returned by this method contains each substring of this\n     * string that is terminated by another substring that matches the given\n     * expression or is terminated by the end of the string.  The substrings in\n     * the array are in the order in which they occur in this string.  If the\n     * expression does not match any part of the input then the resulting array\n     * has just one element, namely this string.\n     *\n     * \u003cp\u003e When there is a positive-width match at the beginning of this\n     * string then an empty leading substring is included at the beginning\n     * of the resulting array. A zero-width match at the beginning however\n     * never produces such empty leading substring.\n     *\n     * \u003cp\u003e The {@code limit} parameter controls the number of times the\n     * pattern is applied and therefore affects the length of the resulting\n     * array.\n     * \u003cul\u003e\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is positive then the pattern will be applied\n     *    at most \u003ci\u003elimit\u003c/i\u003e\u0026nbsp;-\u0026nbsp;1 times, the array\u0027s length will be\n     *    no greater than \u003ci\u003elimit\u003c/i\u003e, and the array\u0027s last entry will contain\n     *    all input beyond the last matched delimiter.\u003c/p\u003e\u003c/li\u003e\n     *\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is zero then the pattern will be applied as\n     *    many times as possible, the array can have any length, and trailing\n     *    empty strings will be discarded.\u003c/p\u003e\u003c/li\u003e\n     *\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is negative then the pattern will be applied\n     *    as many times as possible and the array can have any length.\u003c/p\u003e\u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e The string {@code \"boo:and:foo\"}, for example, yields the\n     * following results with these parameters:\n     *\n     * \u003cblockquote\u003e\u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eSplit example showing regex, limit, and result\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *     \u003cth scope\u003d\"col\"\u003eRegex\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eLimit\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eResult\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" rowspan\u003d\"3\" style\u003d\"font-weight:normal\"\u003e:\u003c/th\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and:foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- : --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e5\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- : --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e-2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" rowspan\u003d\"3\" style\u003d\"font-weight:normal\"\u003eo\u003c/th\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e5\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- o --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e-2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- o --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e0\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\u003c/blockquote\u003e\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr.\u003c/i\u003e{@code split(}\u003ci\u003eregex\u003c/i\u003e{@code ,}\u0026nbsp;\u003ci\u003en\u003c/i\u003e{@code )}\n     * yields the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile(String) compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#split(java.lang.CharSequence,int) split}(\u003ci\u003estr\u003c/i\u003e,\u0026nbsp;\u003ci\u003en\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @param  limit\n     *         the result threshold, as described above\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     */\n    public String[] split(String regex, int limit) {\n        /* fastpath if the regex is a\n         * (1) one-char String and this character is not one of the\n         *     RegEx\u0027s meta characters \".$|()[{^?*+\\\\\", or\n         * (2) two-char String and the first char is the backslash and\n         *     the second is not the ascii digit or ascii letter.\n         */\n        char ch \u003d 0;\n        if (((regex.length() \u003d\u003d 1 \u0026\u0026\n             \".$|()[{^?*+\\\\\".indexOf(ch \u003d regex.charAt(0)) \u003d\u003d -1) ||\n             (regex.length() \u003d\u003d 2 \u0026\u0026\n              regex.charAt(0) \u003d\u003d \u0027\\\\\u0027 \u0026\u0026\n              (((ch \u003d regex.charAt(1))-\u00270\u0027)|(\u00279\u0027-ch)) \u003c 0 \u0026\u0026\n              ((ch-\u0027a\u0027)|(\u0027z\u0027-ch)) \u003c 0 \u0026\u0026\n              ((ch-\u0027A\u0027)|(\u0027Z\u0027-ch)) \u003c 0)) \u0026\u0026\n            (ch \u003c Character.MIN_HIGH_SURROGATE ||\n             ch \u003e Character.MAX_LOW_SURROGATE))\n        {\n            int off \u003d 0;\n            int next \u003d 0;\n            boolean limited \u003d limit \u003e 0;\n            ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();\n            while ((next \u003d indexOf(ch, off)) !\u003d -1) {\n                if (!limited || list.size() \u003c limit - 1) {\n                    list.add(substring(off, next));\n                    off \u003d next + 1;\n                } else {    // last one\n                    //assert (list.size() \u003d\u003d limit - 1);\n                    int last \u003d length();\n                    list.add(substring(off, last));\n                    off \u003d last;\n                    break;\n                }\n            }\n            // If no match was found, return this\n            if (off \u003d\u003d 0)\n                return new String[]{this};\n\n            // Add remaining segment\n            if (!limited || list.size() \u003c limit)\n                list.add(substring(off, length()));\n\n            // Construct result\n            int resultSize \u003d list.size();\n            if (limit \u003d\u003d 0) {\n                while (resultSize \u003e 0 \u0026\u0026 list.get(resultSize - 1).isEmpty()) {\n                    resultSize--;\n                }\n            }\n            String[] result \u003d new String[resultSize];\n            return list.subList(0, resultSize).toArray(result);\n        }\n        return Pattern.compile(regex).split(this, limit);\n    }\n\n    /**\n     * Splits this string around matches of the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e This method works as if by invoking the two-argument {@link\n     * #split(String, int) split} method with the given expression and a limit\n     * argument of zero.  Trailing empty strings are therefore not included in\n     * the resulting array.\n     *\n     * \u003cp\u003e The string {@code \"boo:and:foo\"}, for example, yields the following\n     * results with these expressions:\n     *\n     * \u003cblockquote\u003e\u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eSplit examples showing regex and result\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *  \u003cth scope\u003d\"col\"\u003eRegex\u003c/th\u003e\n     *  \u003cth scope\u003d\"col\"\u003eResult\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" style\u003d\"text-weight:normal\"\u003e:\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" style\u003d\"text-weight:normal\"\u003eo\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\u003c/blockquote\u003e\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     */\n    public String[] split(String regex) {\n        return split(regex, 0);\n    }\n\n    /**\n     * Returns a new String composed of copies of the\n     * {@code CharSequence elements} joined together with a copy of\n     * the specified {@code delimiter}.\n     *\n     * \u003cblockquote\u003eFor example,\n     * \u003cpre\u003e{@code\n     *     String message \u003d String.join(\"-\", \"Java\", \"is\", \"cool\");\n     *     // message returned is: \"Java-is-cool\"\n     * }\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * Note that if an element is null, then {@code \"null\"} is added.\n     *\n     * @param  delimiter the delimiter that separates each element\n     * @param  elements the elements to join together.\n     *\n     * @return a new {@code String} that is composed of the {@code elements}\n     *         separated by the {@code delimiter}\n     *\n     * @throws NullPointerException If {@code delimiter} or {@code elements}\n     *         is {@code null}\n     *\n     * @see java.util.StringJoiner\n     * @since 1.8\n     */\n    public static String join(CharSequence delimiter, CharSequence... elements) {\n        var delim \u003d delimiter.toString();\n        var elems \u003d new String[elements.length];\n        for (int i \u003d 0; i \u003c elements.length; i++) {\n            elems[i] \u003d String.valueOf(elements[i]);\n        }\n        return join(\"\", \"\", delim, elems, elems.length);\n    }\n\n    /**\n     * Designated join routine.\n     *\n     * @param prefix the non-null prefix\n     * @param suffix the non-null suffix\n     * @param delimiter the non-null delimiter\n     * @param elements the non-null array of non-null elements\n     * @param size the number of elements in the array (\u003c\u003d elements.length)\n     * @return the joined string\n     */\n    @ForceInline\n    static String join(String prefix, String suffix, String delimiter, String[] elements, int size) {\n        int icoder \u003d prefix.coder() | suffix.coder();\n        long len \u003d (long) prefix.length() + suffix.length();\n        if (size \u003e 1) { // when there are more than one element, size - 1 delimiters will be emitted\n            len +\u003d (long) (size - 1) * delimiter.length();\n            icoder |\u003d delimiter.coder();\n        }\n        // assert len \u003e 0L; // max: (long) Integer.MAX_VALUE \u003c\u003c 32\n        // following loop wil add max: (long) Integer.MAX_VALUE * Integer.MAX_VALUE to len\n        // so len can overflow at most once\n        for (int i \u003d 0; i \u003c size; i++) {\n            var el \u003d elements[i];\n            len +\u003d el.length();\n            icoder |\u003d el.coder();\n        }\n        byte coder \u003d (byte) icoder;\n        // long len overflow check, char -\u003e byte length, int len overflow check\n        if (len \u003c 0L || (len \u003c\u003c\u003d coder) !\u003d (int) len) {\n            throw new OutOfMemoryError(\"Requested string length exceeds VM limit\");\n        }\n        byte[] value \u003d StringConcatHelper.newArray(len);\n\n        int off \u003d 0;\n        prefix.getBytes(value, off, coder); off +\u003d prefix.length();\n        if (size \u003e 0) {\n            var el \u003d elements[0];\n            el.getBytes(value, off, coder); off +\u003d el.length();\n            for (int i \u003d 1; i \u003c size; i++) {\n                delimiter.getBytes(value, off, coder); off +\u003d delimiter.length();\n                el \u003d elements[i];\n                el.getBytes(value, off, coder); off +\u003d el.length();\n            }\n        }\n        suffix.getBytes(value, off, coder);\n        // assert off + suffix.length() \u003d\u003d value.length \u003e\u003e coder;\n\n        return new String(value, coder);\n    }\n\n    /**\n     * Returns a new {@code String} composed of copies of the\n     * {@code CharSequence elements} joined together with a copy of the\n     * specified {@code delimiter}.\n     *\n     * \u003cblockquote\u003eFor example,\n     * \u003cpre\u003e{@code\n     *     List\u003cString\u003e strings \u003d List.of(\"Java\", \"is\", \"cool\");\n     *     String message \u003d String.join(\" \", strings);\n     *     // message returned is: \"Java is cool\"\n     *\n     *     Set\u003cString\u003e strings \u003d\n     *         new LinkedHashSet\u003c\u003e(List.of(\"Java\", \"is\", \"very\", \"cool\"));\n     *     String message \u003d String.join(\"-\", strings);\n     *     // message returned is: \"Java-is-very-cool\"\n     * }\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * Note that if an individual element is {@code null}, then {@code \"null\"} is added.\n     *\n     * @param  delimiter a sequence of characters that is used to separate each\n     *         of the {@code elements} in the resulting {@code String}\n     * @param  elements an {@code Iterable} that will have its {@code elements}\n     *         joined together.\n     *\n     * @return a new {@code String} that is composed from the {@code elements}\n     *         argument\n     *\n     * @throws NullPointerException If {@code delimiter} or {@code elements}\n     *         is {@code null}\n     *\n     * @see    #join(CharSequence,CharSequence...)\n     * @see    java.util.StringJoiner\n     * @since 1.8\n     */\n    public static String join(CharSequence delimiter,\n            Iterable\u003c? extends CharSequence\u003e elements) {\n        Objects.requireNonNull(delimiter);\n        Objects.requireNonNull(elements);\n        var delim \u003d delimiter.toString();\n        var elems \u003d new String[8];\n        int size \u003d 0;\n        for (CharSequence cs: elements) {\n            if (size \u003e\u003d elems.length) {\n                elems \u003d Arrays.copyOf(elems, elems.length \u003c\u003c 1);\n            }\n            elems[size++] \u003d String.valueOf(cs);\n        }\n        return join(\"\", \"\", delim, elems, size);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to lower\n     * case using the rules of the given {@code Locale}.  Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * {@code String} may be a different length than the original {@code String}.\n     * \u003cp\u003e\n     * Examples of lowercase  mappings are in the following table:\n     * \u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eLowercase mapping examples showing language code of locale, upper case, lower case, and description\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLanguage Code of Locale\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eUpper Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLower Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0130\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0069\u003c/td\u003e\n     *   \u003ctd\u003ecapital letter I with dot above -\u0026gt; small letter i\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0049\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0131\u003c/td\u003e\n     *   \u003ctd\u003ecapital letter I -\u0026gt; small letter dotless i \u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003eFrench Fries\u003c/th\u003e\n     *   \u003ctd\u003efrench fries\u003c/td\u003e\n     *   \u003ctd\u003elowercased all chars in String\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\n     *       \u0026Iota;\u0026Chi;\u0026Theta;\u0026Upsilon;\u0026Sigma;\u003c/th\u003e\n     *   \u003ctd\u003e\u0026iota;\u0026chi;\u0026theta;\u0026upsilon;\u0026sigma;\u003c/td\u003e\n     *   \u003ctd\u003elowercased all chars in String\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\n     *\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to lowercase.\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toUpperCase(Locale)\n     * @since   1.1\n     */\n    public String toLowerCase(Locale locale) {\n        return isLatin1() ? StringLatin1.toLowerCase(this, value, locale)\n                          : StringUTF16.toLowerCase(this, value, locale);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to lower\n     * case using the rules of the default locale. This is equivalent to calling\n     * {@code toLowerCase(Locale.getDefault())}.\n     * \u003cp\u003e\n     * \u003cb\u003eNote:\u003c/b\u003e This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, {@code \"TITLE\".toLowerCase()} in a Turkish locale\n     * returns {@code \"t\\u005Cu0131tle\"}, where \u0027\\u005Cu0131\u0027 is the\n     * LATIN SMALL LETTER DOTLESS I character.\n     * To obtain correct results for locale insensitive strings, use\n     * {@code toLowerCase(Locale.ROOT)}.\n     *\n     * @return  the {@code String}, converted to lowercase.\n     * @see     java.lang.String#toLowerCase(Locale)\n     */\n    public String toLowerCase() {\n        return toLowerCase(Locale.getDefault());\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to upper\n     * case using the rules of the given {@code Locale}. Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * {@code String} may be a different length than the original {@code String}.\n     * \u003cp\u003e\n     * Examples of locale-sensitive and 1:M case mappings are in the following table.\n     *\n     * \u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eExamples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLanguage Code of Locale\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLower Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eUpper Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0069\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0130\u003c/td\u003e\n     *   \u003ctd\u003esmall letter i -\u0026gt; capital letter I with dot above\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0131\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0049\u003c/td\u003e\n     *   \u003ctd\u003esmall letter dotless i -\u0026gt; capital letter I\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u00df\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0053 \u0026#92;u0053\u003c/td\u003e\n     *   \u003ctd\u003esmall letter sharp s -\u0026gt; two letters: SS\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003eFahrvergn\u0026uuml;gen\u003c/th\u003e\n     *   \u003ctd\u003eFAHRVERGN\u0026Uuml;GEN\u003c/td\u003e\n     *   \u003ctd\u003e\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to uppercase.\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toLowerCase(Locale)\n     * @since   1.1\n     */\n    public String toUpperCase(Locale locale) {\n        return isLatin1() ? StringLatin1.toUpperCase(this, value, locale)\n                          : StringUTF16.toUpperCase(this, value, locale);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to upper\n     * case using the rules of the default locale. This method is equivalent to\n     * {@code toUpperCase(Locale.getDefault())}.\n     * \u003cp\u003e\n     * \u003cb\u003eNote:\u003c/b\u003e This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, {@code \"title\".toUpperCase()} in a Turkish locale\n     * returns {@code \"T\\u005Cu0130TLE\"}, where \u0027\\u005Cu0130\u0027 is the\n     * LATIN CAPITAL LETTER I WITH DOT ABOVE character.\n     * To obtain correct results for locale insensitive strings, use\n     * {@code toUpperCase(Locale.ROOT)}.\n     *\n     * @return  the {@code String}, converted to uppercase.\n     * @see     java.lang.String#toUpperCase(Locale)\n     */\n    public String toUpperCase() {\n        return toUpperCase(Locale.getDefault());\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * and trailing space removed, where space is defined\n     * as any character whose codepoint is less than or equal to\n     * {@code \u0027U+0020\u0027} (the space character).\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty character\n     * sequence, or the first and last characters of character sequence\n     * represented by this {@code String} object both have codes\n     * that are not space (as defined above), then a\n     * reference to this {@code String} object is returned.\n     * \u003cp\u003e\n     * Otherwise, if all characters in this string are space (as\n     * defined above), then a  {@code String} object representing an\n     * empty string is returned.\n     * \u003cp\u003e\n     * Otherwise, let \u003ci\u003ek\u003c/i\u003e be the index of the first character in the\n     * string whose code is not a space (as defined above) and let\n     * \u003ci\u003em\u003c/i\u003e be the index of the last character in the string whose code\n     * is not a space (as defined above). A {@code String}\n     * object is returned, representing the substring of this string that\n     * begins with the character at index \u003ci\u003ek\u003c/i\u003e and ends with the\n     * character at index \u003ci\u003em\u003c/i\u003e-that is, the result of\n     * {@code this.substring(k, m + 1)}.\n     * \u003cp\u003e\n     * This method may be used to trim space (as defined above) from\n     * the beginning and end of a string.\n     *\n     * @return  a string whose value is this string, with all leading\n     *          and trailing space removed, or this string if it\n     *          has no leading or trailing space.\n     */\n    public String trim() {\n        String ret \u003d isLatin1() ? StringLatin1.trim(value)\n                                : StringUTF16.trim(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * and trailing {@linkplain Character#isWhitespace(int) white space}\n     * removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all code points in this string are\n     * {@linkplain Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point that is not a {@linkplain Character#isWhitespace(int) white space}\n     * up to and including the last code point that is not a\n     * {@linkplain Character#isWhitespace(int) white space}.\n     * \u003cp\u003e\n     * This method may be used to strip\n     * {@linkplain Character#isWhitespace(int) white space} from\n     * the beginning and end of a string.\n     *\n     * @return  a string whose value is this string, with all leading\n     *          and trailing white space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String strip() {\n        String ret \u003d isLatin1() ? StringLatin1.strip(value)\n                                : StringUTF16.strip(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * {@linkplain Character#isWhitespace(int) white space} removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all code points in this string are\n     * {@linkplain Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point that is not a {@linkplain Character#isWhitespace(int) white space}\n     * up to and including the last code point of this string.\n     * \u003cp\u003e\n     * This method may be used to trim\n     * {@linkplain Character#isWhitespace(int) white space} from\n     * the beginning of a string.\n     *\n     * @return  a string whose value is this string, with all leading white\n     *          space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String stripLeading() {\n        String ret \u003d isLatin1() ? StringLatin1.stripLeading(value)\n                                : StringUTF16.stripLeading(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all trailing\n     * {@linkplain Character#isWhitespace(int) white space} removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all characters in this string are\n     * {@linkplain Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point of this string up to and including the last code point\n     * that is not a {@linkplain Character#isWhitespace(int) white space}.\n     * \u003cp\u003e\n     * This method may be used to trim\n     * {@linkplain Character#isWhitespace(int) white space} from\n     * the end of a string.\n     *\n     * @return  a string whose value is this string, with all trailing white\n     *          space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String stripTrailing() {\n        String ret \u003d isLatin1() ? StringLatin1.stripTrailing(value)\n                                : StringUTF16.stripTrailing(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns {@code true} if the string is empty or contains only\n     * {@linkplain Character#isWhitespace(int) white space} codepoints,\n     * otherwise {@code false}.\n     *\n     * @return {@code true} if the string is empty or contains only\n     *         {@linkplain Character#isWhitespace(int) white space} codepoints,\n     *         otherwise {@code false}\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public boolean isBlank() {\n        return indexOfNonWhitespace() \u003d\u003d length();\n    }\n\n    /**\n     * Returns a stream of lines extracted from this string,\n     * separated by line terminators.\n     * \u003cp\u003e\n     * A \u003ci\u003eline terminator\u003c/i\u003e is one of the following:\n     * a line feed character {@code \"\\n\"} (U+000A),\n     * a carriage return character {@code \"\\r\"} (U+000D),\n     * or a carriage return followed immediately by a line feed\n     * {@code \"\\r\\n\"} (U+000D U+000A).\n     * \u003cp\u003e\n     * A \u003ci\u003eline\u003c/i\u003e is either a sequence of zero or more characters\n     * followed by a line terminator, or it is a sequence of one or\n     * more characters followed by the end of the string. A\n     * line does not include the line terminator.\n     * \u003cp\u003e\n     * The stream returned by this method contains the lines from\n     * this string in the order in which they occur.\n     *\n     * @apiNote This definition of \u003ci\u003eline\u003c/i\u003e implies that an empty\n     *          string has zero lines and that there is no empty line\n     *          following a line terminator at the end of a string.\n     *\n     * @implNote This method provides better performance than\n     *           split(\"\\R\") by supplying elements lazily and\n     *           by faster search of new line terminators.\n     *\n     * @return  the stream of lines extracted from this string\n     *\n     * @since 11\n     */\n    public Stream\u003cString\u003e lines() {\n        return isLatin1() ? StringLatin1.lines(value) : StringUTF16.lines(value);\n    }\n\n    /**\n     * Adjusts the indentation of each line of this string based on the value of\n     * {@code n}, and normalizes line termination characters.\n     * \u003cp\u003e\n     * This string is conceptually separated into lines using\n     * {@link String#lines()}. Each line is then adjusted as described below\n     * and then suffixed with a line feed {@code \"\\n\"} (U+000A). The resulting\n     * lines are then concatenated and returned.\n     * \u003cp\u003e\n     * If {@code n \u003e 0} then {@code n} spaces (U+0020) are inserted at the\n     * beginning of each line.\n     * \u003cp\u003e\n     * If {@code n \u003c 0} then up to {@code n}\n     * {@linkplain Character#isWhitespace(int) white space characters} are removed\n     * from the beginning of each line. If a given line does not contain\n     * sufficient white space then all leading\n     * {@linkplain Character#isWhitespace(int) white space characters} are removed.\n     * Each white space character is treated as a single character. In\n     * particular, the tab character {@code \"\\t\"} (U+0009) is considered a\n     * single character; it is not expanded.\n     * \u003cp\u003e\n     * If {@code n \u003d\u003d 0} then the line remains unchanged. However, line\n     * terminators are still normalized.\n     *\n     * @param n  number of leading\n     *           {@linkplain Character#isWhitespace(int) white space characters}\n     *           to add or remove\n     *\n     * @return string with indentation adjusted and line endings normalized\n     *\n     * @see String#lines()\n     * @see String#isBlank()\n     * @see Character#isWhitespace(int)\n     *\n     * @since 12\n     */\n    public String indent(int n) {\n        if (isEmpty()) {\n            return \"\";\n        }\n        Stream\u003cString\u003e stream \u003d lines();\n        if (n \u003e 0) {\n            final String spaces \u003d \" \".repeat(n);\n            stream \u003d stream.map(s -\u003e spaces + s);\n        } else if (n \u003d\u003d Integer.MIN_VALUE) {\n            stream \u003d stream.map(s -\u003e s.stripLeading());\n        } else if (n \u003c 0) {\n            stream \u003d stream.map(s -\u003e s.substring(Math.min(-n, s.indexOfNonWhitespace())));\n        }\n        return stream.collect(Collectors.joining(\"\\n\", \"\", \"\\n\"));\n    }\n\n    private int indexOfNonWhitespace() {\n        return isLatin1() ? StringLatin1.indexOfNonWhitespace(value)\n                          : StringUTF16.indexOfNonWhitespace(value);\n    }\n\n    private int lastIndexOfNonWhitespace() {\n        return isLatin1() ? StringLatin1.lastIndexOfNonWhitespace(value)\n                          : StringUTF16.lastIndexOfNonWhitespace(value);\n    }\n\n    /**\n     * Returns a string whose value is this string, with incidental\n     * {@linkplain Character#isWhitespace(int) white space} removed from\n     * the beginning and end of every line.\n     * \u003cp\u003e\n     * Incidental {@linkplain Character#isWhitespace(int) white space}\n     * is often present in a text block to align the content with the opening\n     * delimiter. For example, in the following code, dots represent incidental\n     * {@linkplain Character#isWhitespace(int) white space}:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * String html \u003d \"\"\"\n     * ..............\u0026lt;html\u0026gt;\n     * ..............    \u0026lt;body\u0026gt;\n     * ..............        \u0026lt;p\u0026gt;Hello, world\u0026lt;/p\u0026gt;\n     * ..............    \u0026lt;/body\u0026gt;\n     * ..............\u0026lt;/html\u0026gt;\n     * ..............\"\"\";\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * This method treats the incidental\n     * {@linkplain Character#isWhitespace(int) white space} as indentation to be\n     * stripped, producing a string that preserves the relative indentation of\n     * the content. Using | to visualize the start of each line of the string:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * |\u0026lt;html\u0026gt;\n     * |    \u0026lt;body\u0026gt;\n     * |        \u0026lt;p\u0026gt;Hello, world\u0026lt;/p\u0026gt;\n     * |    \u0026lt;/body\u0026gt;\n     * |\u0026lt;/html\u0026gt;\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * First, the individual lines of this string are extracted. A \u003ci\u003eline\u003c/i\u003e\n     * is a sequence of zero or more characters followed by either a line\n     * terminator or the end of the string.\n     * If the string has at least one line terminator, the last line consists\n     * of the characters between the last terminator and the end of the string.\n     * Otherwise, if the string has no terminators, the last line is the start\n     * of the string to the end of the string, in other words, the entire\n     * string.\n     * A line does not include the line terminator.\n     * \u003cp\u003e\n     * Then, the \u003ci\u003eminimum indentation\u003c/i\u003e (min) is determined as follows:\n     * \u003cul\u003e\n     *   \u003cli\u003e\u003cp\u003eFor each non-blank line (as defined by {@link String#isBlank()}),\n     *   the leading {@linkplain Character#isWhitespace(int) white space}\n     *   characters are counted.\u003c/p\u003e\n     *   \u003c/li\u003e\n     *   \u003cli\u003e\u003cp\u003eThe leading {@linkplain Character#isWhitespace(int) white space}\n     *   characters on the last line are also counted even if\n     *   {@linkplain String#isBlank() blank}.\u003c/p\u003e\n     *   \u003c/li\u003e\n     * \u003c/ul\u003e\n     * \u003cp\u003eThe \u003ci\u003emin\u003c/i\u003e value is the smallest of these counts.\n     * \u003cp\u003e\n     * For each {@linkplain String#isBlank() non-blank} line, \u003ci\u003emin\u003c/i\u003e leading\n     * {@linkplain Character#isWhitespace(int) white space} characters are\n     * removed, and any trailing {@linkplain Character#isWhitespace(int) white\n     * space} characters are removed. {@linkplain String#isBlank() Blank} lines\n     * are replaced with the empty string.\n     *\n     * \u003cp\u003e\n     * Finally, the lines are joined into a new string, using the LF character\n     * {@code \"\\n\"} (U+000A) to separate lines.\n     *\n     * @apiNote\n     * This method\u0027s primary purpose is to shift a block of lines as far as\n     * possible to the left, while preserving relative indentation. Lines\n     * that were indented the least will thus have no leading\n     * {@linkplain Character#isWhitespace(int) white space}.\n     * The result will have the same number of line terminators as this string.\n     * If this string ends with a line terminator then the result will end\n     * with a line terminator.\n     *\n     * @implSpec\n     * This method treats all {@linkplain Character#isWhitespace(int) white space}\n     * characters as having equal width. As long as the indentation on every\n     * line is consistently composed of the same character sequences, then the\n     * result will be as described above.\n     *\n     * @return string with incidental indentation removed and line\n     *         terminators normalized\n     *\n     * @see String#lines()\n     * @see String#isBlank()\n     * @see String#indent(int)\n     * @see Character#isWhitespace(int)\n     *\n     * @since 15\n     *\n     */\n    public String stripIndent() {\n        int length \u003d length();\n        if (length \u003d\u003d 0) {\n            return \"\";\n        }\n        char lastChar \u003d charAt(length - 1);\n        boolean optOut \u003d lastChar \u003d\u003d \u0027\\n\u0027 || lastChar \u003d\u003d \u0027\\r\u0027;\n        List\u003cString\u003e lines \u003d lines().toList();\n        final int outdent \u003d optOut ? 0 : outdent(lines);\n        return lines.stream()\n            .map(line -\u003e {\n                int firstNonWhitespace \u003d line.indexOfNonWhitespace();\n                int lastNonWhitespace \u003d line.lastIndexOfNonWhitespace();\n                int incidentalWhitespace \u003d Math.min(outdent, firstNonWhitespace);\n                return firstNonWhitespace \u003e lastNonWhitespace\n                    ? \"\" : line.substring(incidentalWhitespace, lastNonWhitespace);\n            })\n            .collect(Collectors.joining(\"\\n\", \"\", optOut ? \"\\n\" : \"\"));\n    }\n\n    private static int outdent(List\u003cString\u003e lines) {\n        // Note: outdent is guaranteed to be zero or positive number.\n        // If there isn\u0027t a non-blank line then the last must be blank\n        int outdent \u003d Integer.MAX_VALUE;\n        for (String line : lines) {\n            int leadingWhitespace \u003d line.indexOfNonWhitespace();\n            if (leadingWhitespace !\u003d line.length()) {\n                outdent \u003d Integer.min(outdent, leadingWhitespace);\n            }\n        }\n        String lastLine \u003d lines.get(lines.size() - 1);\n        if (lastLine.isBlank()) {\n            outdent \u003d Integer.min(outdent, lastLine.length());\n        }\n        return outdent;\n    }\n\n    /**\n     * Returns a string whose value is this string, with escape sequences\n     * translated as if in a string literal.\n     * \u003cp\u003e\n     * Escape sequences are translated as follows;\n     * \u003ctable class\u003d\"striped\"\u003e\n     *   \u003ccaption style\u003d\"display:none\"\u003eTranslation\u003c/caption\u003e\n     *   \u003cthead\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"col\"\u003eEscape\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eName\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eTranslation\u003c/th\u003e\n     *   \u003c/tr\u003e\n     *   \u003c/thead\u003e\n     *   \u003ctbody\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005Cb}\u003c/th\u003e\n     *     \u003ctd\u003ebackspace\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+0008}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005Ct}\u003c/th\u003e\n     *     \u003ctd\u003ehorizontal tab\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+0009}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005Cn}\u003c/th\u003e\n     *     \u003ctd\u003eline feed\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+000A}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005Cf}\u003c/th\u003e\n     *     \u003ctd\u003eform feed\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+000C}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005Cr}\u003c/th\u003e\n     *     \u003ctd\u003ecarriage return\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+000D}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005Cs}\u003c/th\u003e\n     *     \u003ctd\u003espace\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+0020}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005C\"}\u003c/th\u003e\n     *     \u003ctd\u003edouble quote\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+0022}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005C\u0027}\u003c/th\u003e\n     *     \u003ctd\u003esingle quote\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+0027}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005C\\u005C}\u003c/th\u003e\n     *     \u003ctd\u003ebackslash\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+005C}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005C0 - \\u005C377}\u003c/th\u003e\n     *     \u003ctd\u003eoctal escape\u003c/td\u003e\n     *     \u003ctd\u003ecode point equivalents\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005C\u003cline-terminator\u003e}\u003c/th\u003e\n     *     \u003ctd\u003econtinuation\u003c/td\u003e\n     *     \u003ctd\u003ediscard\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003c/tbody\u003e\n     * \u003c/table\u003e\n     *\n     * @implNote\n     * This method does \u003cem\u003enot\u003c/em\u003e translate Unicode escapes such as \"{@code \\u005cu2022}\".\n     * Unicode escapes are translated by the Java compiler when reading input characters and\n     * are not part of the string literal specification.\n     *\n     * @throws IllegalArgumentException when an escape sequence is malformed.\n     *\n     * @return String with escape sequences translated.\n     *\n     * @jls 3.10.7 Escape Sequences\n     *\n     * @since 15\n     */\n    public String translateEscapes() {\n        if (isEmpty()) {\n            return \"\";\n        }\n        char[] chars \u003d toCharArray();\n        int length \u003d chars.length;\n        int from \u003d 0;\n        int to \u003d 0;\n        while (from \u003c length) {\n            char ch \u003d chars[from++];\n            if (ch \u003d\u003d \u0027\\\\\u0027) {\n                ch \u003d from \u003c length ? chars[from++] : \u0027\\0\u0027;\n                switch (ch) {\n                case \u0027b\u0027:\n                    ch \u003d \u0027\\b\u0027;\n                    break;\n                case \u0027f\u0027:\n                    ch \u003d \u0027\\f\u0027;\n                    break;\n                case \u0027n\u0027:\n                    ch \u003d \u0027\\n\u0027;\n                    break;\n                case \u0027r\u0027:\n                    ch \u003d \u0027\\r\u0027;\n                    break;\n                case \u0027s\u0027:\n                    ch \u003d \u0027 \u0027;\n                    break;\n                case \u0027t\u0027:\n                    ch \u003d \u0027\\t\u0027;\n                    break;\n                case \u0027\\\u0027\u0027:\n                case \u0027\\\"\u0027:\n                case \u0027\\\\\u0027:\n                    // as is\n                    break;\n                case \u00270\u0027: case \u00271\u0027: case \u00272\u0027: case \u00273\u0027:\n                case \u00274\u0027: case \u00275\u0027: case \u00276\u0027: case \u00277\u0027:\n                    int limit \u003d Integer.min(from + (ch \u003c\u003d \u00273\u0027 ? 2 : 1), length);\n                    int code \u003d ch - \u00270\u0027;\n                    while (from \u003c limit) {\n                        ch \u003d chars[from];\n                        if (ch \u003c \u00270\u0027 || \u00277\u0027 \u003c ch) {\n                            break;\n                        }\n                        from++;\n                        code \u003d (code \u003c\u003c 3) | (ch - \u00270\u0027);\n                    }\n                    ch \u003d (char)code;\n                    break;\n                case \u0027\\n\u0027:\n                    continue;\n                case \u0027\\r\u0027:\n                    if (from \u003c length \u0026\u0026 chars[from] \u003d\u003d \u0027\\n\u0027) {\n                        from++;\n                    }\n                    continue;\n                default: {\n                    String msg \u003d String.format(\n                        \"Invalid escape sequence: \\\\%c \\\\\\\\u%04X\",\n                        ch, (int)ch);\n                    throw new IllegalArgumentException(msg);\n                }\n                }\n            }\n\n            chars[to++] \u003d ch;\n        }\n\n        return new String(chars, 0, to);\n    }\n\n    /**\n     * This method allows the application of a function to {@code this}\n     * string. The function should expect a single String argument\n     * and produce an {@code R} result.\n     * \u003cp\u003e\n     * Any exception thrown by {@code f.apply()} will be propagated to the\n     * caller.\n     *\n     * @param f    a function to apply\n     *\n     * @param \u003cR\u003e  the type of the result\n     *\n     * @return     the result of applying the function to this string\n     *\n     * @see java.util.function.Function\n     *\n     * @since 12\n     */\n    public \u003cR\u003e R transform(Function\u003c? super String, ? extends R\u003e f) {\n        return f.apply(this);\n    }\n\n    /**\n     * This object (which is already a string!) is itself returned.\n     *\n     * @return  the string itself.\n     */\n    public String toString() {\n        return this;\n    }\n\n    /**\n     * Returns a stream of {@code int} zero-extending the {@code char} values\n     * from this sequence.  Any char which maps to a \u003ca\n     * href\u003d\"{@docRoot}/java.base/java/lang/Character.html#unicode\"\u003esurrogate code\n     * point\u003c/a\u003e is passed through uninterpreted.\n     *\n     * @return an IntStream of char values from this sequence\n     * @since 9\n     */\n    @Override\n    public IntStream chars() {\n        return StreamSupport.intStream(\n            isLatin1() ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n                       : new StringUTF16.CharsSpliterator(value, Spliterator.IMMUTABLE),\n            false);\n    }\n\n\n    /**\n     * Returns a stream of code point values from this sequence.  Any surrogate\n     * pairs encountered in the sequence are combined as if by {@linkplain\n     * Character#toCodePoint Character.toCodePoint} and the result is passed\n     * to the stream. Any other code units, including ordinary BMP characters,\n     * unpaired surrogates, and undefined code units, are zero-extended to\n     * {@code int} values which are then passed to the stream.\n     *\n     * @return an IntStream of Unicode code points from this sequence\n     * @since 9\n     */\n    @Override\n    public IntStream codePoints() {\n        return StreamSupport.intStream(\n            isLatin1() ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n                       : new StringUTF16.CodePointsSpliterator(value, Spliterator.IMMUTABLE),\n            false);\n    }\n\n    /**\n     * Converts this string to a new character array.\n     *\n     * @return  a newly allocated character array whose length is the length\n     *          of this string and whose contents are initialized to contain\n     *          the character sequence represented by this string.\n     */\n    public char[] toCharArray() {\n        return isLatin1() ? StringLatin1.toChars(value)\n                          : StringUTF16.toChars(value);\n    }\n\n    /**\n     * Returns a formatted string using the specified format string and\n     * arguments.\n     *\n     * \u003cp\u003e The locale always used is the one returned by {@link\n     * java.util.Locale#getDefault(java.util.Locale.Category)\n     * Locale.getDefault(Locale.Category)} with\n     * {@link java.util.Locale.Category#FORMAT FORMAT} category specified.\n     *\n     * @param  format\n     *         A \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003eformat string\u003c/a\u003e\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         \u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e.\n     *         The behaviour on a\n     *         {@code null} argument depends on the \u003ca\n     *         href\u003d\"../util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the \u003ca\n     *          href\u003d\"../util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the\n     *          formatter class specification.\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */\n    public static String format(String format, Object... args) {\n        return new Formatter().format(format, args).toString();\n    }\n\n    /**\n     * Returns a formatted string using the specified locale, format string,\n     * and arguments.\n     *\n     * @param  l\n     *         The {@linkplain java.util.Locale locale} to apply during\n     *         formatting.  If {@code l} is {@code null} then no localization\n     *         is applied.\n     *\n     * @param  format\n     *         A \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003eformat string\u003c/a\u003e\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         \u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e.\n     *         The behaviour on a\n     *         {@code null} argument depends on the\n     *         \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the \u003ca\n     *          href\u003d\"../util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the\n     *          formatter class specification\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */\n    public static String format(Locale l, String format, Object... args) {\n        return new Formatter(l).format(format, args).toString();\n    }\n\n    /**\n     * Formats using this string as the format string, and the supplied\n     * arguments.\n     *\n     * @implSpec This method is equivalent to {@code String.format(this, args)}.\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in this string.\n     *\n     * @return  A formatted string\n     *\n     * @see  java.lang.String#format(String,Object...)\n     * @see  java.util.Formatter\n     *\n     * @since 15\n     *\n     */\n    public String formatted(Object... args) {\n        return new Formatter().format(this, args).toString();\n    }\n\n    /**\n     * Returns the string representation of the {@code Object} argument.\n     *\n     * @param   obj   an {@code Object}.\n     * @return  if the argument is {@code null}, then a string equal to\n     *          {@code \"null\"}; otherwise, the value of\n     *          {@code obj.toString()} is returned.\n     * @see     java.lang.Object#toString()\n     */\n    public static String valueOf(Object obj) {\n        return (obj \u003d\u003d null) ? \"null\" : obj.toString();\n    }\n\n    /**\n     * Returns the string representation of the {@code char} array\n     * argument. The contents of the character array are copied; subsequent\n     * modification of the character array does not affect the returned\n     * string.\n     *\n     * @param   data     the character array.\n     * @return  a {@code String} that contains the characters of the\n     *          character array.\n     */\n    public static String valueOf(char data[]) {\n        return new String(data);\n    }\n\n    /**\n     * Returns the string representation of a specific subarray of the\n     * {@code char} array argument.\n     * \u003cp\u003e\n     * The {@code offset} argument is the index of the first\n     * character of the subarray. The {@code count} argument\n     * specifies the length of the subarray. The contents of the subarray\n     * are copied; subsequent modification of the character array does not\n     * affect the returned string.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a {@code String} that contains the characters of the\n     *          specified subarray of the character array.\n     * @throws    IndexOutOfBoundsException if {@code offset} is\n     *          negative, or {@code count} is negative, or\n     *          {@code offset+count} is larger than\n     *          {@code data.length}.\n     */\n    public static String valueOf(char data[], int offset, int count) {\n        return new String(data, offset, count);\n    }\n\n    /**\n     * Equivalent to {@link #valueOf(char[], int, int)}.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a {@code String} that contains the characters of the\n     *          specified subarray of the character array.\n     * @throws    IndexOutOfBoundsException if {@code offset} is\n     *          negative, or {@code count} is negative, or\n     *          {@code offset+count} is larger than\n     *          {@code data.length}.\n     */\n    public static String copyValueOf(char data[], int offset, int count) {\n        return new String(data, offset, count);\n    }\n\n    /**\n     * Equivalent to {@link #valueOf(char[])}.\n     *\n     * @param   data   the character array.\n     * @return  a {@code String} that contains the characters of the\n     *          character array.\n     */\n    public static String copyValueOf(char data[]) {\n        return new String(data);\n    }\n\n    /**\n     * Returns the string representation of the {@code boolean} argument.\n     *\n     * @param   b   a {@code boolean}.\n     * @return  if the argument is {@code true}, a string equal to\n     *          {@code \"true\"} is returned; otherwise, a string equal to\n     *          {@code \"false\"} is returned.\n     */\n    public static String valueOf(boolean b) {\n        return b ? \"true\" : \"false\";\n    }\n\n    /**\n     * Returns the string representation of the {@code char}\n     * argument.\n     *\n     * @param   c   a {@code char}.\n     * @return  a string of length {@code 1} containing\n     *          as its single character the argument {@code c}.\n     */\n    public static String valueOf(char c) {\n        if (COMPACT_STRINGS \u0026\u0026 StringLatin1.canEncode(c)) {\n            return new String(StringLatin1.toBytes(c), LATIN1);\n        }\n        return new String(StringUTF16.toBytes(c), UTF16);\n    }\n\n    /**\n     * Returns the string representation of the {@code int} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Integer.toString} method of one argument.\n     *\n     * @param   i   an {@code int}.\n     * @return  a string representation of the {@code int} argument.\n     * @see     java.lang.Integer#toString(int, int)\n     */\n    public static String valueOf(int i) {\n        return Integer.toString(i);\n    }\n\n    /**\n     * Returns the string representation of the {@code long} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Long.toString} method of one argument.\n     *\n     * @param   l   a {@code long}.\n     * @return  a string representation of the {@code long} argument.\n     * @see     java.lang.Long#toString(long)\n     */\n    public static String valueOf(long l) {\n        return Long.toString(l);\n    }\n\n    /**\n     * Returns the string representation of the {@code float} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Float.toString} method of one argument.\n     *\n     * @param   f   a {@code float}.\n     * @return  a string representation of the {@code float} argument.\n     * @see     java.lang.Float#toString(float)\n     */\n    public static String valueOf(float f) {\n        return Float.toString(f);\n    }\n\n    /**\n     * Returns the string representation of the {@code double} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Double.toString} method of one argument.\n     *\n     * @param   d   a {@code double}.\n     * @return  a  string representation of the {@code double} argument.\n     * @see     java.lang.Double#toString(double)\n     */\n    public static String valueOf(double d) {\n        return Double.toString(d);\n    }\n\n    /**\n     * Returns a canonical representation for the string object.\n     * \u003cp\u003e\n     * A pool of strings, initially empty, is maintained privately by the\n     * class {@code String}.\n     * \u003cp\u003e\n     * When the intern method is invoked, if the pool already contains a\n     * string equal to this {@code String} object as determined by\n     * the {@link #equals(Object)} method, then the string from the pool is\n     * returned. Otherwise, this {@code String} object is added to the\n     * pool and a reference to this {@code String} object is returned.\n     * \u003cp\u003e\n     * It follows that for any two strings {@code s} and {@code t},\n     * {@code s.intern() \u003d\u003d t.intern()} is {@code true}\n     * if and only if {@code s.equals(t)} is {@code true}.\n     * \u003cp\u003e\n     * All literal strings and string-valued constant expressions are\n     * interned. String literals are defined in section {@jls 3.10.5} of the\n     * \u003ccite\u003eThe Java Language Specification\u003c/cite\u003e.\n     *\n     * @return  a string that has the same contents as this string, but is\n     *          guaranteed to be from a pool of unique strings.\n     */\n    public native String intern();\n\n    /**\n     * Returns a string whose value is the concatenation of this\n     * string repeated {@code count} times.\n     * \u003cp\u003e\n     * If this string is empty or count is zero then the empty\n     * string is returned.\n     *\n     * @param   count number of times to repeat\n     *\n     * @return  A string composed of this string repeated\n     *          {@code count} times or the empty string if this\n     *          string is empty or count is zero\n     *\n     * @throws  IllegalArgumentException if the {@code count} is\n     *          negative.\n     *\n     * @since 11\n     */\n    public String repeat(int count) {\n        if (count \u003c 0) {\n            throw new IllegalArgumentException(\"count is negative: \" + count);\n        }\n        if (count \u003d\u003d 1) {\n            return this;\n        }\n        final int len \u003d value.length;\n        if (len \u003d\u003d 0 || count \u003d\u003d 0) {\n            return \"\";\n        }\n        if (Integer.MAX_VALUE / count \u003c len) {\n            throw new OutOfMemoryError(\"Required length exceeds implementation limit\");\n        }\n        if (len \u003d\u003d 1) {\n            final byte[] single \u003d new byte[count];\n            Arrays.fill(single, value[0]);\n            return new String(single, coder);\n        }\n        final int limit \u003d len * count;\n        final byte[] multiple \u003d new byte[limit];\n        System.arraycopy(value, 0, multiple, 0, len);\n        int copied \u003d len;\n        for (; copied \u003c limit - copied; copied \u003c\u003c\u003d 1) {\n            System.arraycopy(multiple, 0, multiple, copied, copied);\n        }\n        System.arraycopy(multiple, 0, multiple, copied, limit - copied);\n        return new String(multiple, coder);\n    }\n\n    ////////////////////////////////////////////////////////////////\n\n    /**\n     * Copy character bytes from this string into dst starting at dstBegin.\n     * This method doesn\u0027t perform any range checking.\n     *\n     * Invoker guarantees: dst is in UTF16 (inflate itself for asb), if two\n     * coders are different, and dst is big enough (range check)\n     *\n     * @param dstBegin  the char index, not offset of byte[]\n     * @param coder     the coder of dst[]\n     */\n    void getBytes(byte[] dst, int dstBegin, byte coder) {\n        if (coder() \u003d\u003d coder) {\n            System.arraycopy(value, 0, dst, dstBegin \u003c\u003c coder, value.length);\n        } else {    // this.coder \u003d\u003d LATIN \u0026\u0026 coder \u003d\u003d UTF16\n            StringLatin1.inflate(value, 0, dst, dstBegin, value.length);\n        }\n    }\n\n    /**\n     * Copy character bytes from this string into dst starting at dstBegin.\n     * This method doesn\u0027t perform any range checking.\n     *\n     * Invoker guarantees: dst is in UTF16 (inflate itself for asb), if two\n     * coders are different, and dst is big enough (range check)\n     *\n     * @param srcPos    the char index, not offset of byte[]\n     * @param dstBegin  the char index to start from\n     * @param coder     the coder of dst[]\n     * @param length    the amount of copied chars\n     */\n    void getBytes(byte[] dst, int srcPos, int dstBegin, byte coder, int length) {\n        if (coder() \u003d\u003d coder) {\n            System.arraycopy(value, srcPos \u003c\u003c coder, dst, dstBegin \u003c\u003c coder, length \u003c\u003c coder);\n        } else {    // this.coder \u003d\u003d LATIN \u0026\u0026 coder \u003d\u003d UTF16\n            StringLatin1.inflate(value, srcPos, dst, dstBegin, length);\n        }\n    }\n\n    /*\n     * Package private constructor. Trailing Void argument is there for\n     * disambiguating it against other (public) constructors.\n     *\n     * Stores the char[] value into a byte[] that each byte represents\n     * the8 low-order bits of the corresponding character, if the char[]\n     * contains only latin1 character. Or a byte[] that stores all\n     * characters in their byte sequences defined by the {@code StringUTF16}.\n     */\n    String(char[] value, int off, int len, Void sig) {\n        if (len \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS) {\n            byte[] val \u003d StringUTF16.compress(value, off, len);\n            if (val !\u003d null) {\n                this.value \u003d val;\n                this.coder \u003d LATIN1;\n                return;\n            }\n        }\n        this.coder \u003d UTF16;\n        this.value \u003d StringUTF16.toBytes(value, off, len);\n    }\n\n    /*\n     * Package private constructor. Trailing Void argument is there for\n     * disambiguating it against other (public) constructors.\n     */\n    String(AbstractStringBuilder asb, Void sig) {\n        byte[] val \u003d asb.getValue();\n        int length \u003d asb.length();\n        if (asb.isLatin1()) {\n            this.coder \u003d LATIN1;\n            this.value \u003d Arrays.copyOfRange(val, 0, length);\n        } else {\n            if (COMPACT_STRINGS) {\n                byte[] buf \u003d StringUTF16.compress(val, 0, length);\n                if (buf !\u003d null) {\n                    this.coder \u003d LATIN1;\n                    this.value \u003d buf;\n                    return;\n                }\n            }\n            this.coder \u003d UTF16;\n            this.value \u003d Arrays.copyOfRange(val, 0, length \u003c\u003c 1);\n        }\n    }\n\n   /*\n    * Package private constructor which shares value array for speed.\n    */\n    String(byte[] value, byte coder) {\n        this.value \u003d value;\n        this.coder \u003d coder;\n    }\n\n    byte coder() {\n        return COMPACT_STRINGS ? coder : UTF16;\n    }\n\n    byte[] value() {\n        return value;\n    }\n\n    boolean isLatin1() {\n        return COMPACT_STRINGS \u0026\u0026 coder \u003d\u003d LATIN1;\n    }\n\n    @Native static final byte LATIN1 \u003d 0;\n    @Native static final byte UTF16  \u003d 1;\n\n    /*\n     * StringIndexOutOfBoundsException  if {@code index} is\n     * negative or greater than or equal to {@code length}.\n     */\n    static void checkIndex(int index, int length) {\n        if (index \u003c 0 || index \u003e\u003d length) {\n            throw new StringIndexOutOfBoundsException(\"index \" + index +\n                                                      \", length \" + length);\n        }\n    }\n\n    /*\n     * StringIndexOutOfBoundsException  if {@code offset}\n     * is negative or greater than {@code length}.\n     */\n    static void checkOffset(int offset, int length) {\n        if (offset \u003c 0 || offset \u003e length) {\n            throw new StringIndexOutOfBoundsException(\"offset \" + offset +\n                                                      \", length \" + length);\n        }\n    }\n\n    /*\n     * Check {@code offset}, {@code count} against {@code 0} and {@code length}\n     * bounds.\n     *\n     * @throws  StringIndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative,\n     *          or {@code offset} is greater than {@code length - count}\n     */\n    static void checkBoundsOffCount(int offset, int count, int length) {\n        if (offset \u003c 0 || count \u003c 0 || offset \u003e length - count) {\n            throw new StringIndexOutOfBoundsException(\n                \"offset \" + offset + \", count \" + count + \", length \" + length);\n        }\n    }\n\n    /*\n     * Check {@code begin}, {@code end} against {@code 0} and {@code length}\n     * bounds.\n     *\n     * @throws  StringIndexOutOfBoundsException\n     *          If {@code begin} is negative, {@code begin} is greater than\n     *          {@code end}, or {@code end} is greater than {@code length}.\n     */\n    static void checkBoundsBeginEnd(int begin, int end, int length) {\n        if (begin \u003c 0 || begin \u003e end || end \u003e length) {\n            throw new StringIndexOutOfBoundsException(\n                \"begin \" + begin + \", end \" + end + \", length \" + length);\n        }\n    }\n\n    /**\n     * Returns the string representation of the {@code codePoint}\n     * argument.\n     *\n     * @param   codePoint a {@code codePoint}.\n     * @return  a string of length {@code 1} or {@code 2} containing\n     *          as its single character the argument {@code codePoint}.\n     * @throws IllegalArgumentException if the specified\n     *          {@code codePoint} is not a {@linkplain Character#isValidCodePoint\n     *          valid Unicode code point}.\n     */\n    static String valueOfCodePoint(int codePoint) {\n        if (COMPACT_STRINGS \u0026\u0026 StringLatin1.canEncode(codePoint)) {\n            return new String(StringLatin1.toBytes((char)codePoint), LATIN1);\n        } else if (Character.isBmpCodePoint(codePoint)) {\n            return new String(StringUTF16.toBytes((char)codePoint), UTF16);\n        } else if (Character.isSupplementaryCodePoint(codePoint)) {\n            return new String(StringUTF16.toBytesSupplementary(codePoint), UTF16);\n        }\n\n        throw new IllegalArgumentException(\n            format(\"Not a valid Unicode code point: 0x%X\", codePoint));\n    }\n\n    /**\n     * Returns an {@link Optional} containing the nominal descriptor for this\n     * instance, which is the instance itself.\n     *\n     * @return an {@link Optional} describing the {@linkplain String} instance\n     * @since 12\n     */\n    @Override\n    public Optional\u003cString\u003e describeConstable() {\n        return Optional.of(this);\n    }\n\n    /**\n     * Resolves this instance as a {@link ConstantDesc}, the result of which is\n     * the instance itself.\n     *\n     * @param lookup ignored\n     * @return the {@linkplain String} instance\n     * @since 12\n     */\n    @Override\n    public String resolveConstantDesc(MethodHandles.Lookup lookup) {\n        return this;\n    }\n\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:319)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 24 more

Oct 10, 2023 2:50:22 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/lang/String.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:329)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 24 more

2023.10.10 14:50:22 WARN  Using indexes to guess the definition of updated
2023.10.10 14:50:31 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\contains.scala
Exception in thread "pool-6-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:229)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023.10.10 14:51:45 WARN  Using indexes to guess the definition of Tree
2023.10.10 14:51:54 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\contains.scala
2023.10.10 14:51:54 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\contains.scala
2023.10.10 14:51:55 WARN  Using indexes to guess the definition of Node
2023.10.10 14:52:17 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\contains.scala
2023.10.10 14:52:18 WARN  Using indexes to guess the definition of FunSuite
2023.10.10 14:52:20 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:53:31 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:53:31 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:53:31 WARN  Using indexes to guess the definition of Path
2023.10.10 14:53:31 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:670)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 10, 2023 2:53:31 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.nio.file;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.nio.file.spi.FileSystemProvider;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\n/**\n * An object that may be used to locate a file in a file system. It will\n * typically represent a system dependent file path.\n *\n * \u003cp\u003e A {@code Path} represents a path that is hierarchical and composed of a\n * sequence of directory and file name elements separated by a special separator\n * or delimiter. A \u003cem\u003eroot component\u003c/em\u003e, that identifies a file system\n * hierarchy, may also be present. The name element that is \u003cem\u003efarthest\u003c/em\u003e\n * from the root of the directory hierarchy is the name of a file or directory.\n * The other name elements are directory names. A {@code Path} can represent a\n * root, a root and a sequence of names, or simply one or more name elements.\n * A {@code Path} is considered to be an \u003ci\u003eempty path\u003c/i\u003e if it consists\n * solely of one name element that is empty. Accessing a file using an\n * \u003ci\u003eempty path\u003c/i\u003e is equivalent to accessing the default directory of the\n * file system. {@code Path} defines the {@link #getFileName() getFileName},\n * {@link #getParent getParent}, {@link #getRoot getRoot}, and {@link #subpath\n * subpath} methods to access the path components or a subsequence of its name\n * elements.\n *\n * \u003cp\u003e In addition to accessing the components of a path, a {@code Path} also\n * defines the {@link #resolve(Path) resolve} and {@link #resolveSibling(Path)\n * resolveSibling} methods to combine paths. The {@link #relativize relativize}\n * method that can be used to construct a relative path between two paths.\n * Paths can be {@link #compareTo compared}, and tested against each other using\n * the {@link #startsWith startsWith} and {@link #endsWith endsWith} methods.\n *\n * \u003cp\u003e This interface extends {@link Watchable} interface so that a directory\n * located by a path can be {@link #register registered} with a {@link\n * WatchService} and entries in the directory watched. \u003c/p\u003e\n *\n * \u003cp\u003e \u003cb\u003eWARNING:\u003c/b\u003e This interface is only intended to be implemented by\n * those developing custom file system implementations. Methods may be added to\n * this interface in future releases. \u003c/p\u003e\n *\n * \u003ch2\u003eAccessing Files\u003c/h2\u003e\n * \u003cp\u003e Paths may be used with the {@link Files} class to operate on files,\n * directories, and other types of files. For example, suppose we want a {@link\n * java.io.BufferedReader} to read text from a file \"{@code access.log}\". The\n * file is located in a directory \"{@code logs}\" relative to the current working\n * directory and is UTF-8 encoded.\n * \u003cpre\u003e\n *     Path path \u003d FileSystems.getDefault().getPath(\"logs\", \"access.log\");\n *     BufferedReader reader \u003d Files.newBufferedReader(path, StandardCharsets.UTF_8);\n * \u003c/pre\u003e\n *\n * \u003ca id\u003d\"interop\"\u003e\u003c/a\u003e\u003ch2\u003eInteroperability\u003c/h2\u003e\n * \u003cp\u003e Paths associated with the default {@link\n * java.nio.file.spi.FileSystemProvider provider} are generally interoperable\n * with the {@link java.io.File java.io.File} class. Paths created by other\n * providers are unlikely to be interoperable with the abstract path names\n * represented by {@code java.io.File}. The {@link java.io.File#toPath toPath}\n * method may be used to obtain a {@code Path} from the abstract path name\n * represented by a {@code java.io.File} object. The resulting {@code Path} can\n * be used to operate on the same file as the {@code java.io.File} object. In\n * addition, the {@link #toFile toFile} method is useful to construct a {@code\n * File} from the {@code String} representation of a {@code Path}.\n *\n * \u003ch2\u003eConcurrency\u003c/h2\u003e\n * \u003cp\u003e Implementations of this interface are immutable and safe for use by\n * multiple concurrent threads.\n *\n * @since 1.7\n */\n\npublic interface Path\n    extends Comparable\u003cPath\u003e, Iterable\u003cPath\u003e, Watchable\n{\n    /**\n     * Returns a {@code Path} by converting a path string, or a sequence of\n     * strings that when joined form a path string. If {@code more} does not\n     * specify any elements then the value of the {@code first} parameter is\n     * the path string to convert. If {@code more} specifies one or more\n     * elements then each non-empty string, including {@code first}, is\n     * considered to be a sequence of name elements and is joined to form a\n     * path string. The details as to how the Strings are joined is provider\n     * specific but typically they will be joined using the\n     * {@link FileSystem#getSeparator name-separator} as the separator.\n     * For example, if the name separator is \"{@code /}\" and\n     * {@code getPath(\"/foo\",\"bar\",\"gus\")} is invoked, then the path string\n     * {@code \"/foo/bar/gus\"} is converted to a {@code Path}. A {@code Path}\n     * representing an empty path is returned if {@code first} is the empty\n     * string and {@code more} does not contain any non-empty strings.\n     *\n     * \u003cp\u003e The {@code Path} is obtained by invoking the {@link FileSystem#getPath\n     * getPath} method of the {@link FileSystems#getDefault default} {@link\n     * FileSystem}.\n     *\n     * \u003cp\u003e Note that while this method is very convenient, using it will imply\n     * an assumed reference to the default {@code FileSystem} and limit the\n     * utility of the calling code. Hence it should not be used in library code\n     * intended for flexible reuse. A more flexible alternative is to use an\n     * existing {@code Path} instance as an anchor, such as:\n     * \u003cpre\u003e{@code\n     *     Path dir \u003d ...\n     *     Path path \u003d dir.resolve(\"file\");\n     * }\u003c/pre\u003e\n     *\n     * @param   first\n     *          the path string or initial part of the path string\n     * @param   more\n     *          additional strings to be joined to form the path string\n     *\n     * @return  the resulting {@code Path}\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a {@code Path}\n     *\n     * @see FileSystem#getPath\n     *\n     * @since 11\n     */\n    public static Path of(String first, String... more) {\n        return FileSystems.getDefault().getPath(first, more);\n    }\n\n    /**\n     * Returns a {@code Path} by converting a URI.\n     *\n     * \u003cp\u003e This method iterates over the {@link FileSystemProvider#installedProviders()\n     * installed} providers to locate the provider that is identified by the\n     * URI {@link URI#getScheme scheme} of the given URI. URI schemes are\n     * compared without regard to case. If the provider is found then its {@link\n     * FileSystemProvider#getPath getPath} method is invoked to convert the\n     * URI.\n     *\n     * \u003cp\u003e In the case of the default provider, identified by the URI scheme\n     * \"file\", the given URI has a non-empty path component, and undefined query\n     * and fragment components. Whether the authority component may be present\n     * is platform specific. The returned {@code Path} is associated with the\n     * {@link FileSystems#getDefault default} file system.\n     *\n     * \u003cp\u003e The default provider provides a similar \u003cem\u003eround-trip\u003c/em\u003e guarantee\n     * to the {@link java.io.File} class. For a given {@code Path} \u003ci\u003ep\u003c/i\u003e it\n     * is guaranteed that\n     * \u003cblockquote\u003e{@code\n     * Path.of(}\u003ci\u003ep\u003c/i\u003e{@code .}{@link Path#toUri() toUri}{@code ()).equals(}\n     * \u003ci\u003ep\u003c/i\u003e{@code .}{@link Path#toAbsolutePath() toAbsolutePath}{@code ())}\n     * \u003c/blockquote\u003e\n     * so long as the original {@code Path}, the {@code URI}, and the new {@code\n     * Path} are all created in (possibly different invocations of) the same\n     * Java virtual machine. Whether other providers make any guarantees is\n     * provider specific and therefore unspecified.\n     *\n     * @param   uri\n     *          the URI to convert\n     *\n     * @return  the resulting {@code Path}\n     *\n     * @throws  IllegalArgumentException\n     *          if preconditions on the {@code uri} parameter do not hold. The\n     *          format of the URI is provider specific.\n     * @throws  FileSystemNotFoundException\n     *          The file system, identified by the URI, does not exist and\n     *          cannot be created automatically, or the provider identified by\n     *          the URI\u0027s scheme component is not installed\n     * @throws  SecurityException\n     *          if a security manager is installed and it denies an unspecified\n     *          permission to access the file system\n     *\n     * @since 11\n     */\n    public static Path of(URI uri) {\n        String scheme \u003d  uri.getScheme();\n        if (scheme \u003d\u003d null)\n            throw new IllegalArgumentException(\"Missing scheme\");\n\n        // check for default provider to avoid loading of installed providers\n        if (scheme.equalsIgnoreCase(\"file\"))\n            return FileSystems.getDefault().provider().getPath(uri);\n\n        // try to find provider\n        for (FileSystemProvider provider: FileSystemProvider.installedProviders()) {\n            if (provider.getScheme().equalsIgnoreCase(scheme)) {\n                return provider.getPath(uri);\n            }\n        }\n\n        throw new FileSystemNotFoundException(\"Provider \\\"\" + scheme + \"\\\" not installed\");\n    }\n\n    /**\n     * Returns the file system that created this object.\n     *\n     * @return  the file system that created this object\n     */\n    FileSystem getFileSystem();\n\n    /**\n     * Tells whether or not this path is absolute.\n     *\n     * \u003cp\u003e An absolute path is complete in that it doesn\u0027t need to be combined\n     * with other path information in order to locate a file.\n     *\n     * @return  {@code true} if, and only if, this path is absolute\n     */\n    boolean isAbsolute();\n\n    /**\n     * Returns the root component of this path as a {@code Path} object,\n     * or {@code null} if this path does not have a root component.\n     *\n     * @return  a path representing the root component of this path,\n     *          or {@code null}\n     */\n    Path getRoot();\n\n    /**\n     * Returns the name of the file or directory denoted by this path as a\n     * {@code Path} object. The file name is the \u003cem\u003efarthest\u003c/em\u003e element from\n     * the root in the directory hierarchy.\n     *\n     * @return  a path representing the name of the file or directory, or\n     *          {@code null} if this path has zero elements\n     */\n    Path getFileName();\n\n    /**\n     * Returns the \u003cem\u003eparent path\u003c/em\u003e, or {@code null} if this path does not\n     * have a parent.\n     *\n     * \u003cp\u003e The parent of this path object consists of this path\u0027s root\n     * component, if any, and each element in the path except for the\n     * \u003cem\u003efarthest\u003c/em\u003e from the root in the directory hierarchy. This method\n     * does not access the file system; the path or its parent may not exist.\n     * Furthermore, this method does not eliminate special names such as \".\"\n     * and \"..\" that may be used in some implementations. On UNIX for example,\n     * the parent of \"{@code /a/b/c}\" is \"{@code /a/b}\", and the parent of\n     * {@code \"x/y/.}\" is \"{@code x/y}\". This method may be used with the {@link\n     * #normalize normalize} method, to eliminate redundant names, for cases where\n     * \u003cem\u003eshell-like\u003c/em\u003e navigation is required.\n     *\n     * \u003cp\u003e If this path has more than one element, and no root component, then\n     * this method is equivalent to evaluating the expression:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * subpath(0,\u0026nbsp;getNameCount()-1);\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @return  a path representing the path\u0027s parent\n     */\n    Path getParent();\n\n    /**\n     * Returns the number of name elements in the path.\n     *\n     * @return  the number of elements in the path, or {@code 0} if this path\n     *          only represents a root component\n     */\n    int getNameCount();\n\n    /**\n     * Returns a name element of this path as a {@code Path} object.\n     *\n     * \u003cp\u003e The {@code index} parameter is the index of the name element to return.\n     * The element that is \u003cem\u003eclosest\u003c/em\u003e to the root in the directory hierarchy\n     * has index {@code 0}. The element that is \u003cem\u003efarthest\u003c/em\u003e from the root\n     * has index {@link #getNameCount count}{@code -1}.\n     *\n     * @param   index\n     *          the index of the element\n     *\n     * @return  the name element\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code index} is negative, {@code index} is greater than or\n     *          equal to the number of elements, or this path has zero name\n     *          elements\n     */\n    Path getName(int index);\n\n    /**\n     * Returns a relative {@code Path} that is a subsequence of the name\n     * elements of this path.\n     *\n     * \u003cp\u003e The {@code beginIndex} and {@code endIndex} parameters specify the\n     * subsequence of name elements. The name that is \u003cem\u003eclosest\u003c/em\u003e to the root\n     * in the directory hierarchy has index {@code 0}. The name that is\n     * \u003cem\u003efarthest\u003c/em\u003e from the root has index {@link #getNameCount\n     * count}{@code -1}. The returned {@code Path} object has the name elements\n     * that begin at {@code beginIndex} and extend to the element at index {@code\n     * endIndex-1}.\n     *\n     * @param   beginIndex\n     *          the index of the first element, inclusive\n     * @param   endIndex\n     *          the index of the last element, exclusive\n     *\n     * @return  a new {@code Path} object that is a subsequence of the name\n     *          elements in this {@code Path}\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code beginIndex} is negative, or greater than or equal to\n     *          the number of elements. If {@code endIndex} is less than or\n     *          equal to {@code beginIndex}, or larger than the number of elements.\n     */\n    Path subpath(int beginIndex, int endIndex);\n\n    /**\n     * Tests if this path starts with the given path.\n     *\n     * \u003cp\u003e This path \u003cem\u003estarts\u003c/em\u003e with the given path if this path\u0027s root\n     * component \u003cem\u003estarts\u003c/em\u003e with the root component of the given path,\n     * and this path starts with the same name elements as the given path.\n     * If the given path has more name elements than this path then {@code false}\n     * is returned.\n     *\n     * \u003cp\u003e Whether or not the root component of this path starts with the root\n     * component of the given path is file system specific. If this path does\n     * not have a root component and the given path has a root component then\n     * this path does not start with the given path.\n     *\n     * \u003cp\u003e If the given path is associated with a different {@code FileSystem}\n     * to this path then {@code false} is returned.\n     *\n     * @param   other\n     *          the given path\n     *\n     * @return  {@code true} if this path starts with the given path; otherwise\n     *          {@code false}\n     */\n    boolean startsWith(Path other);\n\n    /**\n     * Tests if this path starts with a {@code Path}, constructed by converting\n     * the given path string, in exactly the manner specified by the {@link\n     * #startsWith(Path) startsWith(Path)} method. On UNIX for example, the path\n     * \"{@code foo/bar}\" starts with \"{@code foo}\" and \"{@code foo/bar}\". It\n     * does not start with \"{@code f}\" or \"{@code fo}\".\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     startsWith(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the given path string\n     *\n     * @return  {@code true} if this path starts with the given path; otherwise\n     *          {@code false}\n     *\n     * @throws  InvalidPathException\n     *          If the path string cannot be converted to a Path.\n     */\n    default boolean startsWith(String other) {\n        return startsWith(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Tests if this path ends with the given path.\n     *\n     * \u003cp\u003e If the given path has \u003cem\u003eN\u003c/em\u003e elements, and no root component,\n     * and this path has \u003cem\u003eN\u003c/em\u003e or more elements, then this path ends with\n     * the given path if the last \u003cem\u003eN\u003c/em\u003e elements of each path, starting at\n     * the element farthest from the root, are equal.\n     *\n     * \u003cp\u003e If the given path has a root component then this path ends with the\n     * given path if the root component of this path \u003cem\u003eends with\u003c/em\u003e the root\n     * component of the given path, and the corresponding elements of both paths\n     * are equal. Whether or not the root component of this path ends with the\n     * root component of the given path is file system specific. If this path\n     * does not have a root component and the given path has a root component\n     * then this path does not end with the given path.\n     *\n     * \u003cp\u003e If the given path is associated with a different {@code FileSystem}\n     * to this path then {@code false} is returned.\n     *\n     * @param   other\n     *          the given path\n     *\n     * @return  {@code true} if this path ends with the given path; otherwise\n     *          {@code false}\n     */\n    boolean endsWith(Path other);\n\n    /**\n     * Tests if this path ends with a {@code Path}, constructed by converting\n     * the given path string, in exactly the manner specified by the {@link\n     * #endsWith(Path) endsWith(Path)} method. On UNIX for example, the path\n     * \"{@code foo/bar}\" ends with \"{@code foo/bar}\" and \"{@code bar}\". It does\n     * not end with \"{@code r}\" or \"{@code /bar}\". Note that trailing separators\n     * are not taken into account, and so invoking this method on the {@code\n     * Path}\"{@code foo/bar}\" with the {@code String} \"{@code bar/}\" returns\n     * {@code true}.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     endsWith(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the given path string\n     *\n     * @return  {@code true} if this path ends with the given path; otherwise\n     *          {@code false}\n     *\n     * @throws  InvalidPathException\n     *          If the path string cannot be converted to a Path.\n     */\n    default boolean endsWith(String other) {\n        return endsWith(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Returns a path that is this path with redundant name elements eliminated.\n     *\n     * \u003cp\u003e The precise definition of this method is implementation dependent but\n     * in general it derives from this path, a path that does not contain\n     * \u003cem\u003eredundant\u003c/em\u003e name elements. In many file systems, the \"{@code .}\"\n     * and \"{@code ..}\" are special names used to indicate the current directory\n     * and parent directory. In such file systems all occurrences of \"{@code .}\"\n     * are considered redundant. If a \"{@code ..}\" is preceded by a\n     * non-\"{@code ..}\" name then both names are considered redundant (the\n     * process to identify such names is repeated until it is no longer\n     * applicable).\n     *\n     * \u003cp\u003e This method does not access the file system; the path may not locate\n     * a file that exists. Eliminating \"{@code ..}\" and a preceding name from a\n     * path may result in the path that locates a different file than the original\n     * path. This can arise when the preceding name is a symbolic link.\n     *\n     * @return  the resulting path or this path if it does not contain\n     *          redundant name elements; an empty path is returned if this path\n     *          does not have a root component and all name elements are redundant\n     *\n     * @see #getParent\n     * @see #toRealPath\n     */\n    Path normalize();\n\n    // -- resolution and relativization --\n\n    /**\n     * Resolve the given path against this path.\n     *\n     * \u003cp\u003e If the {@code other} parameter is an {@link #isAbsolute() absolute}\n     * path then this method trivially returns {@code other}. If {@code other}\n     * is an \u003ci\u003eempty path\u003c/i\u003e then this method trivially returns this path.\n     * Otherwise this method considers this path to be a directory and resolves\n     * the given path against this path. In the simplest case, the given path\n     * does not have a {@link #getRoot root} component, in which case this method\n     * \u003cem\u003ejoins\u003c/em\u003e the given path to this path and returns a resulting path\n     * that {@link #endsWith ends} with the given path. Where the given path has\n     * a root component then resolution is highly implementation dependent and\n     * therefore unspecified.\n     *\n     * @param   other\n     *          the path to resolve against this path\n     *\n     * @return  the resulting path\n     *\n     * @see #relativize\n     */\n    Path resolve(Path other);\n\n    /**\n     * Converts a given path string to a {@code Path} and resolves it against\n     * this {@code Path} in exactly the manner specified by the {@link\n     * #resolve(Path) resolve} method. For example, suppose that the name\n     * separator is \"{@code /}\" and a path represents \"{@code foo/bar}\", then\n     * invoking this method with the path string \"{@code gus}\" will result in\n     * the {@code Path} \"{@code foo/bar/gus}\".\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     resolve(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the path string to resolve against this path\n     *\n     * @return  the resulting path\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a Path.\n     *\n     * @see FileSystem#getPath\n     */\n    default Path resolve(String other) {\n        return resolve(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Resolves the given path against this path\u0027s {@link #getParent parent}\n     * path. This is useful where a file name needs to be \u003ci\u003ereplaced\u003c/i\u003e with\n     * another file name. For example, suppose that the name separator is\n     * \"{@code /}\" and a path represents \"{@code dir1/dir2/foo}\", then invoking\n     * this method with the {@code Path} \"{@code bar}\" will result in the {@code\n     * Path} \"{@code dir1/dir2/bar}\". If this path does not have a parent path,\n     * or {@code other} is {@link #isAbsolute() absolute}, then this method\n     * returns {@code other}. If {@code other} is an empty path then this method\n     * returns this path\u0027s parent, or where this path doesn\u0027t have a parent, the\n     * empty path.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     (getParent() \u003d\u003d null) ? other : getParent().resolve(other);\n     * }\u003c/pre\u003e\n     * unless {@code other \u003d\u003d null}, in which case a\n     * {@code NullPointerException} is thrown.\n     *\n     * @param   other\n     *          the path to resolve against this path\u0027s parent\n     *\n     * @return  the resulting path\n     *\n     * @see #resolve(Path)\n     */\n    default Path resolveSibling(Path other) {\n        if (other \u003d\u003d null)\n            throw new NullPointerException();\n        Path parent \u003d getParent();\n        return (parent \u003d\u003d null) ? other : parent.resolve(other);\n    }\n\n    /**\n     * Converts a given path string to a {@code Path} and resolves it against\n     * this path\u0027s {@link #getParent parent} path in exactly the manner\n     * specified by the {@link #resolveSibling(Path) resolveSibling} method.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     resolveSibling(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the path string to resolve against this path\u0027s parent\n     *\n     * @return  the resulting path\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a Path.\n     *\n     * @see FileSystem#getPath\n     */\n    default Path resolveSibling(String other) {\n        return resolveSibling(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Constructs a relative path between this path and a given path.\n     *\n     * \u003cp\u003e Relativization is the inverse of {@link #resolve(Path) resolution}.\n     * This method attempts to construct a {@link #isAbsolute relative} path\n     * that when {@link #resolve(Path) resolved} against this path, yields a\n     * path that locates the same file as the given path. For example, on UNIX,\n     * if this path is {@code \"/a/b\"} and the given path is {@code \"/a/b/c/d\"}\n     * then the resulting relative path would be {@code \"c/d\"}. Where this\n     * path and the given path do not have a {@link #getRoot root} component,\n     * then a relative path can be constructed. A relative path cannot be\n     * constructed if only one of the paths have a root component. Where both\n     * paths have a root component then it is implementation dependent if a\n     * relative path can be constructed. If this path and the given path are\n     * {@link #equals equal} then an \u003ci\u003eempty path\u003c/i\u003e is returned.\n     *\n     * \u003cp\u003e For any two {@link #normalize normalized} paths \u003ci\u003ep\u003c/i\u003e and\n     * \u003ci\u003eq\u003c/i\u003e, where \u003ci\u003eq\u003c/i\u003e does not have a root component,\n     * \u003cblockquote\u003e\n     *   \u003ci\u003ep\u003c/i\u003e{@code .relativize(}\u003ci\u003ep\u003c/i\u003e\n     *   {@code .resolve(}\u003ci\u003eq\u003c/i\u003e{@code )).equals(}\u003ci\u003eq\u003c/i\u003e{@code )}\n     * \u003c/blockquote\u003e\n     *\n     * \u003cp\u003e When symbolic links are supported, then whether the resulting path,\n     * when resolved against this path, yields a path that can be used to locate\n     * the {@link Files#isSameFile same} file as {@code other} is implementation\n     * dependent. For example, if this path is  {@code \"/a/b\"} and the given\n     * path is {@code \"/a/x\"} then the resulting relative path may be {@code\n     * \"../x\"}. If {@code \"b\"} is a symbolic link then is implementation\n     * dependent if {@code \"a/b/../x\"} would locate the same file as {@code \"/a/x\"}.\n     *\n     * @param   other\n     *          the path to relativize against this path\n     *\n     * @return  the resulting relative path, or an empty path if both paths are\n     *          equal\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code other} is not a {@code Path} that can be relativized\n     *          against this path\n     */\n    Path relativize(Path other);\n\n    /**\n     * Returns a URI to represent this path.\n     *\n     * \u003cp\u003e This method constructs an absolute {@link URI} with a {@link\n     * URI#getScheme() scheme} equal to the URI scheme that identifies the\n     * provider. The exact form of the scheme specific part is highly provider\n     * dependent.\n     *\n     * \u003cp\u003e In the case of the default provider, the URI is hierarchical with\n     * a {@link URI#getPath() path} component that is absolute. The query and\n     * fragment components are undefined. Whether the authority component is\n     * defined or not is implementation dependent. There is no guarantee that\n     * the {@code URI} may be used to construct a {@link java.io.File java.io.File}.\n     * In particular, if this path represents a Universal Naming Convention (UNC)\n     * path, then the UNC server name may be encoded in the authority component\n     * of the resulting URI. In the case of the default provider, and the file\n     * exists, and it can be determined that the file is a directory, then the\n     * resulting {@code URI} will end with a slash.\n     *\n     * \u003cp\u003e The default provider provides a similar \u003cem\u003eround-trip\u003c/em\u003e guarantee\n     * to the {@link java.io.File} class. For a given {@code Path} \u003ci\u003ep\u003c/i\u003e it\n     * is guaranteed that\n     * \u003cblockquote\u003e\n     * {@link Path#of(URI) Path.of}{@code (}\u003ci\u003ep\u003c/i\u003e{@code .toUri()).equals(}\u003ci\u003ep\u003c/i\u003e\n     * {@code .}{@link #toAbsolutePath() toAbsolutePath}{@code ())}\n     * \u003c/blockquote\u003e\n     * so long as the original {@code Path}, the {@code URI}, and the new {@code\n     * Path} are all created in (possibly different invocations of) the same\n     * Java virtual machine. Whether other providers make any guarantees is\n     * provider specific and therefore unspecified.\n     *\n     * \u003cp\u003e When a file system is constructed to access the contents of a file\n     * as a file system then it is highly implementation specific if the returned\n     * URI represents the given path in the file system or it represents a\n     * \u003cem\u003ecompound\u003c/em\u003e URI that encodes the URI of the enclosing file system.\n     * A format for compound URIs is not defined in this release; such a scheme\n     * may be added in a future release.\n     *\n     * @return  the URI representing this path\n     *\n     * @throws  java.io.IOError\n     *          if an I/O error occurs obtaining the absolute path, or where a\n     *          file system is constructed to access the contents of a file as\n     *          a file system, and the URI of the enclosing file system cannot be\n     *          obtained\n     *\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager\n     *          is installed, the {@link #toAbsolutePath toAbsolutePath} method\n     *          throws a security exception.\n     */\n    URI toUri();\n\n    /**\n     * Returns a {@code Path} object representing the absolute path of this\n     * path.\n     *\n     * \u003cp\u003e If this path is already {@link Path#isAbsolute absolute} then this\n     * method simply returns this path. Otherwise, this method resolves the path\n     * in an implementation dependent manner, typically by resolving the path\n     * against a file system default directory. Depending on the implementation,\n     * this method may throw an I/O error if the file system is not accessible.\n     *\n     * @return  a {@code Path} object representing the absolute path\n     *\n     * @throws  java.io.IOError\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, a security manager\n     *          is installed, and this path is not absolute, then the security\n     *          manager\u0027s {@link SecurityManager#checkPropertyAccess(String)\n     *          checkPropertyAccess} method is invoked to check access to the\n     *          system property {@code user.dir}\n     */\n    Path toAbsolutePath();\n\n    /**\n     * Returns the \u003cem\u003ereal\u003c/em\u003e path of an existing file.\n     *\n     * \u003cp\u003e The precise definition of this method is implementation dependent but\n     * in general it derives from this path, an {@link #isAbsolute absolute}\n     * path that locates the {@link Files#isSameFile same} file as this path, but\n     * with name elements that represent the actual name of the directories\n     * and the file. For example, where filename comparisons on a file system\n     * are case insensitive then the name elements represent the names in their\n     * actual case. Additionally, the resulting path has redundant name\n     * elements removed.\n     *\n     * \u003cp\u003e If this path is relative then its absolute path is first obtained,\n     * as if by invoking the {@link #toAbsolutePath toAbsolutePath} method.\n     *\n     * \u003cp\u003e The {@code options} array may be used to indicate how symbolic links\n     * are handled. By default, symbolic links are resolved to their final\n     * target. If the option {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} is\n     * present then this method does not resolve symbolic links.\n     *\n     * Some implementations allow special names such as \"{@code ..}\" to refer to\n     * the parent directory. When deriving the \u003cem\u003ereal path\u003c/em\u003e, and a\n     * \"{@code ..}\" (or equivalent) is preceded by a non-\"{@code ..}\" name then\n     * an implementation will typically cause both names to be removed. When\n     * not resolving symbolic links and the preceding name is a symbolic link\n     * then the names are only removed if it guaranteed that the resulting path\n     * will locate the same file as this path.\n     *\n     * @param   options\n     *          options indicating how symbolic links are handled\n     *\n     * @return  an absolute path represent the \u003cem\u003ereal\u003c/em\u003e path of the file\n     *          located by this object\n     *\n     * @throws  IOException\n     *          if the file does not exist or an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager\n     *          is installed, its {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file, and where\n     *          this path is not absolute, its {@link SecurityManager#checkPropertyAccess(String)\n     *          checkPropertyAccess} method is invoked to check access to the\n     *          system property {@code user.dir}\n     */\n    Path toRealPath(LinkOption... options) throws IOException;\n\n    /**\n     * Returns a {@link File} object representing this path. Where this {@code\n     * Path} is associated with the default provider, then this method is\n     * equivalent to returning a {@code File} object constructed with the\n     * {@code String} representation of this path.\n     *\n     * \u003cp\u003e If this path was created by invoking the {@code File} {@link\n     * File#toPath toPath} method then there is no guarantee that the {@code\n     * File} object returned by this method is {@link #equals equal} to the\n     * original {@code File}.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     new File(toString());\n     * }\u003c/pre\u003e\n     * if the {@code FileSystem} which created this {@code Path} is the default\n     * file system; otherwise an {@code UnsupportedOperationException} is\n     * thrown.\n     *\n     * @return  a {@code File} object representing this path\n     *\n     * @throws  UnsupportedOperationException\n     *          if this {@code Path} is not associated with the default provider\n     */\n    default File toFile() {\n        if (getFileSystem() \u003d\u003d FileSystems.getDefault()) {\n            return new File(toString());\n        } else {\n            throw new UnsupportedOperationException(\"Path not associated with \"\n                    + \"default file system.\");\n        }\n    }\n\n    // -- watchable --\n\n    /**\n     * Registers the file located by this path with a watch service.\n     *\n     * \u003cp\u003e In this release, this path locates a directory that exists. The\n     * directory is registered with the watch service so that entries in the\n     * directory can be watched. The {@code events} parameter is the events to\n     * register and may contain the following events:\n     * \u003cul\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_CREATE ENTRY_CREATE} -\n     *       entry created or moved into the directory\u003c/li\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_DELETE ENTRY_DELETE} -\n     *        entry deleted or moved out of the directory\u003c/li\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_MODIFY ENTRY_MODIFY} -\n     *        entry in directory was modified\u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e The {@link WatchEvent#context context} for these events is the\n     * relative path between the directory located by this path, and the path\n     * that locates the directory entry that is created, deleted, or modified.\n     *\n     * \u003cp\u003e The set of events may include additional implementation specific\n     * event that are not defined by the enum {@link StandardWatchEventKinds}\n     *\n     * \u003cp\u003e The {@code modifiers} parameter specifies \u003cem\u003emodifiers\u003c/em\u003e that\n     * qualify how the directory is registered. This release does not define any\n     * \u003cem\u003estandard\u003c/em\u003e modifiers. It may contain implementation specific\n     * modifiers.\n     *\n     * \u003cp\u003e Where a file is registered with a watch service by means of a symbolic\n     * link then it is implementation specific if the watch continues to depend\n     * on the existence of the symbolic link after it is registered.\n     *\n     * @param   watcher\n     *          the watch service to which this object is to be registered\n     * @param   events\n     *          the events for which this object should be registered\n     * @param   modifiers\n     *          the modifiers, if any, that modify how the object is registered\n     *\n     * @return  a key representing the registration of this object with the\n     *          given watch service\n     *\n     * @throws  UnsupportedOperationException\n     *          if unsupported events or modifiers are specified\n     * @throws  IllegalArgumentException\n     *          if an invalid combination of events or modifiers is specified\n     * @throws  ClosedWatchServiceException\n     *          if the watch service is closed\n     * @throws  NotDirectoryException\n     *          if the file is registered to watch the entries in a directory\n     *          and the file is not a directory  \u003ci\u003e(optional specific exception)\u003c/i\u003e\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     */\n    @Override\n    WatchKey register(WatchService watcher,\n                      WatchEvent.Kind\u003c?\u003e[] events,\n                      WatchEvent.Modifier... modifiers)\n        throws IOException;\n\n    /**\n     * Registers the file located by this path with a watch service.\n     *\n     * \u003cp\u003e An invocation of this method behaves in exactly the same way as the\n     * invocation\n     * \u003cpre\u003e\n     *     watchable.{@link #register(WatchService,WatchEvent.Kind[],WatchEvent.Modifier[]) register}(watcher, events, new WatchEvent.Modifier[0]);\n     * \u003c/pre\u003e\n     *\n     * \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e\n     * Suppose we wish to register a directory for entry create, delete, and modify\n     * events:\n     * \u003cpre\u003e\n     *     Path dir \u003d ...\n     *     WatchService watcher \u003d ...\n     *\n     *     WatchKey key \u003d dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);\n     * \u003c/pre\u003e\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     register(watcher, events, new WatchEvent.Modifier[0]);\n     * }\u003c/pre\u003e\n     *\n     * @param   watcher\n     *          The watch service to which this object is to be registered\n     * @param   events\n     *          The events for which this object should be registered\n     *\n     * @return  A key representing the registration of this object with the\n     *          given watch service\n     *\n     * @throws  UnsupportedOperationException\n     *          If unsupported events are specified\n     * @throws  IllegalArgumentException\n     *          If an invalid combination of events is specified\n     * @throws  ClosedWatchServiceException\n     *          If the watch service is closed\n     * @throws  NotDirectoryException\n     *          If the file is registered to watch the entries in a directory\n     *          and the file is not a directory  \u003ci\u003e(optional specific exception)\u003c/i\u003e\n     * @throws  IOException\n     *          If an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     */\n    @Override\n    default WatchKey register(WatchService watcher,\n                      WatchEvent.Kind\u003c?\u003e... events) throws IOException {\n        return register(watcher, events, new WatchEvent.Modifier[0]);\n    }\n\n    // -- Iterable --\n\n    /**\n     * Returns an iterator over the name elements of this path.\n     *\n     * \u003cp\u003e The first element returned by the iterator represents the name\n     * element that is closest to the root in the directory hierarchy, the\n     * second element is the next closest, and so on. The last element returned\n     * is the name of the file or directory denoted by this path. The {@link\n     * #getRoot root} component, if present, is not returned by the iterator.\n     *\n     * @implSpec\n     * The default implementation returns an {@code Iterator\u003cPath\u003e} which, for\n     * this path, traverses the {@code Path}s returned by\n     * {@code getName(index)}, where {@code index} ranges from zero to\n     * {@code getNameCount() - 1}, inclusive.\n     *\n     * @return  an iterator over the name elements of this path.\n     */\n    @Override\n    default Iterator\u003cPath\u003e iterator() {\n        return new Iterator\u003c\u003e() {\n            private int i \u003d 0;\n\n            @Override\n            public boolean hasNext() {\n                return (i \u003c getNameCount());\n            }\n\n            @Override\n            public Path next() {\n                if (i \u003c getNameCount()) {\n                    Path result \u003d getName(i);\n                    i++;\n                    return result;\n                } else {\n                    throw new NoSuchElementException();\n                }\n            }\n        };\n    }\n\n    // -- compareTo/equals/hashCode --\n\n    /**\n     * Compares two abstract paths lexicographically. The ordering defined by\n     * this method is provider specific, and in the case of the default\n     * provider, platform specific. This method does not access the file system\n     * and neither file is required to exist.\n     *\n     * \u003cp\u003e This method may not be used to compare paths that are associated\n     * with different file system providers.\n     *\n     * @param   other  the path compared to this path.\n     *\n     * @return  zero if the argument is {@link #equals equal} to this path, a\n     *          value less than zero if this path is lexicographically less than\n     *          the argument, or a value greater than zero if this path is\n     *          lexicographically greater than the argument\n     *\n     * @throws  ClassCastException\n     *          if the paths are associated with different providers\n     */\n    @Override\n    int compareTo(Path other);\n\n    /**\n     * Tests this path for equality with the given object.\n     *\n     * \u003cp\u003e If the given object is not a Path, or is a Path associated with a\n     * different {@code FileSystem}, then this method returns {@code false}.\n     *\n     * \u003cp\u003e Whether or not two path are equal depends on the file system\n     * implementation. In some cases the paths are compared without regard\n     * to case, and others are case sensitive. This method does not access the\n     * file system and the file is not required to exist. Where required, the\n     * {@link Files#isSameFile isSameFile} method may be used to check if two\n     * paths locate the same file.\n     *\n     * \u003cp\u003e This method satisfies the general contract of the {@link\n     * java.lang.Object#equals(Object) Object.equals} method. \u003c/p\u003e\n     *\n     * @param   other\n     *          the object to which this object is to be compared\n     *\n     * @return  {@code true} if, and only if, the given object is a {@code Path}\n     *          that is identical to this {@code Path}\n     */\n    boolean equals(Object other);\n\n    /**\n     * Computes a hash code for this path.\n     *\n     * \u003cp\u003e The hash code is based upon the components of the path, and\n     * satisfies the general contract of the {@link Object#hashCode\n     * Object.hashCode} method.\n     *\n     * @return  the hash-code value for this path\n     */\n    int hashCode();\n\n    /**\n     * Returns the string representation of this path.\n     *\n     * \u003cp\u003e If this path was created by converting a path string using the\n     * {@link FileSystem#getPath getPath} method then the path string returned\n     * by this method may differ from the original String used to create the path.\n     *\n     * \u003cp\u003e The returned path string uses the default name {@link\n     * FileSystem#getSeparator separator} to separate names in the path.\n     *\n     * @return  the string representation of this path\n     */\n    String toString();\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor16.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:319)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 23 more

Oct 10, 2023 2:53:31 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:329)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 24 more

2023.10.10 14:54:47 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:55:33 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:55:36 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 14:56:52 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:01:40 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:01:40 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:01:49 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:02:48 WARN  Using indexes to guess the definition of Path
2023.10.10 15:02:48 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:670)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 10, 2023 3:02:48 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.nio.file;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.nio.file.spi.FileSystemProvider;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\n/**\n * An object that may be used to locate a file in a file system. It will\n * typically represent a system dependent file path.\n *\n * \u003cp\u003e A {@code Path} represents a path that is hierarchical and composed of a\n * sequence of directory and file name elements separated by a special separator\n * or delimiter. A \u003cem\u003eroot component\u003c/em\u003e, that identifies a file system\n * hierarchy, may also be present. The name element that is \u003cem\u003efarthest\u003c/em\u003e\n * from the root of the directory hierarchy is the name of a file or directory.\n * The other name elements are directory names. A {@code Path} can represent a\n * root, a root and a sequence of names, or simply one or more name elements.\n * A {@code Path} is considered to be an \u003ci\u003eempty path\u003c/i\u003e if it consists\n * solely of one name element that is empty. Accessing a file using an\n * \u003ci\u003eempty path\u003c/i\u003e is equivalent to accessing the default directory of the\n * file system. {@code Path} defines the {@link #getFileName() getFileName},\n * {@link #getParent getParent}, {@link #getRoot getRoot}, and {@link #subpath\n * subpath} methods to access the path components or a subsequence of its name\n * elements.\n *\n * \u003cp\u003e In addition to accessing the components of a path, a {@code Path} also\n * defines the {@link #resolve(Path) resolve} and {@link #resolveSibling(Path)\n * resolveSibling} methods to combine paths. The {@link #relativize relativize}\n * method that can be used to construct a relative path between two paths.\n * Paths can be {@link #compareTo compared}, and tested against each other using\n * the {@link #startsWith startsWith} and {@link #endsWith endsWith} methods.\n *\n * \u003cp\u003e This interface extends {@link Watchable} interface so that a directory\n * located by a path can be {@link #register registered} with a {@link\n * WatchService} and entries in the directory watched. \u003c/p\u003e\n *\n * \u003cp\u003e \u003cb\u003eWARNING:\u003c/b\u003e This interface is only intended to be implemented by\n * those developing custom file system implementations. Methods may be added to\n * this interface in future releases. \u003c/p\u003e\n *\n * \u003ch2\u003eAccessing Files\u003c/h2\u003e\n * \u003cp\u003e Paths may be used with the {@link Files} class to operate on files,\n * directories, and other types of files. For example, suppose we want a {@link\n * java.io.BufferedReader} to read text from a file \"{@code access.log}\". The\n * file is located in a directory \"{@code logs}\" relative to the current working\n * directory and is UTF-8 encoded.\n * \u003cpre\u003e\n *     Path path \u003d FileSystems.getDefault().getPath(\"logs\", \"access.log\");\n *     BufferedReader reader \u003d Files.newBufferedReader(path, StandardCharsets.UTF_8);\n * \u003c/pre\u003e\n *\n * \u003ca id\u003d\"interop\"\u003e\u003c/a\u003e\u003ch2\u003eInteroperability\u003c/h2\u003e\n * \u003cp\u003e Paths associated with the default {@link\n * java.nio.file.spi.FileSystemProvider provider} are generally interoperable\n * with the {@link java.io.File java.io.File} class. Paths created by other\n * providers are unlikely to be interoperable with the abstract path names\n * represented by {@code java.io.File}. The {@link java.io.File#toPath toPath}\n * method may be used to obtain a {@code Path} from the abstract path name\n * represented by a {@code java.io.File} object. The resulting {@code Path} can\n * be used to operate on the same file as the {@code java.io.File} object. In\n * addition, the {@link #toFile toFile} method is useful to construct a {@code\n * File} from the {@code String} representation of a {@code Path}.\n *\n * \u003ch2\u003eConcurrency\u003c/h2\u003e\n * \u003cp\u003e Implementations of this interface are immutable and safe for use by\n * multiple concurrent threads.\n *\n * @since 1.7\n */\n\npublic interface Path\n    extends Comparable\u003cPath\u003e, Iterable\u003cPath\u003e, Watchable\n{\n    /**\n     * Returns a {@code Path} by converting a path string, or a sequence of\n     * strings that when joined form a path string. If {@code more} does not\n     * specify any elements then the value of the {@code first} parameter is\n     * the path string to convert. If {@code more} specifies one or more\n     * elements then each non-empty string, including {@code first}, is\n     * considered to be a sequence of name elements and is joined to form a\n     * path string. The details as to how the Strings are joined is provider\n     * specific but typically they will be joined using the\n     * {@link FileSystem#getSeparator name-separator} as the separator.\n     * For example, if the name separator is \"{@code /}\" and\n     * {@code getPath(\"/foo\",\"bar\",\"gus\")} is invoked, then the path string\n     * {@code \"/foo/bar/gus\"} is converted to a {@code Path}. A {@code Path}\n     * representing an empty path is returned if {@code first} is the empty\n     * string and {@code more} does not contain any non-empty strings.\n     *\n     * \u003cp\u003e The {@code Path} is obtained by invoking the {@link FileSystem#getPath\n     * getPath} method of the {@link FileSystems#getDefault default} {@link\n     * FileSystem}.\n     *\n     * \u003cp\u003e Note that while this method is very convenient, using it will imply\n     * an assumed reference to the default {@code FileSystem} and limit the\n     * utility of the calling code. Hence it should not be used in library code\n     * intended for flexible reuse. A more flexible alternative is to use an\n     * existing {@code Path} instance as an anchor, such as:\n     * \u003cpre\u003e{@code\n     *     Path dir \u003d ...\n     *     Path path \u003d dir.resolve(\"file\");\n     * }\u003c/pre\u003e\n     *\n     * @param   first\n     *          the path string or initial part of the path string\n     * @param   more\n     *          additional strings to be joined to form the path string\n     *\n     * @return  the resulting {@code Path}\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a {@code Path}\n     *\n     * @see FileSystem#getPath\n     *\n     * @since 11\n     */\n    public static Path of(String first, String... more) {\n        return FileSystems.getDefault().getPath(first, more);\n    }\n\n    /**\n     * Returns a {@code Path} by converting a URI.\n     *\n     * \u003cp\u003e This method iterates over the {@link FileSystemProvider#installedProviders()\n     * installed} providers to locate the provider that is identified by the\n     * URI {@link URI#getScheme scheme} of the given URI. URI schemes are\n     * compared without regard to case. If the provider is found then its {@link\n     * FileSystemProvider#getPath getPath} method is invoked to convert the\n     * URI.\n     *\n     * \u003cp\u003e In the case of the default provider, identified by the URI scheme\n     * \"file\", the given URI has a non-empty path component, and undefined query\n     * and fragment components. Whether the authority component may be present\n     * is platform specific. The returned {@code Path} is associated with the\n     * {@link FileSystems#getDefault default} file system.\n     *\n     * \u003cp\u003e The default provider provides a similar \u003cem\u003eround-trip\u003c/em\u003e guarantee\n     * to the {@link java.io.File} class. For a given {@code Path} \u003ci\u003ep\u003c/i\u003e it\n     * is guaranteed that\n     * \u003cblockquote\u003e{@code\n     * Path.of(}\u003ci\u003ep\u003c/i\u003e{@code .}{@link Path#toUri() toUri}{@code ()).equals(}\n     * \u003ci\u003ep\u003c/i\u003e{@code .}{@link Path#toAbsolutePath() toAbsolutePath}{@code ())}\n     * \u003c/blockquote\u003e\n     * so long as the original {@code Path}, the {@code URI}, and the new {@code\n     * Path} are all created in (possibly different invocations of) the same\n     * Java virtual machine. Whether other providers make any guarantees is\n     * provider specific and therefore unspecified.\n     *\n     * @param   uri\n     *          the URI to convert\n     *\n     * @return  the resulting {@code Path}\n     *\n     * @throws  IllegalArgumentException\n     *          if preconditions on the {@code uri} parameter do not hold. The\n     *          format of the URI is provider specific.\n     * @throws  FileSystemNotFoundException\n     *          The file system, identified by the URI, does not exist and\n     *          cannot be created automatically, or the provider identified by\n     *          the URI\u0027s scheme component is not installed\n     * @throws  SecurityException\n     *          if a security manager is installed and it denies an unspecified\n     *          permission to access the file system\n     *\n     * @since 11\n     */\n    public static Path of(URI uri) {\n        String scheme \u003d  uri.getScheme();\n        if (scheme \u003d\u003d null)\n            throw new IllegalArgumentException(\"Missing scheme\");\n\n        // check for default provider to avoid loading of installed providers\n        if (scheme.equalsIgnoreCase(\"file\"))\n            return FileSystems.getDefault().provider().getPath(uri);\n\n        // try to find provider\n        for (FileSystemProvider provider: FileSystemProvider.installedProviders()) {\n            if (provider.getScheme().equalsIgnoreCase(scheme)) {\n                return provider.getPath(uri);\n            }\n        }\n\n        throw new FileSystemNotFoundException(\"Provider \\\"\" + scheme + \"\\\" not installed\");\n    }\n\n    /**\n     * Returns the file system that created this object.\n     *\n     * @return  the file system that created this object\n     */\n    FileSystem getFileSystem();\n\n    /**\n     * Tells whether or not this path is absolute.\n     *\n     * \u003cp\u003e An absolute path is complete in that it doesn\u0027t need to be combined\n     * with other path information in order to locate a file.\n     *\n     * @return  {@code true} if, and only if, this path is absolute\n     */\n    boolean isAbsolute();\n\n    /**\n     * Returns the root component of this path as a {@code Path} object,\n     * or {@code null} if this path does not have a root component.\n     *\n     * @return  a path representing the root component of this path,\n     *          or {@code null}\n     */\n    Path getRoot();\n\n    /**\n     * Returns the name of the file or directory denoted by this path as a\n     * {@code Path} object. The file name is the \u003cem\u003efarthest\u003c/em\u003e element from\n     * the root in the directory hierarchy.\n     *\n     * @return  a path representing the name of the file or directory, or\n     *          {@code null} if this path has zero elements\n     */\n    Path getFileName();\n\n    /**\n     * Returns the \u003cem\u003eparent path\u003c/em\u003e, or {@code null} if this path does not\n     * have a parent.\n     *\n     * \u003cp\u003e The parent of this path object consists of this path\u0027s root\n     * component, if any, and each element in the path except for the\n     * \u003cem\u003efarthest\u003c/em\u003e from the root in the directory hierarchy. This method\n     * does not access the file system; the path or its parent may not exist.\n     * Furthermore, this method does not eliminate special names such as \".\"\n     * and \"..\" that may be used in some implementations. On UNIX for example,\n     * the parent of \"{@code /a/b/c}\" is \"{@code /a/b}\", and the parent of\n     * {@code \"x/y/.}\" is \"{@code x/y}\". This method may be used with the {@link\n     * #normalize normalize} method, to eliminate redundant names, for cases where\n     * \u003cem\u003eshell-like\u003c/em\u003e navigation is required.\n     *\n     * \u003cp\u003e If this path has more than one element, and no root component, then\n     * this method is equivalent to evaluating the expression:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * subpath(0,\u0026nbsp;getNameCount()-1);\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @return  a path representing the path\u0027s parent\n     */\n    Path getParent();\n\n    /**\n     * Returns the number of name elements in the path.\n     *\n     * @return  the number of elements in the path, or {@code 0} if this path\n     *          only represents a root component\n     */\n    int getNameCount();\n\n    /**\n     * Returns a name element of this path as a {@code Path} object.\n     *\n     * \u003cp\u003e The {@code index} parameter is the index of the name element to return.\n     * The element that is \u003cem\u003eclosest\u003c/em\u003e to the root in the directory hierarchy\n     * has index {@code 0}. The element that is \u003cem\u003efarthest\u003c/em\u003e from the root\n     * has index {@link #getNameCount count}{@code -1}.\n     *\n     * @param   index\n     *          the index of the element\n     *\n     * @return  the name element\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code index} is negative, {@code index} is greater than or\n     *          equal to the number of elements, or this path has zero name\n     *          elements\n     */\n    Path getName(int index);\n\n    /**\n     * Returns a relative {@code Path} that is a subsequence of the name\n     * elements of this path.\n     *\n     * \u003cp\u003e The {@code beginIndex} and {@code endIndex} parameters specify the\n     * subsequence of name elements. The name that is \u003cem\u003eclosest\u003c/em\u003e to the root\n     * in the directory hierarchy has index {@code 0}. The name that is\n     * \u003cem\u003efarthest\u003c/em\u003e from the root has index {@link #getNameCount\n     * count}{@code -1}. The returned {@code Path} object has the name elements\n     * that begin at {@code beginIndex} and extend to the element at index {@code\n     * endIndex-1}.\n     *\n     * @param   beginIndex\n     *          the index of the first element, inclusive\n     * @param   endIndex\n     *          the index of the last element, exclusive\n     *\n     * @return  a new {@code Path} object that is a subsequence of the name\n     *          elements in this {@code Path}\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code beginIndex} is negative, or greater than or equal to\n     *          the number of elements. If {@code endIndex} is less than or\n     *          equal to {@code beginIndex}, or larger than the number of elements.\n     */\n    Path subpath(int beginIndex, int endIndex);\n\n    /**\n     * Tests if this path starts with the given path.\n     *\n     * \u003cp\u003e This path \u003cem\u003estarts\u003c/em\u003e with the given path if this path\u0027s root\n     * component \u003cem\u003estarts\u003c/em\u003e with the root component of the given path,\n     * and this path starts with the same name elements as the given path.\n     * If the given path has more name elements than this path then {@code false}\n     * is returned.\n     *\n     * \u003cp\u003e Whether or not the root component of this path starts with the root\n     * component of the given path is file system specific. If this path does\n     * not have a root component and the given path has a root component then\n     * this path does not start with the given path.\n     *\n     * \u003cp\u003e If the given path is associated with a different {@code FileSystem}\n     * to this path then {@code false} is returned.\n     *\n     * @param   other\n     *          the given path\n     *\n     * @return  {@code true} if this path starts with the given path; otherwise\n     *          {@code false}\n     */\n    boolean startsWith(Path other);\n\n    /**\n     * Tests if this path starts with a {@code Path}, constructed by converting\n     * the given path string, in exactly the manner specified by the {@link\n     * #startsWith(Path) startsWith(Path)} method. On UNIX for example, the path\n     * \"{@code foo/bar}\" starts with \"{@code foo}\" and \"{@code foo/bar}\". It\n     * does not start with \"{@code f}\" or \"{@code fo}\".\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     startsWith(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the given path string\n     *\n     * @return  {@code true} if this path starts with the given path; otherwise\n     *          {@code false}\n     *\n     * @throws  InvalidPathException\n     *          If the path string cannot be converted to a Path.\n     */\n    default boolean startsWith(String other) {\n        return startsWith(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Tests if this path ends with the given path.\n     *\n     * \u003cp\u003e If the given path has \u003cem\u003eN\u003c/em\u003e elements, and no root component,\n     * and this path has \u003cem\u003eN\u003c/em\u003e or more elements, then this path ends with\n     * the given path if the last \u003cem\u003eN\u003c/em\u003e elements of each path, starting at\n     * the element farthest from the root, are equal.\n     *\n     * \u003cp\u003e If the given path has a root component then this path ends with the\n     * given path if the root component of this path \u003cem\u003eends with\u003c/em\u003e the root\n     * component of the given path, and the corresponding elements of both paths\n     * are equal. Whether or not the root component of this path ends with the\n     * root component of the given path is file system specific. If this path\n     * does not have a root component and the given path has a root component\n     * then this path does not end with the given path.\n     *\n     * \u003cp\u003e If the given path is associated with a different {@code FileSystem}\n     * to this path then {@code false} is returned.\n     *\n     * @param   other\n     *          the given path\n     *\n     * @return  {@code true} if this path ends with the given path; otherwise\n     *          {@code false}\n     */\n    boolean endsWith(Path other);\n\n    /**\n     * Tests if this path ends with a {@code Path}, constructed by converting\n     * the given path string, in exactly the manner specified by the {@link\n     * #endsWith(Path) endsWith(Path)} method. On UNIX for example, the path\n     * \"{@code foo/bar}\" ends with \"{@code foo/bar}\" and \"{@code bar}\". It does\n     * not end with \"{@code r}\" or \"{@code /bar}\". Note that trailing separators\n     * are not taken into account, and so invoking this method on the {@code\n     * Path}\"{@code foo/bar}\" with the {@code String} \"{@code bar/}\" returns\n     * {@code true}.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     endsWith(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the given path string\n     *\n     * @return  {@code true} if this path ends with the given path; otherwise\n     *          {@code false}\n     *\n     * @throws  InvalidPathException\n     *          If the path string cannot be converted to a Path.\n     */\n    default boolean endsWith(String other) {\n        return endsWith(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Returns a path that is this path with redundant name elements eliminated.\n     *\n     * \u003cp\u003e The precise definition of this method is implementation dependent but\n     * in general it derives from this path, a path that does not contain\n     * \u003cem\u003eredundant\u003c/em\u003e name elements. In many file systems, the \"{@code .}\"\n     * and \"{@code ..}\" are special names used to indicate the current directory\n     * and parent directory. In such file systems all occurrences of \"{@code .}\"\n     * are considered redundant. If a \"{@code ..}\" is preceded by a\n     * non-\"{@code ..}\" name then both names are considered redundant (the\n     * process to identify such names is repeated until it is no longer\n     * applicable).\n     *\n     * \u003cp\u003e This method does not access the file system; the path may not locate\n     * a file that exists. Eliminating \"{@code ..}\" and a preceding name from a\n     * path may result in the path that locates a different file than the original\n     * path. This can arise when the preceding name is a symbolic link.\n     *\n     * @return  the resulting path or this path if it does not contain\n     *          redundant name elements; an empty path is returned if this path\n     *          does not have a root component and all name elements are redundant\n     *\n     * @see #getParent\n     * @see #toRealPath\n     */\n    Path normalize();\n\n    // -- resolution and relativization --\n\n    /**\n     * Resolve the given path against this path.\n     *\n     * \u003cp\u003e If the {@code other} parameter is an {@link #isAbsolute() absolute}\n     * path then this method trivially returns {@code other}. If {@code other}\n     * is an \u003ci\u003eempty path\u003c/i\u003e then this method trivially returns this path.\n     * Otherwise this method considers this path to be a directory and resolves\n     * the given path against this path. In the simplest case, the given path\n     * does not have a {@link #getRoot root} component, in which case this method\n     * \u003cem\u003ejoins\u003c/em\u003e the given path to this path and returns a resulting path\n     * that {@link #endsWith ends} with the given path. Where the given path has\n     * a root component then resolution is highly implementation dependent and\n     * therefore unspecified.\n     *\n     * @param   other\n     *          the path to resolve against this path\n     *\n     * @return  the resulting path\n     *\n     * @see #relativize\n     */\n    Path resolve(Path other);\n\n    /**\n     * Converts a given path string to a {@code Path} and resolves it against\n     * this {@code Path} in exactly the manner specified by the {@link\n     * #resolve(Path) resolve} method. For example, suppose that the name\n     * separator is \"{@code /}\" and a path represents \"{@code foo/bar}\", then\n     * invoking this method with the path string \"{@code gus}\" will result in\n     * the {@code Path} \"{@code foo/bar/gus}\".\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     resolve(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the path string to resolve against this path\n     *\n     * @return  the resulting path\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a Path.\n     *\n     * @see FileSystem#getPath\n     */\n    default Path resolve(String other) {\n        return resolve(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Resolves the given path against this path\u0027s {@link #getParent parent}\n     * path. This is useful where a file name needs to be \u003ci\u003ereplaced\u003c/i\u003e with\n     * another file name. For example, suppose that the name separator is\n     * \"{@code /}\" and a path represents \"{@code dir1/dir2/foo}\", then invoking\n     * this method with the {@code Path} \"{@code bar}\" will result in the {@code\n     * Path} \"{@code dir1/dir2/bar}\". If this path does not have a parent path,\n     * or {@code other} is {@link #isAbsolute() absolute}, then this method\n     * returns {@code other}. If {@code other} is an empty path then this method\n     * returns this path\u0027s parent, or where this path doesn\u0027t have a parent, the\n     * empty path.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     (getParent() \u003d\u003d null) ? other : getParent().resolve(other);\n     * }\u003c/pre\u003e\n     * unless {@code other \u003d\u003d null}, in which case a\n     * {@code NullPointerException} is thrown.\n     *\n     * @param   other\n     *          the path to resolve against this path\u0027s parent\n     *\n     * @return  the resulting path\n     *\n     * @see #resolve(Path)\n     */\n    default Path resolveSibling(Path other) {\n        if (other \u003d\u003d null)\n            throw new NullPointerException();\n        Path parent \u003d getParent();\n        return (parent \u003d\u003d null) ? other : parent.resolve(other);\n    }\n\n    /**\n     * Converts a given path string to a {@code Path} and resolves it against\n     * this path\u0027s {@link #getParent parent} path in exactly the manner\n     * specified by the {@link #resolveSibling(Path) resolveSibling} method.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     resolveSibling(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the path string to resolve against this path\u0027s parent\n     *\n     * @return  the resulting path\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a Path.\n     *\n     * @see FileSystem#getPath\n     */\n    default Path resolveSibling(String other) {\n        return resolveSibling(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Constructs a relative path between this path and a given path.\n     *\n     * \u003cp\u003e Relativization is the inverse of {@link #resolve(Path) resolution}.\n     * This method attempts to construct a {@link #isAbsolute relative} path\n     * that when {@link #resolve(Path) resolved} against this path, yields a\n     * path that locates the same file as the given path. For example, on UNIX,\n     * if this path is {@code \"/a/b\"} and the given path is {@code \"/a/b/c/d\"}\n     * then the resulting relative path would be {@code \"c/d\"}. Where this\n     * path and the given path do not have a {@link #getRoot root} component,\n     * then a relative path can be constructed. A relative path cannot be\n     * constructed if only one of the paths have a root component. Where both\n     * paths have a root component then it is implementation dependent if a\n     * relative path can be constructed. If this path and the given path are\n     * {@link #equals equal} then an \u003ci\u003eempty path\u003c/i\u003e is returned.\n     *\n     * \u003cp\u003e For any two {@link #normalize normalized} paths \u003ci\u003ep\u003c/i\u003e and\n     * \u003ci\u003eq\u003c/i\u003e, where \u003ci\u003eq\u003c/i\u003e does not have a root component,\n     * \u003cblockquote\u003e\n     *   \u003ci\u003ep\u003c/i\u003e{@code .relativize(}\u003ci\u003ep\u003c/i\u003e\n     *   {@code .resolve(}\u003ci\u003eq\u003c/i\u003e{@code )).equals(}\u003ci\u003eq\u003c/i\u003e{@code )}\n     * \u003c/blockquote\u003e\n     *\n     * \u003cp\u003e When symbolic links are supported, then whether the resulting path,\n     * when resolved against this path, yields a path that can be used to locate\n     * the {@link Files#isSameFile same} file as {@code other} is implementation\n     * dependent. For example, if this path is  {@code \"/a/b\"} and the given\n     * path is {@code \"/a/x\"} then the resulting relative path may be {@code\n     * \"../x\"}. If {@code \"b\"} is a symbolic link then is implementation\n     * dependent if {@code \"a/b/../x\"} would locate the same file as {@code \"/a/x\"}.\n     *\n     * @param   other\n     *          the path to relativize against this path\n     *\n     * @return  the resulting relative path, or an empty path if both paths are\n     *          equal\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code other} is not a {@code Path} that can be relativized\n     *          against this path\n     */\n    Path relativize(Path other);\n\n    /**\n     * Returns a URI to represent this path.\n     *\n     * \u003cp\u003e This method constructs an absolute {@link URI} with a {@link\n     * URI#getScheme() scheme} equal to the URI scheme that identifies the\n     * provider. The exact form of the scheme specific part is highly provider\n     * dependent.\n     *\n     * \u003cp\u003e In the case of the default provider, the URI is hierarchical with\n     * a {@link URI#getPath() path} component that is absolute. The query and\n     * fragment components are undefined. Whether the authority component is\n     * defined or not is implementation dependent. There is no guarantee that\n     * the {@code URI} may be used to construct a {@link java.io.File java.io.File}.\n     * In particular, if this path represents a Universal Naming Convention (UNC)\n     * path, then the UNC server name may be encoded in the authority component\n     * of the resulting URI. In the case of the default provider, and the file\n     * exists, and it can be determined that the file is a directory, then the\n     * resulting {@code URI} will end with a slash.\n     *\n     * \u003cp\u003e The default provider provides a similar \u003cem\u003eround-trip\u003c/em\u003e guarantee\n     * to the {@link java.io.File} class. For a given {@code Path} \u003ci\u003ep\u003c/i\u003e it\n     * is guaranteed that\n     * \u003cblockquote\u003e\n     * {@link Path#of(URI) Path.of}{@code (}\u003ci\u003ep\u003c/i\u003e{@code .toUri()).equals(}\u003ci\u003ep\u003c/i\u003e\n     * {@code .}{@link #toAbsolutePath() toAbsolutePath}{@code ())}\n     * \u003c/blockquote\u003e\n     * so long as the original {@code Path}, the {@code URI}, and the new {@code\n     * Path} are all created in (possibly different invocations of) the same\n     * Java virtual machine. Whether other providers make any guarantees is\n     * provider specific and therefore unspecified.\n     *\n     * \u003cp\u003e When a file system is constructed to access the contents of a file\n     * as a file system then it is highly implementation specific if the returned\n     * URI represents the given path in the file system or it represents a\n     * \u003cem\u003ecompound\u003c/em\u003e URI that encodes the URI of the enclosing file system.\n     * A format for compound URIs is not defined in this release; such a scheme\n     * may be added in a future release.\n     *\n     * @return  the URI representing this path\n     *\n     * @throws  java.io.IOError\n     *          if an I/O error occurs obtaining the absolute path, or where a\n     *          file system is constructed to access the contents of a file as\n     *          a file system, and the URI of the enclosing file system cannot be\n     *          obtained\n     *\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager\n     *          is installed, the {@link #toAbsolutePath toAbsolutePath} method\n     *          throws a security exception.\n     */\n    URI toUri();\n\n    /**\n     * Returns a {@code Path} object representing the absolute path of this\n     * path.\n     *\n     * \u003cp\u003e If this path is already {@link Path#isAbsolute absolute} then this\n     * method simply returns this path. Otherwise, this method resolves the path\n     * in an implementation dependent manner, typically by resolving the path\n     * against a file system default directory. Depending on the implementation,\n     * this method may throw an I/O error if the file system is not accessible.\n     *\n     * @return  a {@code Path} object representing the absolute path\n     *\n     * @throws  java.io.IOError\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, a security manager\n     *          is installed, and this path is not absolute, then the security\n     *          manager\u0027s {@link SecurityManager#checkPropertyAccess(String)\n     *          checkPropertyAccess} method is invoked to check access to the\n     *          system property {@code user.dir}\n     */\n    Path toAbsolutePath();\n\n    /**\n     * Returns the \u003cem\u003ereal\u003c/em\u003e path of an existing file.\n     *\n     * \u003cp\u003e The precise definition of this method is implementation dependent but\n     * in general it derives from this path, an {@link #isAbsolute absolute}\n     * path that locates the {@link Files#isSameFile same} file as this path, but\n     * with name elements that represent the actual name of the directories\n     * and the file. For example, where filename comparisons on a file system\n     * are case insensitive then the name elements represent the names in their\n     * actual case. Additionally, the resulting path has redundant name\n     * elements removed.\n     *\n     * \u003cp\u003e If this path is relative then its absolute path is first obtained,\n     * as if by invoking the {@link #toAbsolutePath toAbsolutePath} method.\n     *\n     * \u003cp\u003e The {@code options} array may be used to indicate how symbolic links\n     * are handled. By default, symbolic links are resolved to their final\n     * target. If the option {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} is\n     * present then this method does not resolve symbolic links.\n     *\n     * Some implementations allow special names such as \"{@code ..}\" to refer to\n     * the parent directory. When deriving the \u003cem\u003ereal path\u003c/em\u003e, and a\n     * \"{@code ..}\" (or equivalent) is preceded by a non-\"{@code ..}\" name then\n     * an implementation will typically cause both names to be removed. When\n     * not resolving symbolic links and the preceding name is a symbolic link\n     * then the names are only removed if it guaranteed that the resulting path\n     * will locate the same file as this path.\n     *\n     * @param   options\n     *          options indicating how symbolic links are handled\n     *\n     * @return  an absolute path represent the \u003cem\u003ereal\u003c/em\u003e path of the file\n     *          located by this object\n     *\n     * @throws  IOException\n     *          if the file does not exist or an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager\n     *          is installed, its {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file, and where\n     *          this path is not absolute, its {@link SecurityManager#checkPropertyAccess(String)\n     *          checkPropertyAccess} method is invoked to check access to the\n     *          system property {@code user.dir}\n     */\n    Path toRealPath(LinkOption... options) throws IOException;\n\n    /**\n     * Returns a {@link File} object representing this path. Where this {@code\n     * Path} is associated with the default provider, then this method is\n     * equivalent to returning a {@code File} object constructed with the\n     * {@code String} representation of this path.\n     *\n     * \u003cp\u003e If this path was created by invoking the {@code File} {@link\n     * File#toPath toPath} method then there is no guarantee that the {@code\n     * File} object returned by this method is {@link #equals equal} to the\n     * original {@code File}.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     new File(toString());\n     * }\u003c/pre\u003e\n     * if the {@code FileSystem} which created this {@code Path} is the default\n     * file system; otherwise an {@code UnsupportedOperationException} is\n     * thrown.\n     *\n     * @return  a {@code File} object representing this path\n     *\n     * @throws  UnsupportedOperationException\n     *          if this {@code Path} is not associated with the default provider\n     */\n    default File toFile() {\n        if (getFileSystem() \u003d\u003d FileSystems.getDefault()) {\n            return new File(toString());\n        } else {\n            throw new UnsupportedOperationException(\"Path not associated with \"\n                    + \"default file system.\");\n        }\n    }\n\n    // -- watchable --\n\n    /**\n     * Registers the file located by this path with a watch service.\n     *\n     * \u003cp\u003e In this release, this path locates a directory that exists. The\n     * directory is registered with the watch service so that entries in the\n     * directory can be watched. The {@code events} parameter is the events to\n     * register and may contain the following events:\n     * \u003cul\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_CREATE ENTRY_CREATE} -\n     *       entry created or moved into the directory\u003c/li\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_DELETE ENTRY_DELETE} -\n     *        entry deleted or moved out of the directory\u003c/li\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_MODIFY ENTRY_MODIFY} -\n     *        entry in directory was modified\u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e The {@link WatchEvent#context context} for these events is the\n     * relative path between the directory located by this path, and the path\n     * that locates the directory entry that is created, deleted, or modified.\n     *\n     * \u003cp\u003e The set of events may include additional implementation specific\n     * event that are not defined by the enum {@link StandardWatchEventKinds}\n     *\n     * \u003cp\u003e The {@code modifiers} parameter specifies \u003cem\u003emodifiers\u003c/em\u003e that\n     * qualify how the directory is registered. This release does not define any\n     * \u003cem\u003estandard\u003c/em\u003e modifiers. It may contain implementation specific\n     * modifiers.\n     *\n     * \u003cp\u003e Where a file is registered with a watch service by means of a symbolic\n     * link then it is implementation specific if the watch continues to depend\n     * on the existence of the symbolic link after it is registered.\n     *\n     * @param   watcher\n     *          the watch service to which this object is to be registered\n     * @param   events\n     *          the events for which this object should be registered\n     * @param   modifiers\n     *          the modifiers, if any, that modify how the object is registered\n     *\n     * @return  a key representing the registration of this object with the\n     *          given watch service\n     *\n     * @throws  UnsupportedOperationException\n     *          if unsupported events or modifiers are specified\n     * @throws  IllegalArgumentException\n     *          if an invalid combination of events or modifiers is specified\n     * @throws  ClosedWatchServiceException\n     *          if the watch service is closed\n     * @throws  NotDirectoryException\n     *          if the file is registered to watch the entries in a directory\n     *          and the file is not a directory  \u003ci\u003e(optional specific exception)\u003c/i\u003e\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     */\n    @Override\n    WatchKey register(WatchService watcher,\n                      WatchEvent.Kind\u003c?\u003e[] events,\n                      WatchEvent.Modifier... modifiers)\n        throws IOException;\n\n    /**\n     * Registers the file located by this path with a watch service.\n     *\n     * \u003cp\u003e An invocation of this method behaves in exactly the same way as the\n     * invocation\n     * \u003cpre\u003e\n     *     watchable.{@link #register(WatchService,WatchEvent.Kind[],WatchEvent.Modifier[]) register}(watcher, events, new WatchEvent.Modifier[0]);\n     * \u003c/pre\u003e\n     *\n     * \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e\n     * Suppose we wish to register a directory for entry create, delete, and modify\n     * events:\n     * \u003cpre\u003e\n     *     Path dir \u003d ...\n     *     WatchService watcher \u003d ...\n     *\n     *     WatchKey key \u003d dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);\n     * \u003c/pre\u003e\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     register(watcher, events, new WatchEvent.Modifier[0]);\n     * }\u003c/pre\u003e\n     *\n     * @param   watcher\n     *          The watch service to which this object is to be registered\n     * @param   events\n     *          The events for which this object should be registered\n     *\n     * @return  A key representing the registration of this object with the\n     *          given watch service\n     *\n     * @throws  UnsupportedOperationException\n     *          If unsupported events are specified\n     * @throws  IllegalArgumentException\n     *          If an invalid combination of events is specified\n     * @throws  ClosedWatchServiceException\n     *          If the watch service is closed\n     * @throws  NotDirectoryException\n     *          If the file is registered to watch the entries in a directory\n     *          and the file is not a directory  \u003ci\u003e(optional specific exception)\u003c/i\u003e\n     * @throws  IOException\n     *          If an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     */\n    @Override\n    default WatchKey register(WatchService watcher,\n                      WatchEvent.Kind\u003c?\u003e... events) throws IOException {\n        return register(watcher, events, new WatchEvent.Modifier[0]);\n    }\n\n    // -- Iterable --\n\n    /**\n     * Returns an iterator over the name elements of this path.\n     *\n     * \u003cp\u003e The first element returned by the iterator represents the name\n     * element that is closest to the root in the directory hierarchy, the\n     * second element is the next closest, and so on. The last element returned\n     * is the name of the file or directory denoted by this path. The {@link\n     * #getRoot root} component, if present, is not returned by the iterator.\n     *\n     * @implSpec\n     * The default implementation returns an {@code Iterator\u003cPath\u003e} which, for\n     * this path, traverses the {@code Path}s returned by\n     * {@code getName(index)}, where {@code index} ranges from zero to\n     * {@code getNameCount() - 1}, inclusive.\n     *\n     * @return  an iterator over the name elements of this path.\n     */\n    @Override\n    default Iterator\u003cPath\u003e iterator() {\n        return new Iterator\u003c\u003e() {\n            private int i \u003d 0;\n\n            @Override\n            public boolean hasNext() {\n                return (i \u003c getNameCount());\n            }\n\n            @Override\n            public Path next() {\n                if (i \u003c getNameCount()) {\n                    Path result \u003d getName(i);\n                    i++;\n                    return result;\n                } else {\n                    throw new NoSuchElementException();\n                }\n            }\n        };\n    }\n\n    // -- compareTo/equals/hashCode --\n\n    /**\n     * Compares two abstract paths lexicographically. The ordering defined by\n     * this method is provider specific, and in the case of the default\n     * provider, platform specific. This method does not access the file system\n     * and neither file is required to exist.\n     *\n     * \u003cp\u003e This method may not be used to compare paths that are associated\n     * with different file system providers.\n     *\n     * @param   other  the path compared to this path.\n     *\n     * @return  zero if the argument is {@link #equals equal} to this path, a\n     *          value less than zero if this path is lexicographically less than\n     *          the argument, or a value greater than zero if this path is\n     *          lexicographically greater than the argument\n     *\n     * @throws  ClassCastException\n     *          if the paths are associated with different providers\n     */\n    @Override\n    int compareTo(Path other);\n\n    /**\n     * Tests this path for equality with the given object.\n     *\n     * \u003cp\u003e If the given object is not a Path, or is a Path associated with a\n     * different {@code FileSystem}, then this method returns {@code false}.\n     *\n     * \u003cp\u003e Whether or not two path are equal depends on the file system\n     * implementation. In some cases the paths are compared without regard\n     * to case, and others are case sensitive. This method does not access the\n     * file system and the file is not required to exist. Where required, the\n     * {@link Files#isSameFile isSameFile} method may be used to check if two\n     * paths locate the same file.\n     *\n     * \u003cp\u003e This method satisfies the general contract of the {@link\n     * java.lang.Object#equals(Object) Object.equals} method. \u003c/p\u003e\n     *\n     * @param   other\n     *          the object to which this object is to be compared\n     *\n     * @return  {@code true} if, and only if, the given object is a {@code Path}\n     *          that is identical to this {@code Path}\n     */\n    boolean equals(Object other);\n\n    /**\n     * Computes a hash code for this path.\n     *\n     * \u003cp\u003e The hash code is based upon the components of the path, and\n     * satisfies the general contract of the {@link Object#hashCode\n     * Object.hashCode} method.\n     *\n     * @return  the hash-code value for this path\n     */\n    int hashCode();\n\n    /**\n     * Returns the string representation of this path.\n     *\n     * \u003cp\u003e If this path was created by converting a path string using the\n     * {@link FileSystem#getPath getPath} method then the path string returned\n     * by this method may differ from the original String used to create the path.\n     *\n     * \u003cp\u003e The returned path string uses the default name {@link\n     * FileSystem#getSeparator separator} to separate names in the path.\n     *\n     * @return  the string representation of this path\n     */\n    String toString();\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor16.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:319)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 23 more

Oct 10, 2023 3:02:48 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:329)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 23 more

2023.10.10 15:02:48 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:02:48 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:03:03 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\TreeInterface.scala
2023.10.10 15:03:09 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\TreeInterface.scala
2023.10.10 15:03:09 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\TreeInterface.scala
2023.10.10 15:03:09 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\TreeInterface.scala
2023.10.10 15:07:44 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:07:45 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:08:06 WARN  Using indexes to guess the definition of apply
2023.10.10 15:08:07 WARN  Using indexes to guess the definition of apply
2023.10.10 15:17:22 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:18:11 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:22:12 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 10, 2023 3:25:17 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1430
2023.10.10 15:26:58 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:29:32 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:29:41 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:31:30 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:36:24 WARN  Using indexes to guess the definition of FunSuite
2023.10.10 15:36:31 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:36:47 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:38:42 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:39:20 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:41:24 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:41:44 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\contains.scala
2023.10.10 15:41:47 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\contains.scala
2023.10.10 15:50:04 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:51:41 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:52:29 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:53:07 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:53:07 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:53:09 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:54:19 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:56:24 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:56:25 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 10, 2023 3:58:00 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2845
2023.10.10 15:59:29 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 15:59:55 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 16:00:34 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 10, 2023 4:03:00 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3217
2023.10.10 16:06:26 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 10, 2023 4:07:30 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3382
2023.10.10 16:16:54 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 16:18:44 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 16:20:39 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 10, 2023 4:24:34 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4042
2023.10.10 16:24:59 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 16:26:06 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 16:26:41 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 16:26:41 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 16:27:04 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 16:27:09 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 16:27:11 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 16:27:52 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 16:28:13 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 16:28:13 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 16:28:13 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 16:29:00 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 16:29:39 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 16:29:40 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 16:34:18 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 16:43:55 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 16:45:20 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 16:47:02 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 16:47:15 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 16:47:55 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 10, 2023 4:50:16 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4944
Oct 10, 2023 4:51:34 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5016
2023.10.10 16:56:09 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 17:04:19 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 10, 2023 5:06:02 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5589
2023.10.10 17:06:36 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 17:06:58 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 17:07:06 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 17:07:53 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 17:08:04 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 17:08:04 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 17:08:04 WARN  Using indexes to guess the definition of Node
2023.10.10 17:08:07 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 17:09:15 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 17:09:24 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 17:09:24 WARN  Using indexes to guess the definition of Path
2023.10.10 17:09:24 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:670)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	jdk.internal.reflect.GeneratedMethodAccessor21.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 10, 2023 5:09:24 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.nio.file;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.nio.file.spi.FileSystemProvider;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\n/**\n * An object that may be used to locate a file in a file system. It will\n * typically represent a system dependent file path.\n *\n * \u003cp\u003e A {@code Path} represents a path that is hierarchical and composed of a\n * sequence of directory and file name elements separated by a special separator\n * or delimiter. A \u003cem\u003eroot component\u003c/em\u003e, that identifies a file system\n * hierarchy, may also be present. The name element that is \u003cem\u003efarthest\u003c/em\u003e\n * from the root of the directory hierarchy is the name of a file or directory.\n * The other name elements are directory names. A {@code Path} can represent a\n * root, a root and a sequence of names, or simply one or more name elements.\n * A {@code Path} is considered to be an \u003ci\u003eempty path\u003c/i\u003e if it consists\n * solely of one name element that is empty. Accessing a file using an\n * \u003ci\u003eempty path\u003c/i\u003e is equivalent to accessing the default directory of the\n * file system. {@code Path} defines the {@link #getFileName() getFileName},\n * {@link #getParent getParent}, {@link #getRoot getRoot}, and {@link #subpath\n * subpath} methods to access the path components or a subsequence of its name\n * elements.\n *\n * \u003cp\u003e In addition to accessing the components of a path, a {@code Path} also\n * defines the {@link #resolve(Path) resolve} and {@link #resolveSibling(Path)\n * resolveSibling} methods to combine paths. The {@link #relativize relativize}\n * method that can be used to construct a relative path between two paths.\n * Paths can be {@link #compareTo compared}, and tested against each other using\n * the {@link #startsWith startsWith} and {@link #endsWith endsWith} methods.\n *\n * \u003cp\u003e This interface extends {@link Watchable} interface so that a directory\n * located by a path can be {@link #register registered} with a {@link\n * WatchService} and entries in the directory watched. \u003c/p\u003e\n *\n * \u003cp\u003e \u003cb\u003eWARNING:\u003c/b\u003e This interface is only intended to be implemented by\n * those developing custom file system implementations. Methods may be added to\n * this interface in future releases. \u003c/p\u003e\n *\n * \u003ch2\u003eAccessing Files\u003c/h2\u003e\n * \u003cp\u003e Paths may be used with the {@link Files} class to operate on files,\n * directories, and other types of files. For example, suppose we want a {@link\n * java.io.BufferedReader} to read text from a file \"{@code access.log}\". The\n * file is located in a directory \"{@code logs}\" relative to the current working\n * directory and is UTF-8 encoded.\n * \u003cpre\u003e\n *     Path path \u003d FileSystems.getDefault().getPath(\"logs\", \"access.log\");\n *     BufferedReader reader \u003d Files.newBufferedReader(path, StandardCharsets.UTF_8);\n * \u003c/pre\u003e\n *\n * \u003ca id\u003d\"interop\"\u003e\u003c/a\u003e\u003ch2\u003eInteroperability\u003c/h2\u003e\n * \u003cp\u003e Paths associated with the default {@link\n * java.nio.file.spi.FileSystemProvider provider} are generally interoperable\n * with the {@link java.io.File java.io.File} class. Paths created by other\n * providers are unlikely to be interoperable with the abstract path names\n * represented by {@code java.io.File}. The {@link java.io.File#toPath toPath}\n * method may be used to obtain a {@code Path} from the abstract path name\n * represented by a {@code java.io.File} object. The resulting {@code Path} can\n * be used to operate on the same file as the {@code java.io.File} object. In\n * addition, the {@link #toFile toFile} method is useful to construct a {@code\n * File} from the {@code String} representation of a {@code Path}.\n *\n * \u003ch2\u003eConcurrency\u003c/h2\u003e\n * \u003cp\u003e Implementations of this interface are immutable and safe for use by\n * multiple concurrent threads.\n *\n * @since 1.7\n */\n\npublic interface Path\n    extends Comparable\u003cPath\u003e, Iterable\u003cPath\u003e, Watchable\n{\n    /**\n     * Returns a {@code Path} by converting a path string, or a sequence of\n     * strings that when joined form a path string. If {@code more} does not\n     * specify any elements then the value of the {@code first} parameter is\n     * the path string to convert. If {@code more} specifies one or more\n     * elements then each non-empty string, including {@code first}, is\n     * considered to be a sequence of name elements and is joined to form a\n     * path string. The details as to how the Strings are joined is provider\n     * specific but typically they will be joined using the\n     * {@link FileSystem#getSeparator name-separator} as the separator.\n     * For example, if the name separator is \"{@code /}\" and\n     * {@code getPath(\"/foo\",\"bar\",\"gus\")} is invoked, then the path string\n     * {@code \"/foo/bar/gus\"} is converted to a {@code Path}. A {@code Path}\n     * representing an empty path is returned if {@code first} is the empty\n     * string and {@code more} does not contain any non-empty strings.\n     *\n     * \u003cp\u003e The {@code Path} is obtained by invoking the {@link FileSystem#getPath\n     * getPath} method of the {@link FileSystems#getDefault default} {@link\n     * FileSystem}.\n     *\n     * \u003cp\u003e Note that while this method is very convenient, using it will imply\n     * an assumed reference to the default {@code FileSystem} and limit the\n     * utility of the calling code. Hence it should not be used in library code\n     * intended for flexible reuse. A more flexible alternative is to use an\n     * existing {@code Path} instance as an anchor, such as:\n     * \u003cpre\u003e{@code\n     *     Path dir \u003d ...\n     *     Path path \u003d dir.resolve(\"file\");\n     * }\u003c/pre\u003e\n     *\n     * @param   first\n     *          the path string or initial part of the path string\n     * @param   more\n     *          additional strings to be joined to form the path string\n     *\n     * @return  the resulting {@code Path}\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a {@code Path}\n     *\n     * @see FileSystem#getPath\n     *\n     * @since 11\n     */\n    public static Path of(String first, String... more) {\n        return FileSystems.getDefault().getPath(first, more);\n    }\n\n    /**\n     * Returns a {@code Path} by converting a URI.\n     *\n     * \u003cp\u003e This method iterates over the {@link FileSystemProvider#installedProviders()\n     * installed} providers to locate the provider that is identified by the\n     * URI {@link URI#getScheme scheme} of the given URI. URI schemes are\n     * compared without regard to case. If the provider is found then its {@link\n     * FileSystemProvider#getPath getPath} method is invoked to convert the\n     * URI.\n     *\n     * \u003cp\u003e In the case of the default provider, identified by the URI scheme\n     * \"file\", the given URI has a non-empty path component, and undefined query\n     * and fragment components. Whether the authority component may be present\n     * is platform specific. The returned {@code Path} is associated with the\n     * {@link FileSystems#getDefault default} file system.\n     *\n     * \u003cp\u003e The default provider provides a similar \u003cem\u003eround-trip\u003c/em\u003e guarantee\n     * to the {@link java.io.File} class. For a given {@code Path} \u003ci\u003ep\u003c/i\u003e it\n     * is guaranteed that\n     * \u003cblockquote\u003e{@code\n     * Path.of(}\u003ci\u003ep\u003c/i\u003e{@code .}{@link Path#toUri() toUri}{@code ()).equals(}\n     * \u003ci\u003ep\u003c/i\u003e{@code .}{@link Path#toAbsolutePath() toAbsolutePath}{@code ())}\n     * \u003c/blockquote\u003e\n     * so long as the original {@code Path}, the {@code URI}, and the new {@code\n     * Path} are all created in (possibly different invocations of) the same\n     * Java virtual machine. Whether other providers make any guarantees is\n     * provider specific and therefore unspecified.\n     *\n     * @param   uri\n     *          the URI to convert\n     *\n     * @return  the resulting {@code Path}\n     *\n     * @throws  IllegalArgumentException\n     *          if preconditions on the {@code uri} parameter do not hold. The\n     *          format of the URI is provider specific.\n     * @throws  FileSystemNotFoundException\n     *          The file system, identified by the URI, does not exist and\n     *          cannot be created automatically, or the provider identified by\n     *          the URI\u0027s scheme component is not installed\n     * @throws  SecurityException\n     *          if a security manager is installed and it denies an unspecified\n     *          permission to access the file system\n     *\n     * @since 11\n     */\n    public static Path of(URI uri) {\n        String scheme \u003d  uri.getScheme();\n        if (scheme \u003d\u003d null)\n            throw new IllegalArgumentException(\"Missing scheme\");\n\n        // check for default provider to avoid loading of installed providers\n        if (scheme.equalsIgnoreCase(\"file\"))\n            return FileSystems.getDefault().provider().getPath(uri);\n\n        // try to find provider\n        for (FileSystemProvider provider: FileSystemProvider.installedProviders()) {\n            if (provider.getScheme().equalsIgnoreCase(scheme)) {\n                return provider.getPath(uri);\n            }\n        }\n\n        throw new FileSystemNotFoundException(\"Provider \\\"\" + scheme + \"\\\" not installed\");\n    }\n\n    /**\n     * Returns the file system that created this object.\n     *\n     * @return  the file system that created this object\n     */\n    FileSystem getFileSystem();\n\n    /**\n     * Tells whether or not this path is absolute.\n     *\n     * \u003cp\u003e An absolute path is complete in that it doesn\u0027t need to be combined\n     * with other path information in order to locate a file.\n     *\n     * @return  {@code true} if, and only if, this path is absolute\n     */\n    boolean isAbsolute();\n\n    /**\n     * Returns the root component of this path as a {@code Path} object,\n     * or {@code null} if this path does not have a root component.\n     *\n     * @return  a path representing the root component of this path,\n     *          or {@code null}\n     */\n    Path getRoot();\n\n    /**\n     * Returns the name of the file or directory denoted by this path as a\n     * {@code Path} object. The file name is the \u003cem\u003efarthest\u003c/em\u003e element from\n     * the root in the directory hierarchy.\n     *\n     * @return  a path representing the name of the file or directory, or\n     *          {@code null} if this path has zero elements\n     */\n    Path getFileName();\n\n    /**\n     * Returns the \u003cem\u003eparent path\u003c/em\u003e, or {@code null} if this path does not\n     * have a parent.\n     *\n     * \u003cp\u003e The parent of this path object consists of this path\u0027s root\n     * component, if any, and each element in the path except for the\n     * \u003cem\u003efarthest\u003c/em\u003e from the root in the directory hierarchy. This method\n     * does not access the file system; the path or its parent may not exist.\n     * Furthermore, this method does not eliminate special names such as \".\"\n     * and \"..\" that may be used in some implementations. On UNIX for example,\n     * the parent of \"{@code /a/b/c}\" is \"{@code /a/b}\", and the parent of\n     * {@code \"x/y/.}\" is \"{@code x/y}\". This method may be used with the {@link\n     * #normalize normalize} method, to eliminate redundant names, for cases where\n     * \u003cem\u003eshell-like\u003c/em\u003e navigation is required.\n     *\n     * \u003cp\u003e If this path has more than one element, and no root component, then\n     * this method is equivalent to evaluating the expression:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * subpath(0,\u0026nbsp;getNameCount()-1);\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @return  a path representing the path\u0027s parent\n     */\n    Path getParent();\n\n    /**\n     * Returns the number of name elements in the path.\n     *\n     * @return  the number of elements in the path, or {@code 0} if this path\n     *          only represents a root component\n     */\n    int getNameCount();\n\n    /**\n     * Returns a name element of this path as a {@code Path} object.\n     *\n     * \u003cp\u003e The {@code index} parameter is the index of the name element to return.\n     * The element that is \u003cem\u003eclosest\u003c/em\u003e to the root in the directory hierarchy\n     * has index {@code 0}. The element that is \u003cem\u003efarthest\u003c/em\u003e from the root\n     * has index {@link #getNameCount count}{@code -1}.\n     *\n     * @param   index\n     *          the index of the element\n     *\n     * @return  the name element\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code index} is negative, {@code index} is greater than or\n     *          equal to the number of elements, or this path has zero name\n     *          elements\n     */\n    Path getName(int index);\n\n    /**\n     * Returns a relative {@code Path} that is a subsequence of the name\n     * elements of this path.\n     *\n     * \u003cp\u003e The {@code beginIndex} and {@code endIndex} parameters specify the\n     * subsequence of name elements. The name that is \u003cem\u003eclosest\u003c/em\u003e to the root\n     * in the directory hierarchy has index {@code 0}. The name that is\n     * \u003cem\u003efarthest\u003c/em\u003e from the root has index {@link #getNameCount\n     * count}{@code -1}. The returned {@code Path} object has the name elements\n     * that begin at {@code beginIndex} and extend to the element at index {@code\n     * endIndex-1}.\n     *\n     * @param   beginIndex\n     *          the index of the first element, inclusive\n     * @param   endIndex\n     *          the index of the last element, exclusive\n     *\n     * @return  a new {@code Path} object that is a subsequence of the name\n     *          elements in this {@code Path}\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code beginIndex} is negative, or greater than or equal to\n     *          the number of elements. If {@code endIndex} is less than or\n     *          equal to {@code beginIndex}, or larger than the number of elements.\n     */\n    Path subpath(int beginIndex, int endIndex);\n\n    /**\n     * Tests if this path starts with the given path.\n     *\n     * \u003cp\u003e This path \u003cem\u003estarts\u003c/em\u003e with the given path if this path\u0027s root\n     * component \u003cem\u003estarts\u003c/em\u003e with the root component of the given path,\n     * and this path starts with the same name elements as the given path.\n     * If the given path has more name elements than this path then {@code false}\n     * is returned.\n     *\n     * \u003cp\u003e Whether or not the root component of this path starts with the root\n     * component of the given path is file system specific. If this path does\n     * not have a root component and the given path has a root component then\n     * this path does not start with the given path.\n     *\n     * \u003cp\u003e If the given path is associated with a different {@code FileSystem}\n     * to this path then {@code false} is returned.\n     *\n     * @param   other\n     *          the given path\n     *\n     * @return  {@code true} if this path starts with the given path; otherwise\n     *          {@code false}\n     */\n    boolean startsWith(Path other);\n\n    /**\n     * Tests if this path starts with a {@code Path}, constructed by converting\n     * the given path string, in exactly the manner specified by the {@link\n     * #startsWith(Path) startsWith(Path)} method. On UNIX for example, the path\n     * \"{@code foo/bar}\" starts with \"{@code foo}\" and \"{@code foo/bar}\". It\n     * does not start with \"{@code f}\" or \"{@code fo}\".\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     startsWith(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the given path string\n     *\n     * @return  {@code true} if this path starts with the given path; otherwise\n     *          {@code false}\n     *\n     * @throws  InvalidPathException\n     *          If the path string cannot be converted to a Path.\n     */\n    default boolean startsWith(String other) {\n        return startsWith(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Tests if this path ends with the given path.\n     *\n     * \u003cp\u003e If the given path has \u003cem\u003eN\u003c/em\u003e elements, and no root component,\n     * and this path has \u003cem\u003eN\u003c/em\u003e or more elements, then this path ends with\n     * the given path if the last \u003cem\u003eN\u003c/em\u003e elements of each path, starting at\n     * the element farthest from the root, are equal.\n     *\n     * \u003cp\u003e If the given path has a root component then this path ends with the\n     * given path if the root component of this path \u003cem\u003eends with\u003c/em\u003e the root\n     * component of the given path, and the corresponding elements of both paths\n     * are equal. Whether or not the root component of this path ends with the\n     * root component of the given path is file system specific. If this path\n     * does not have a root component and the given path has a root component\n     * then this path does not end with the given path.\n     *\n     * \u003cp\u003e If the given path is associated with a different {@code FileSystem}\n     * to this path then {@code false} is returned.\n     *\n     * @param   other\n     *          the given path\n     *\n     * @return  {@code true} if this path ends with the given path; otherwise\n     *          {@code false}\n     */\n    boolean endsWith(Path other);\n\n    /**\n     * Tests if this path ends with a {@code Path}, constructed by converting\n     * the given path string, in exactly the manner specified by the {@link\n     * #endsWith(Path) endsWith(Path)} method. On UNIX for example, the path\n     * \"{@code foo/bar}\" ends with \"{@code foo/bar}\" and \"{@code bar}\". It does\n     * not end with \"{@code r}\" or \"{@code /bar}\". Note that trailing separators\n     * are not taken into account, and so invoking this method on the {@code\n     * Path}\"{@code foo/bar}\" with the {@code String} \"{@code bar/}\" returns\n     * {@code true}.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     endsWith(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the given path string\n     *\n     * @return  {@code true} if this path ends with the given path; otherwise\n     *          {@code false}\n     *\n     * @throws  InvalidPathException\n     *          If the path string cannot be converted to a Path.\n     */\n    default boolean endsWith(String other) {\n        return endsWith(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Returns a path that is this path with redundant name elements eliminated.\n     *\n     * \u003cp\u003e The precise definition of this method is implementation dependent but\n     * in general it derives from this path, a path that does not contain\n     * \u003cem\u003eredundant\u003c/em\u003e name elements. In many file systems, the \"{@code .}\"\n     * and \"{@code ..}\" are special names used to indicate the current directory\n     * and parent directory. In such file systems all occurrences of \"{@code .}\"\n     * are considered redundant. If a \"{@code ..}\" is preceded by a\n     * non-\"{@code ..}\" name then both names are considered redundant (the\n     * process to identify such names is repeated until it is no longer\n     * applicable).\n     *\n     * \u003cp\u003e This method does not access the file system; the path may not locate\n     * a file that exists. Eliminating \"{@code ..}\" and a preceding name from a\n     * path may result in the path that locates a different file than the original\n     * path. This can arise when the preceding name is a symbolic link.\n     *\n     * @return  the resulting path or this path if it does not contain\n     *          redundant name elements; an empty path is returned if this path\n     *          does not have a root component and all name elements are redundant\n     *\n     * @see #getParent\n     * @see #toRealPath\n     */\n    Path normalize();\n\n    // -- resolution and relativization --\n\n    /**\n     * Resolve the given path against this path.\n     *\n     * \u003cp\u003e If the {@code other} parameter is an {@link #isAbsolute() absolute}\n     * path then this method trivially returns {@code other}. If {@code other}\n     * is an \u003ci\u003eempty path\u003c/i\u003e then this method trivially returns this path.\n     * Otherwise this method considers this path to be a directory and resolves\n     * the given path against this path. In the simplest case, the given path\n     * does not have a {@link #getRoot root} component, in which case this method\n     * \u003cem\u003ejoins\u003c/em\u003e the given path to this path and returns a resulting path\n     * that {@link #endsWith ends} with the given path. Where the given path has\n     * a root component then resolution is highly implementation dependent and\n     * therefore unspecified.\n     *\n     * @param   other\n     *          the path to resolve against this path\n     *\n     * @return  the resulting path\n     *\n     * @see #relativize\n     */\n    Path resolve(Path other);\n\n    /**\n     * Converts a given path string to a {@code Path} and resolves it against\n     * this {@code Path} in exactly the manner specified by the {@link\n     * #resolve(Path) resolve} method. For example, suppose that the name\n     * separator is \"{@code /}\" and a path represents \"{@code foo/bar}\", then\n     * invoking this method with the path string \"{@code gus}\" will result in\n     * the {@code Path} \"{@code foo/bar/gus}\".\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     resolve(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the path string to resolve against this path\n     *\n     * @return  the resulting path\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a Path.\n     *\n     * @see FileSystem#getPath\n     */\n    default Path resolve(String other) {\n        return resolve(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Resolves the given path against this path\u0027s {@link #getParent parent}\n     * path. This is useful where a file name needs to be \u003ci\u003ereplaced\u003c/i\u003e with\n     * another file name. For example, suppose that the name separator is\n     * \"{@code /}\" and a path represents \"{@code dir1/dir2/foo}\", then invoking\n     * this method with the {@code Path} \"{@code bar}\" will result in the {@code\n     * Path} \"{@code dir1/dir2/bar}\". If this path does not have a parent path,\n     * or {@code other} is {@link #isAbsolute() absolute}, then this method\n     * returns {@code other}. If {@code other} is an empty path then this method\n     * returns this path\u0027s parent, or where this path doesn\u0027t have a parent, the\n     * empty path.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     (getParent() \u003d\u003d null) ? other : getParent().resolve(other);\n     * }\u003c/pre\u003e\n     * unless {@code other \u003d\u003d null}, in which case a\n     * {@code NullPointerException} is thrown.\n     *\n     * @param   other\n     *          the path to resolve against this path\u0027s parent\n     *\n     * @return  the resulting path\n     *\n     * @see #resolve(Path)\n     */\n    default Path resolveSibling(Path other) {\n        if (other \u003d\u003d null)\n            throw new NullPointerException();\n        Path parent \u003d getParent();\n        return (parent \u003d\u003d null) ? other : parent.resolve(other);\n    }\n\n    /**\n     * Converts a given path string to a {@code Path} and resolves it against\n     * this path\u0027s {@link #getParent parent} path in exactly the manner\n     * specified by the {@link #resolveSibling(Path) resolveSibling} method.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     resolveSibling(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the path string to resolve against this path\u0027s parent\n     *\n     * @return  the resulting path\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a Path.\n     *\n     * @see FileSystem#getPath\n     */\n    default Path resolveSibling(String other) {\n        return resolveSibling(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Constructs a relative path between this path and a given path.\n     *\n     * \u003cp\u003e Relativization is the inverse of {@link #resolve(Path) resolution}.\n     * This method attempts to construct a {@link #isAbsolute relative} path\n     * that when {@link #resolve(Path) resolved} against this path, yields a\n     * path that locates the same file as the given path. For example, on UNIX,\n     * if this path is {@code \"/a/b\"} and the given path is {@code \"/a/b/c/d\"}\n     * then the resulting relative path would be {@code \"c/d\"}. Where this\n     * path and the given path do not have a {@link #getRoot root} component,\n     * then a relative path can be constructed. A relative path cannot be\n     * constructed if only one of the paths have a root component. Where both\n     * paths have a root component then it is implementation dependent if a\n     * relative path can be constructed. If this path and the given path are\n     * {@link #equals equal} then an \u003ci\u003eempty path\u003c/i\u003e is returned.\n     *\n     * \u003cp\u003e For any two {@link #normalize normalized} paths \u003ci\u003ep\u003c/i\u003e and\n     * \u003ci\u003eq\u003c/i\u003e, where \u003ci\u003eq\u003c/i\u003e does not have a root component,\n     * \u003cblockquote\u003e\n     *   \u003ci\u003ep\u003c/i\u003e{@code .relativize(}\u003ci\u003ep\u003c/i\u003e\n     *   {@code .resolve(}\u003ci\u003eq\u003c/i\u003e{@code )).equals(}\u003ci\u003eq\u003c/i\u003e{@code )}\n     * \u003c/blockquote\u003e\n     *\n     * \u003cp\u003e When symbolic links are supported, then whether the resulting path,\n     * when resolved against this path, yields a path that can be used to locate\n     * the {@link Files#isSameFile same} file as {@code other} is implementation\n     * dependent. For example, if this path is  {@code \"/a/b\"} and the given\n     * path is {@code \"/a/x\"} then the resulting relative path may be {@code\n     * \"../x\"}. If {@code \"b\"} is a symbolic link then is implementation\n     * dependent if {@code \"a/b/../x\"} would locate the same file as {@code \"/a/x\"}.\n     *\n     * @param   other\n     *          the path to relativize against this path\n     *\n     * @return  the resulting relative path, or an empty path if both paths are\n     *          equal\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code other} is not a {@code Path} that can be relativized\n     *          against this path\n     */\n    Path relativize(Path other);\n\n    /**\n     * Returns a URI to represent this path.\n     *\n     * \u003cp\u003e This method constructs an absolute {@link URI} with a {@link\n     * URI#getScheme() scheme} equal to the URI scheme that identifies the\n     * provider. The exact form of the scheme specific part is highly provider\n     * dependent.\n     *\n     * \u003cp\u003e In the case of the default provider, the URI is hierarchical with\n     * a {@link URI#getPath() path} component that is absolute. The query and\n     * fragment components are undefined. Whether the authority component is\n     * defined or not is implementation dependent. There is no guarantee that\n     * the {@code URI} may be used to construct a {@link java.io.File java.io.File}.\n     * In particular, if this path represents a Universal Naming Convention (UNC)\n     * path, then the UNC server name may be encoded in the authority component\n     * of the resulting URI. In the case of the default provider, and the file\n     * exists, and it can be determined that the file is a directory, then the\n     * resulting {@code URI} will end with a slash.\n     *\n     * \u003cp\u003e The default provider provides a similar \u003cem\u003eround-trip\u003c/em\u003e guarantee\n     * to the {@link java.io.File} class. For a given {@code Path} \u003ci\u003ep\u003c/i\u003e it\n     * is guaranteed that\n     * \u003cblockquote\u003e\n     * {@link Path#of(URI) Path.of}{@code (}\u003ci\u003ep\u003c/i\u003e{@code .toUri()).equals(}\u003ci\u003ep\u003c/i\u003e\n     * {@code .}{@link #toAbsolutePath() toAbsolutePath}{@code ())}\n     * \u003c/blockquote\u003e\n     * so long as the original {@code Path}, the {@code URI}, and the new {@code\n     * Path} are all created in (possibly different invocations of) the same\n     * Java virtual machine. Whether other providers make any guarantees is\n     * provider specific and therefore unspecified.\n     *\n     * \u003cp\u003e When a file system is constructed to access the contents of a file\n     * as a file system then it is highly implementation specific if the returned\n     * URI represents the given path in the file system or it represents a\n     * \u003cem\u003ecompound\u003c/em\u003e URI that encodes the URI of the enclosing file system.\n     * A format for compound URIs is not defined in this release; such a scheme\n     * may be added in a future release.\n     *\n     * @return  the URI representing this path\n     *\n     * @throws  java.io.IOError\n     *          if an I/O error occurs obtaining the absolute path, or where a\n     *          file system is constructed to access the contents of a file as\n     *          a file system, and the URI of the enclosing file system cannot be\n     *          obtained\n     *\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager\n     *          is installed, the {@link #toAbsolutePath toAbsolutePath} method\n     *          throws a security exception.\n     */\n    URI toUri();\n\n    /**\n     * Returns a {@code Path} object representing the absolute path of this\n     * path.\n     *\n     * \u003cp\u003e If this path is already {@link Path#isAbsolute absolute} then this\n     * method simply returns this path. Otherwise, this method resolves the path\n     * in an implementation dependent manner, typically by resolving the path\n     * against a file system default directory. Depending on the implementation,\n     * this method may throw an I/O error if the file system is not accessible.\n     *\n     * @return  a {@code Path} object representing the absolute path\n     *\n     * @throws  java.io.IOError\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, a security manager\n     *          is installed, and this path is not absolute, then the security\n     *          manager\u0027s {@link SecurityManager#checkPropertyAccess(String)\n     *          checkPropertyAccess} method is invoked to check access to the\n     *          system property {@code user.dir}\n     */\n    Path toAbsolutePath();\n\n    /**\n     * Returns the \u003cem\u003ereal\u003c/em\u003e path of an existing file.\n     *\n     * \u003cp\u003e The precise definition of this method is implementation dependent but\n     * in general it derives from this path, an {@link #isAbsolute absolute}\n     * path that locates the {@link Files#isSameFile same} file as this path, but\n     * with name elements that represent the actual name of the directories\n     * and the file. For example, where filename comparisons on a file system\n     * are case insensitive then the name elements represent the names in their\n     * actual case. Additionally, the resulting path has redundant name\n     * elements removed.\n     *\n     * \u003cp\u003e If this path is relative then its absolute path is first obtained,\n     * as if by invoking the {@link #toAbsolutePath toAbsolutePath} method.\n     *\n     * \u003cp\u003e The {@code options} array may be used to indicate how symbolic links\n     * are handled. By default, symbolic links are resolved to their final\n     * target. If the option {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} is\n     * present then this method does not resolve symbolic links.\n     *\n     * Some implementations allow special names such as \"{@code ..}\" to refer to\n     * the parent directory. When deriving the \u003cem\u003ereal path\u003c/em\u003e, and a\n     * \"{@code ..}\" (or equivalent) is preceded by a non-\"{@code ..}\" name then\n     * an implementation will typically cause both names to be removed. When\n     * not resolving symbolic links and the preceding name is a symbolic link\n     * then the names are only removed if it guaranteed that the resulting path\n     * will locate the same file as this path.\n     *\n     * @param   options\n     *          options indicating how symbolic links are handled\n     *\n     * @return  an absolute path represent the \u003cem\u003ereal\u003c/em\u003e path of the file\n     *          located by this object\n     *\n     * @throws  IOException\n     *          if the file does not exist or an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager\n     *          is installed, its {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file, and where\n     *          this path is not absolute, its {@link SecurityManager#checkPropertyAccess(String)\n     *          checkPropertyAccess} method is invoked to check access to the\n     *          system property {@code user.dir}\n     */\n    Path toRealPath(LinkOption... options) throws IOException;\n\n    /**\n     * Returns a {@link File} object representing this path. Where this {@code\n     * Path} is associated with the default provider, then this method is\n     * equivalent to returning a {@code File} object constructed with the\n     * {@code String} representation of this path.\n     *\n     * \u003cp\u003e If this path was created by invoking the {@code File} {@link\n     * File#toPath toPath} method then there is no guarantee that the {@code\n     * File} object returned by this method is {@link #equals equal} to the\n     * original {@code File}.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     new File(toString());\n     * }\u003c/pre\u003e\n     * if the {@code FileSystem} which created this {@code Path} is the default\n     * file system; otherwise an {@code UnsupportedOperationException} is\n     * thrown.\n     *\n     * @return  a {@code File} object representing this path\n     *\n     * @throws  UnsupportedOperationException\n     *          if this {@code Path} is not associated with the default provider\n     */\n    default File toFile() {\n        if (getFileSystem() \u003d\u003d FileSystems.getDefault()) {\n            return new File(toString());\n        } else {\n            throw new UnsupportedOperationException(\"Path not associated with \"\n                    + \"default file system.\");\n        }\n    }\n\n    // -- watchable --\n\n    /**\n     * Registers the file located by this path with a watch service.\n     *\n     * \u003cp\u003e In this release, this path locates a directory that exists. The\n     * directory is registered with the watch service so that entries in the\n     * directory can be watched. The {@code events} parameter is the events to\n     * register and may contain the following events:\n     * \u003cul\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_CREATE ENTRY_CREATE} -\n     *       entry created or moved into the directory\u003c/li\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_DELETE ENTRY_DELETE} -\n     *        entry deleted or moved out of the directory\u003c/li\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_MODIFY ENTRY_MODIFY} -\n     *        entry in directory was modified\u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e The {@link WatchEvent#context context} for these events is the\n     * relative path between the directory located by this path, and the path\n     * that locates the directory entry that is created, deleted, or modified.\n     *\n     * \u003cp\u003e The set of events may include additional implementation specific\n     * event that are not defined by the enum {@link StandardWatchEventKinds}\n     *\n     * \u003cp\u003e The {@code modifiers} parameter specifies \u003cem\u003emodifiers\u003c/em\u003e that\n     * qualify how the directory is registered. This release does not define any\n     * \u003cem\u003estandard\u003c/em\u003e modifiers. It may contain implementation specific\n     * modifiers.\n     *\n     * \u003cp\u003e Where a file is registered with a watch service by means of a symbolic\n     * link then it is implementation specific if the watch continues to depend\n     * on the existence of the symbolic link after it is registered.\n     *\n     * @param   watcher\n     *          the watch service to which this object is to be registered\n     * @param   events\n     *          the events for which this object should be registered\n     * @param   modifiers\n     *          the modifiers, if any, that modify how the object is registered\n     *\n     * @return  a key representing the registration of this object with the\n     *          given watch service\n     *\n     * @throws  UnsupportedOperationException\n     *          if unsupported events or modifiers are specified\n     * @throws  IllegalArgumentException\n     *          if an invalid combination of events or modifiers is specified\n     * @throws  ClosedWatchServiceException\n     *          if the watch service is closed\n     * @throws  NotDirectoryException\n     *          if the file is registered to watch the entries in a directory\n     *          and the file is not a directory  \u003ci\u003e(optional specific exception)\u003c/i\u003e\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     */\n    @Override\n    WatchKey register(WatchService watcher,\n                      WatchEvent.Kind\u003c?\u003e[] events,\n                      WatchEvent.Modifier... modifiers)\n        throws IOException;\n\n    /**\n     * Registers the file located by this path with a watch service.\n     *\n     * \u003cp\u003e An invocation of this method behaves in exactly the same way as the\n     * invocation\n     * \u003cpre\u003e\n     *     watchable.{@link #register(WatchService,WatchEvent.Kind[],WatchEvent.Modifier[]) register}(watcher, events, new WatchEvent.Modifier[0]);\n     * \u003c/pre\u003e\n     *\n     * \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e\n     * Suppose we wish to register a directory for entry create, delete, and modify\n     * events:\n     * \u003cpre\u003e\n     *     Path dir \u003d ...\n     *     WatchService watcher \u003d ...\n     *\n     *     WatchKey key \u003d dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);\n     * \u003c/pre\u003e\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     register(watcher, events, new WatchEvent.Modifier[0]);\n     * }\u003c/pre\u003e\n     *\n     * @param   watcher\n     *          The watch service to which this object is to be registered\n     * @param   events\n     *          The events for which this object should be registered\n     *\n     * @return  A key representing the registration of this object with the\n     *          given watch service\n     *\n     * @throws  UnsupportedOperationException\n     *          If unsupported events are specified\n     * @throws  IllegalArgumentException\n     *          If an invalid combination of events is specified\n     * @throws  ClosedWatchServiceException\n     *          If the watch service is closed\n     * @throws  NotDirectoryException\n     *          If the file is registered to watch the entries in a directory\n     *          and the file is not a directory  \u003ci\u003e(optional specific exception)\u003c/i\u003e\n     * @throws  IOException\n     *          If an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     */\n    @Override\n    default WatchKey register(WatchService watcher,\n                      WatchEvent.Kind\u003c?\u003e... events) throws IOException {\n        return register(watcher, events, new WatchEvent.Modifier[0]);\n    }\n\n    // -- Iterable --\n\n    /**\n     * Returns an iterator over the name elements of this path.\n     *\n     * \u003cp\u003e The first element returned by the iterator represents the name\n     * element that is closest to the root in the directory hierarchy, the\n     * second element is the next closest, and so on. The last element returned\n     * is the name of the file or directory denoted by this path. The {@link\n     * #getRoot root} component, if present, is not returned by the iterator.\n     *\n     * @implSpec\n     * The default implementation returns an {@code Iterator\u003cPath\u003e} which, for\n     * this path, traverses the {@code Path}s returned by\n     * {@code getName(index)}, where {@code index} ranges from zero to\n     * {@code getNameCount() - 1}, inclusive.\n     *\n     * @return  an iterator over the name elements of this path.\n     */\n    @Override\n    default Iterator\u003cPath\u003e iterator() {\n        return new Iterator\u003c\u003e() {\n            private int i \u003d 0;\n\n            @Override\n            public boolean hasNext() {\n                return (i \u003c getNameCount());\n            }\n\n            @Override\n            public Path next() {\n                if (i \u003c getNameCount()) {\n                    Path result \u003d getName(i);\n                    i++;\n                    return result;\n                } else {\n                    throw new NoSuchElementException();\n                }\n            }\n        };\n    }\n\n    // -- compareTo/equals/hashCode --\n\n    /**\n     * Compares two abstract paths lexicographically. The ordering defined by\n     * this method is provider specific, and in the case of the default\n     * provider, platform specific. This method does not access the file system\n     * and neither file is required to exist.\n     *\n     * \u003cp\u003e This method may not be used to compare paths that are associated\n     * with different file system providers.\n     *\n     * @param   other  the path compared to this path.\n     *\n     * @return  zero if the argument is {@link #equals equal} to this path, a\n     *          value less than zero if this path is lexicographically less than\n     *          the argument, or a value greater than zero if this path is\n     *          lexicographically greater than the argument\n     *\n     * @throws  ClassCastException\n     *          if the paths are associated with different providers\n     */\n    @Override\n    int compareTo(Path other);\n\n    /**\n     * Tests this path for equality with the given object.\n     *\n     * \u003cp\u003e If the given object is not a Path, or is a Path associated with a\n     * different {@code FileSystem}, then this method returns {@code false}.\n     *\n     * \u003cp\u003e Whether or not two path are equal depends on the file system\n     * implementation. In some cases the paths are compared without regard\n     * to case, and others are case sensitive. This method does not access the\n     * file system and the file is not required to exist. Where required, the\n     * {@link Files#isSameFile isSameFile} method may be used to check if two\n     * paths locate the same file.\n     *\n     * \u003cp\u003e This method satisfies the general contract of the {@link\n     * java.lang.Object#equals(Object) Object.equals} method. \u003c/p\u003e\n     *\n     * @param   other\n     *          the object to which this object is to be compared\n     *\n     * @return  {@code true} if, and only if, the given object is a {@code Path}\n     *          that is identical to this {@code Path}\n     */\n    boolean equals(Object other);\n\n    /**\n     * Computes a hash code for this path.\n     *\n     * \u003cp\u003e The hash code is based upon the components of the path, and\n     * satisfies the general contract of the {@link Object#hashCode\n     * Object.hashCode} method.\n     *\n     * @return  the hash-code value for this path\n     */\n    int hashCode();\n\n    /**\n     * Returns the string representation of this path.\n     *\n     * \u003cp\u003e If this path was created by converting a path string using the\n     * {@link FileSystem#getPath getPath} method then the path string returned\n     * by this method may differ from the original String used to create the path.\n     *\n     * \u003cp\u003e The returned path string uses the default name {@link\n     * FileSystem#getSeparator separator} to separate names in the path.\n     *\n     * @return  the string representation of this path\n     */\n    String toString();\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor16.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:319)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 23 more

Oct 10, 2023 5:09:24 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:329)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 23 more

2023.10.10 17:10:39 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 17:13:24 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 17:15:32 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 10, 2023 5:15:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6234
2023.10.10 17:15:56 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 17:16:07 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 17:16:07 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 23:57:22 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.10.10 23:57:22 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.10.10 23:57:22 INFO  Connected to Build server: Bloop v1.5.8
2023.10.10 23:57:23 INFO  time: Imported build in 0.28s
2023.10.10 23:57:29 INFO  time: indexed workspace in 6.12s
2023.10.10 23:57:29 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\contains.scala
2023.10.10 23:57:29 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
2023.10.10 23:57:29 WARN  no build target for: C:\vs code\Scala\archive.worksheet.sc
2023.10.10 23:57:29 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.10 23:57:36 INFO  time: code lens generation in 6.88s
2023.10.10 23:58:39 ERROR worksheet: C:\vs code\Scala\archive.worksheet.sc
java.nio.file.NoSuchFileException: C:\vs code\Scala\archive.worksheet.sc
	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:236)
	at java.nio.file.Files.newByteChannel(Files.java:380)
	at java.nio.file.Files.newByteChannel(Files.java:432)
	at java.nio.file.Files.readAllBytes(Files.java:3288)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:378)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionAbsolutePathBuffers.toInputFromBuffers(MetalsEnrichments.scala:493)
	at scala.meta.internal.worksheets.WorksheetProvider.scala$meta$internal$worksheets$WorksheetProvider$$evaluateWorksheet(WorksheetProvider.scala:358)
	at scala.meta.internal.worksheets.WorksheetProvider$$anon$1.liftedTree1$1(WorksheetProvider.scala:262)
	at scala.meta.internal.worksheets.WorksheetProvider$$anon$1.run(WorksheetProvider.scala:262)

2023.10.10 23:58:39 INFO  time: evaluated worksheet 'archive.worksheet.sc' in 35s
2023.10.10 23:58:51 INFO  time: evaluated worksheet 'archive.worksheet.sc' in 12s
2023.10.10 23:58:54 INFO  time: code lens generation in 1.08s
2023.10.10 23:58:55 INFO  time: evaluated worksheet 'archive.worksheet.sc' in 4.22s
Exception in thread "pool-11-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:229)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023.10.10 23:58:59 WARN  Using indexes to guess the definition of None
2023.10.10 23:59:03 INFO  time: evaluated worksheet 'archive.worksheet.sc' in 3.85s
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:17: 
Not found: type Path
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:46: 
Not found: type K
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                             ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:50: 
Not found: type V
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                                 ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:2:9: 
Not found: contains
    if !contains(path) then None
        ^^^^^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:12:14: 
Not found: Node
        case Node(key, child) => 
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:13:20: 
value map is not a member of Any
          val ls = child.map(_.key)
                   ^^^^^^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:15:14: 
Not found: Leaf
        case Leaf(_, payload) => Some(Right(payload))
             ^^^^
2023.10.10 23:59:06 INFO  time: evaluated worksheet 'archive.worksheet.sc' in 2.83s
2023.10.10 23:59:08 INFO  time: code lens generation in 4.42s
2023.10.11 00:13:13 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 00:15:41 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 00:15:43 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 12:16:42 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7437
Exception in thread "pool-11-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:229)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023.10.11 00:20:27 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 00:22:00 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 00:24:28 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 00:24:43 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 00:25:02 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 12:26:04 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7750
2023.10.11 00:26:07 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 00:26:47 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 00:27:50 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 00:28:29 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 12:28:52 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7900
2023.10.11 00:28:52 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 00:29:44 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 12:31:13 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7955
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:17: 
Not found: type Path
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:46: 
Not found: type K
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                             ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:50: 
Not found: type V
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                                 ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:2:9: 
Not found: contains
    if !contains(path) then None
        ^^^^^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:12:14: 
Not found: Node
        case Node(key, child) => 
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:13:20: 
value map is not a member of Any
          val ls = child.map(_.key)
                   ^^^^^^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:15:14: 
Not found: Leaf
        case Leaf(_, payload) => Some(Right(payload))
             ^^^^
2023.10.11 00:31:17 INFO  time: evaluated worksheet 'archive.worksheet.sc' in 2.06s
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:17: 
Not found: type Path
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:46: 
Not found: type K
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                             ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:50: 
Not found: type V
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                                 ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:19:20: 
Not found: type Path
def contains(path: Path[K]): Boolean = {
                   ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:12:14: 
Not found: Node
        case Node(key, child) => 
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:13:20: 
value map is not a member of Any
          val ls = child.map(_.key)
                   ^^^^^^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:15:14: 
Not found: Leaf
        case Leaf(_, payload) => Some(Right(payload))
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:20:34: 
Not found: type Tree
    def containsHelper(currTree: Tree[K, V], currPath: List[K]): Boolean = (currTree, currPath) match {
                                 ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:20:61: 
Not found: type K
    def containsHelper(currTree: Tree[K, V], currPath: List[K]): Boolean = (currTree, currPath) match {
                                                            ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:22:13: 
Not found: Leaf
      case (Leaf(key, _), seg :: Nil) => key == seg // Check if the leaf node contains the segment
            ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:23:13: 
Not found: Node
      case (Node(key, children), seg :: remaining) =>
            ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:25:26: 
Not found: Node
          containsHelper(Node(key, children), remaining)
                         ^^^^
2023.10.11 00:31:25 INFO  time: evaluated worksheet 'archive.worksheet.sc' in 2.44s
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:17: 
Not found: type Path
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:46: 
Not found: type K
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                             ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:50: 
Not found: type V
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                                 ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:19:20: 
Not found: type Path
def contains(path: Path[K]): Boolean = {
                   ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:12:14: 
Not found: Node
        case Node(key, child) => 
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:13:20: 
value map is not a member of Any
          val ls = child.map(_.key)
                   ^^^^^^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:15:14: 
Not found: Leaf
        case Leaf(_, payload) => Some(Right(payload))
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:20:34: 
Not found: type Tree
    def containsHelper(currTree: Tree[K, V], currPath: List[K]): Boolean = (currTree, currPath) match {
                                 ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:20:61: 
Not found: type K
    def containsHelper(currTree: Tree[K, V], currPath: List[K]): Boolean = (currTree, currPath) match {
                                                            ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:22:13: 
Not found: Leaf
      case (Leaf(key, _), seg :: Nil) => key == seg // Check if the leaf node contains the segment
            ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:23:13: 
Not found: Node
      case (Node(key, children), seg :: remaining) =>
            ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:25:26: 
Not found: Node
          containsHelper(Node(key, children), remaining)
                         ^^^^
2023.10.11 00:31:26 INFO  time: evaluated worksheet 'archive.worksheet.sc' in 1.71s
Oct 11, 2023 12:32:06 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8042
Oct 11, 2023 12:33:49 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8263
Oct 11, 2023 12:34:09 AM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\vs code\Scala\.metals\.reports\metals-full\2023-10-11\r_compiler-error_00-34-09-041
2023.10.11 00:34:32 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 12:39:01 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8641
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:17: 
Not found: type Path
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:46: 
Not found: type K
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                             ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:50: 
Not found: type V
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                                 ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:19:20: 
Not found: type Path
def contains(path: Path[K]): Boolean = {
                   ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:12:14: 
Not found: Node
        case Node(key, child) => 
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:13:20: 
value map is not a member of Any
          val ls = child.map(_.key)
                   ^^^^^^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:15:14: 
Not found: Leaf
        case Leaf(_, payload) => Some(Right(payload))
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:20:34: 
Not found: type Tree
    def containsHelper(currTree: Tree[K, V], currPath: List[K]): Boolean = (currTree, currPath) match {
                                 ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:20:61: 
Not found: type K
    def containsHelper(currTree: Tree[K, V], currPath: List[K]): Boolean = (currTree, currPath) match {
                                                            ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:22:13: 
Not found: Leaf
      case (Leaf(key, _), seg :: Nil) => key == seg // Check if the leaf node contains the segment
            ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:23:13: 
Not found: Node
      case (Node(key, children), seg :: remaining) =>
            ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:25:26: 
Not found: Node
          containsHelper(Node(key, children), remaining)
                         ^^^^
2023.10.11 00:39:42 INFO  time: evaluated worksheet 'archive.worksheet.sc' in 1.79s
2023.10.11 00:41:09 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:17: 
Not found: type Path
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:46: 
Not found: type K
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                             ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:50: 
Not found: type V
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                                 ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:19:20: 
Not found: type Path
def contains(path: Path[K]): Boolean = {
                   ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:12:14: 
Not found: Node
        case Node(key, child) => 
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:13:20: 
value map is not a member of Any
          val ls = child.map(_.key)
                   ^^^^^^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:15:14: 
Not found: Leaf
        case Leaf(_, payload) => Some(Right(payload))
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:20:34: 
Not found: type Tree
    def containsHelper(currTree: Tree[K, V], currPath: List[K]): Boolean = (currTree, currPath) match {
                                 ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:20:61: 
Not found: type K
    def containsHelper(currTree: Tree[K, V], currPath: List[K]): Boolean = (currTree, currPath) match {
                                                            ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:22:13: 
Not found: Leaf
      case (Leaf(key, _), seg :: Nil) => key == seg // Check if the leaf node contains the segment
            ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:23:13: 
Not found: Node
      case (Node(key, children), seg :: remaining) =>
            ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:25:26: 
Not found: Node
          containsHelper(Node(key, children), remaining)
                         ^^^^
2023.10.11 00:41:51 INFO  time: evaluated worksheet 'archive.worksheet.sc' in 1.17s
Oct 11, 2023 12:42:27 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8813
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:17: 
Not found: type Path
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:46: 
Not found: type K
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                             ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:50: 
Not found: type V
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                                 ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:19:20: 
Not found: type Path
def contains(path: Path[K]): Boolean = {
                   ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:12:14: 
Not found: Node
        case Node(key, child) => 
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:13:20: 
value map is not a member of Any
          val ls = child.map(_.key)
                   ^^^^^^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:15:14: 
Not found: Leaf
        case Leaf(_, payload) => Some(Right(payload))
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:20:34: 
Not found: type Tree
    def containsHelper(currTree: Tree[K, V], currPath: List[K]): Boolean = (currTree, currPath) match {
                                 ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:20:61: 
Not found: type K
    def containsHelper(currTree: Tree[K, V], currPath: List[K]): Boolean = (currTree, currPath) match {
                                                            ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:22:13: 
Not found: Leaf
      case (Leaf(key, _), seg :: Nil) => key == seg // Check if the leaf node contains the segment
            ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:23:13: 
Not found: Node
      case (Node(key, children), seg :: remaining) =>
            ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:25:26: 
Not found: Node
          containsHelper(Node(key, children), remaining)
                         ^^^^
2023.10.11 00:42:55 INFO  time: evaluated worksheet 'archive.worksheet.sc' in 1.49s
2023.10.11 00:43:06 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 12:44:48 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8921
2023.10.11 00:45:15 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 00:47:17 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 00:48:00 INFO  time: code lens generation in 20s
2023.10.11 00:48:20 INFO  time: code lens generation in 20s
2023.10.11 00:48:40 INFO  time: code lens generation in 57s
2023.10.11 00:49:00 INFO  time: code lens generation in 22s
2023.10.11 00:49:20 INFO  time: code lens generation in 43s
Oct 11, 2023 12:49:29 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9268
2023.10.11 00:49:40 INFO  time: code lens generation in 1m4s
2023.10.11 00:50:00 INFO  time: code lens generation in 1m25s
2023.10.11 00:50:20 INFO  time: code lens generation in 2m5s
2023.10.11 00:50:21 INFO  time: code lens generation in 2m9s
2023.10.11 00:50:21 INFO  time: code lens generation in 2m8s
2023.10.11 00:50:21 INFO  time: code lens generation in 48s
2023.10.11 00:50:21 INFO  time: code lens generation in 2m16s
2023.10.11 00:50:21 INFO  time: code lens generation in 1m14s
2023.10.11 00:50:21 INFO  time: code lens generation in 49s
2023.10.11 00:50:21 INFO  time: code lens generation in 2m20s
2023.10.11 00:50:21 INFO  time: code lens generation in 2m21s
2023.10.11 00:50:21 INFO  time: code lens generation in 1m16s
2023.10.11 00:50:21 INFO  time: code lens generation in 1m40s
2023.10.11 00:50:21 INFO  time: code lens generation in 1m18s
2023.10.11 00:50:21 INFO  time: code lens generation in 1m40s
2023.10.11 00:50:21 INFO  time: code lens generation in 1m35s
2023.10.11 00:50:21 INFO  time: code lens generation in 1m15s
2023.10.11 00:50:21 INFO  time: code lens generation in 50s
2023.10.11 00:50:21 INFO  time: code lens generation in 2m20s
2023.10.11 00:50:21 INFO  time: code lens generation in 1m17s
2023.10.11 00:50:21 INFO  time: code lens generation in 2m17s
2023.10.11 00:50:21 INFO  time: code lens generation in 51s
2023.10.11 00:50:21 INFO  time: code lens generation in 2m7s
Oct 11, 2023 12:50:21 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9302
Oct 11, 2023 12:50:22 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9283
Oct 11, 2023 12:50:22 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9310
Oct 11, 2023 12:50:22 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9311
Oct 11, 2023 12:50:22 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9312
Oct 11, 2023 12:50:22 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9313
Oct 11, 2023 12:50:22 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9314
Oct 11, 2023 12:50:22 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9308
Oct 11, 2023 12:50:22 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9338
2023.10.11 00:50:21 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 12:50:57 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9357
Oct 11, 2023 12:51:36 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9449
Oct 11, 2023 12:52:28 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9560
Oct 11, 2023 12:52:33 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9567
Oct 11, 2023 12:52:33 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9568
2023.10.11 00:52:33 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 00:52:33 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 00:53:01 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 12:53:05 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9599
2023.10.11 00:53:31 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 00:54:03 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 00:54:20 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 00:55:57 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:17: 
Not found: type Path
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:46: 
Not found: type K
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                             ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:50: 
Not found: type V
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                                 ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:19:20: 
Not found: type Path
def contains(path: Path[K]): Boolean = {
                   ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:12:14: 
Not found: Node
        case Node(key, child) => 
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:13:20: 
value map is not a member of Any
          val ls = child.map(_.key)
                   ^^^^^^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:15:14: 
Not found: Leaf
        case Leaf(_, payload) => Some(Right(payload))
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:20:34: 
Not found: type Tree
    def containsHelper(currTree: Tree[K, V], currPath: List[K]): Boolean = (currTree, currPath) match {
                                 ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:20:61: 
Not found: type K
    def containsHelper(currTree: Tree[K, V], currPath: List[K]): Boolean = (currTree, currPath) match {
                                                            ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:22:13: 
Not found: Leaf
      case (Leaf(key, _), seg :: Nil) => key == seg // Check if the leaf node contains the segment
            ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:23:13: 
Not found: Node
      case (Node(key, children), seg :: remaining) =>
            ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:25:26: 
Not found: Node
          containsHelper(Node(key, children), remaining)
                         ^^^^
2023.10.11 00:56:15 INFO  time: evaluated worksheet 'archive.worksheet.sc' in 2.86s
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:17: 
Not found: type Path
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:46: 
Not found: type K
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                             ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:50: 
Not found: type V
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                                 ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:19:20: 
Not found: type Path
def contains(path: Path[K]): Boolean = {
                   ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:12:14: 
Not found: Node
        case Node(key, child) => 
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:13:20: 
value map is not a member of Any
          val ls = child.map(_.key)
                   ^^^^^^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:15:14: 
Not found: Leaf
        case Leaf(_, payload) => Some(Right(payload))
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:20:34: 
Not found: type Tree
    def containsHelper(currTree: Tree[K, V], currPath: List[K]): Boolean = (currTree, currPath) match {
                                 ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:20:61: 
Not found: type K
    def containsHelper(currTree: Tree[K, V], currPath: List[K]): Boolean = (currTree, currPath) match {
                                                            ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:22:13: 
Not found: Leaf
      case (Leaf(key, _), seg :: Nil) => key == seg // Check if the leaf node contains the segment
            ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:23:13: 
Not found: Node
      case (Node(key, children), seg :: remaining) =>
            ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:25:26: 
Not found: Node
          containsHelper(Node(key, children), remaining)
                         ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:34:17: 
Not found: type Path
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:34:46: 
Not found: type K
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                             ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:34:50: 
Not found: type V
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                                 ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:38:27: 
Not found: type Tree
      def find_lnode(curr:Tree[K, V], path:List[K]):Tree[K, V]=
                          ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:38:49: 
Not found: type K
      def find_lnode(curr:Tree[K, V], path:List[K]):Tree[K, V]=
                                                ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:38:53: 
Not found: type Tree
      def find_lnode(curr:Tree[K, V], path:List[K]):Tree[K, V]=
                                                    ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:40:16: 
Not found: Node
          case Node(key, children) => 
               ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:42:26: 
value find is not a member of Any
              find_lnode(children.find(path.head==_.key).getOrElse(Tree.apply(path.head)), path.tail)
                         ^^^^^^^^^^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:43:27: 
Not found: Node
            else currnode=Node(key, children)
                          ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:45:16: 
Not found: Leaf
          case Leaf(key, payload) => 
               ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:46:22: 
Not found: Leaf
            currnode=Leaf(key, payload)
                     ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:51:14: 
Not found: Node
        case Node(key, child) => 
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:52:20: 
value map is not a member of Any
          val ls = child.map(_.key)
                   ^^^^^^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:54:14: 
Not found: Leaf
        case Leaf(_, payload) => Some(Right(payload))
             ^^^^
2023.10.11 00:56:22 INFO  time: evaluated worksheet 'archive.worksheet.sc' in 3.66s
Oct 11, 2023 12:56:47 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9737
Oct 11, 2023 12:57:04 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9775
2023.10.11 00:58:05 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 01:05:04 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 01:06:45 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:17: 
Not found: type Path
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:46: 
Not found: type K
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                             ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:50: 
Not found: type V
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                                 ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:19:20: 
Not found: type Path
def contains(path: Path[K]): Boolean = {
                   ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:12:14: 
Not found: Node
        case Node(key, child) => 
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:13:20: 
value map is not a member of Any
          val ls = child.map(_.key)
                   ^^^^^^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:15:14: 
Not found: Leaf
        case Leaf(_, payload) => Some(Right(payload))
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:20:34: 
Not found: type Tree
    def containsHelper(currTree: Tree[K, V], currPath: List[K]): Boolean = (currTree, currPath) match {
                                 ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:20:61: 
Not found: type K
    def containsHelper(currTree: Tree[K, V], currPath: List[K]): Boolean = (currTree, currPath) match {
                                                            ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:22:13: 
Not found: Leaf
      case (Leaf(key, _), seg :: Nil) => key == seg // Check if the leaf node contains the segment
            ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:23:13: 
Not found: Node
      case (Node(key, children), seg :: remaining) =>
            ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:25:26: 
Not found: Node
          containsHelper(Node(key, children), remaining)
                         ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:34:17: 
Not found: type Path
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:34:46: 
Not found: type K
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                             ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:34:50: 
Not found: type V
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                                 ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:38:27: 
Not found: type Tree
      def find_lnode(curr:Tree[K, V], path:List[K]):Tree[K, V]=
                          ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:38:49: 
Not found: type K
      def find_lnode(curr:Tree[K, V], path:List[K]):Tree[K, V]=
                                                ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:38:53: 
Not found: type Tree
      def find_lnode(curr:Tree[K, V], path:List[K]):Tree[K, V]=
                                                    ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:40:16: 
Not found: Node
          case Node(key, children) => 
               ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:42:26: 
value find is not a member of Any
              find_lnode(children.find(path.head==_.key).getOrElse(Tree.apply(path.head)), path.tail)
                         ^^^^^^^^^^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:43:27: 
Not found: Node
            else currnode=Node(key, children)
                          ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:45:16: 
Not found: Leaf
          case Leaf(key, payload) => 
               ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:46:22: 
Not found: Leaf
            currnode=Leaf(key, payload)
                     ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:51:14: 
Not found: Node
        case Node(key, child) => 
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:52:20: 
value map is not a member of Any
          val ls = child.map(_.key)
                   ^^^^^^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:54:14: 
Not found: Leaf
        case Leaf(_, payload) => Some(Right(payload))
             ^^^^
2023.10.11 01:08:23 INFO  time: evaluated worksheet 'archive.worksheet.sc' in 3.88s
Oct 11, 2023 1:08:27 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9945
Oct 11, 2023 1:08:27 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9947
2023.10.11 01:10:20 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 01:11:51 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:17: 
Not found: type Path
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:46: 
Not found: type K
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                             ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:50: 
Not found: type V
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                                 ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:19:20: 
Not found: type Path
def contains(path: Path[K]): Boolean = {
                   ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:12:14: 
Not found: Node
        case Node(key, child) => 
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:13:20: 
value map is not a member of Any
          val ls = child.map(_.key)
                   ^^^^^^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:15:14: 
Not found: Leaf
        case Leaf(_, payload) => Some(Right(payload))
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:20:34: 
Not found: type Tree
    def containsHelper(currTree: Tree[K, V], currPath: List[K]): Boolean = (currTree, currPath) match {
                                 ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:20:61: 
Not found: type K
    def containsHelper(currTree: Tree[K, V], currPath: List[K]): Boolean = (currTree, currPath) match {
                                                            ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:22:13: 
Not found: Leaf
      case (Leaf(key, _), seg :: Nil) => key == seg // Check if the leaf node contains the segment
            ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:23:13: 
Not found: Node
      case (Node(key, children), seg :: remaining) =>
            ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:25:26: 
Not found: Node
          containsHelper(Node(key, children), remaining)
                         ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:34:17: 
Not found: type Path
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:34:46: 
Not found: type K
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                             ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:34:50: 
Not found: type V
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                                 ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:38:27: 
Not found: type Tree
      def find_lnode(curr:Tree[K, V], path:List[K]):Tree[K, V]=
                          ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:38:49: 
Not found: type K
      def find_lnode(curr:Tree[K, V], path:List[K]):Tree[K, V]=
                                                ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:38:53: 
Not found: type Tree
      def find_lnode(curr:Tree[K, V], path:List[K]):Tree[K, V]=
                                                    ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:40:16: 
Not found: Node
          case Node(key, children) => 
               ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:42:26: 
value find is not a member of Any
              find_lnode(children.find(path.head==_.key).getOrElse(Tree.apply(path.head)), path.tail)
                         ^^^^^^^^^^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:43:27: 
Not found: Node
            else currnode=Node(key, children)
                          ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:45:16: 
Not found: Leaf
          case Leaf(key, payload) => 
               ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:46:22: 
Not found: Leaf
            currnode=Leaf(key, payload)
                     ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:51:14: 
Not found: Node
        case Node(key, child) => 
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:52:20: 
value map is not a member of Any
          val ls = child.map(_.key)
                   ^^^^^^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:54:14: 
Not found: Leaf
        case Leaf(_, payload) => Some(Right(payload))
             ^^^^
2023.10.11 01:14:18 INFO  time: evaluated worksheet 'archive.worksheet.sc' in 3.04s
Oct 11, 2023 1:14:41 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10081
Oct 11, 2023 1:14:41 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10085
Oct 11, 2023 1:14:41 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10088
Oct 11, 2023 1:14:41 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10089
Oct 11, 2023 1:14:41 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10091
Oct 11, 2023 1:14:41 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10092
Oct 11, 2023 1:14:41 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10096
Oct 11, 2023 1:14:41 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10099
Oct 11, 2023 1:14:41 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10100
Oct 11, 2023 1:14:41 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10101
Oct 11, 2023 1:14:41 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10104
Oct 11, 2023 1:14:41 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10106
Oct 11, 2023 1:14:41 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10118
Oct 11, 2023 1:14:41 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10119
Oct 11, 2023 1:14:41 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10121
Oct 11, 2023 1:14:41 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10129
Oct 11, 2023 1:14:41 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10130
Oct 11, 2023 1:14:42 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10131
Oct 11, 2023 1:14:42 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10132
Oct 11, 2023 1:14:42 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10133
Oct 11, 2023 1:14:42 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10137
Oct 11, 2023 1:14:42 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10139
Oct 11, 2023 1:15:36 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10243
Oct 11, 2023 1:15:40 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10257
Oct 11, 2023 1:15:48 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10275
2023.10.11 01:16:52 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 1:17:22 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10433
2023.10.11 01:17:22 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 1:17:42 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10471
2023.10.11 01:17:49 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 01:18:49 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 1:20:45 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10529
2023.10.11 01:21:32 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 1:21:51 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10566
2023.10.11 01:22:13 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 01:22:34 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 1:23:22 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10621
Oct 11, 2023 1:23:24 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10624
Oct 11, 2023 1:25:50 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10667
Oct 11, 2023 1:26:37 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10760
2023.10.11 01:26:40 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 01:26:40 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 01:28:12 WARN  Using indexes to guess the definition of Path
2023.10.11 01:28:17 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 01:28:19 WARN  Using indexes to guess the definition of Null
2023.10.11 01:28:20 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 01:28:42 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 1:29:34 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10867
Oct 11, 2023 1:29:34 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10866
2023.10.11 01:30:20 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 01:31:37 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 01:31:56 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 1:32:19 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10977
2023.10.11 01:33:36 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 1:33:52 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 11026
2023.10.11 01:35:41 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 01:36:04 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 01:37:09 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 1:43:02 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 11090
Oct 11, 2023 1:44:49 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 11101
Oct 11, 2023 1:45:59 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 11187
Oct 11, 2023 1:46:13 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 11215
2023.10.11 01:47:59 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 1:48:21 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 11354
2023.10.11 01:48:27 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 1:48:33 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 11359
2023.10.11 01:57:52 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 02:02:10 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 02:02:12 WARN  Using indexes to guess the definition of Leaf
Oct 11, 2023 2:02:47 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 11610
Oct 11, 2023 2:05:00 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 11692
Oct 11, 2023 2:06:09 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 11772
Oct 11, 2023 2:07:14 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 11861
2023.10.11 02:08:33 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 2:12:18 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 12185
Oct 11, 2023 2:12:48 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 12251
Oct 11, 2023 2:12:53 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 12273
Oct 11, 2023 2:12:57 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 12282
Oct 11, 2023 2:14:58 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 12424
2023.10.11 02:16:24 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 02:17:48 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 2:23:37 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 12527
2023.10.11 02:23:42 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 02:24:28 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 02:25:01 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 02:25:39 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 02:26:11 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 02:29:45 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 02:31:40 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 2:31:59 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 12799
Oct 11, 2023 2:35:31 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 12997
Oct 11, 2023 2:38:37 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 13175
2023.10.11 02:38:50 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 2:39:29 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 13258
Oct 11, 2023 2:39:33 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 13281
2023.10.11 02:43:43 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 2:45:36 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 13423
2023.10.11 02:45:38 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 2:50:31 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 13560
Oct 11, 2023 2:50:33 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 13561
Oct 11, 2023 2:50:33 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 13562
Oct 11, 2023 2:51:01 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 13614
Oct 11, 2023 2:51:55 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 13642
Oct 11, 2023 2:52:06 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 13682
Oct 11, 2023 2:53:29 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 13822
Oct 11, 2023 2:53:34 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 13832
2023.10.11 02:56:17 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 02:56:22 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 2:56:22 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 14076
Oct 11, 2023 2:58:31 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 14120
2023.10.11 03:01:28 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 3:02:44 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 14245
2023.10.11 03:03:45 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 03:03:47 WARN  Using indexes to guess the definition of Leaf
2023.10.11 03:03:47 WARN  Using indexes to guess the definition of Leaf
2023.10.11 03:06:14 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 03:06:43 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 3:08:14 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 14548
2023.10.11 03:08:42 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 03:09:35 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 3:09:40 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 14613
2023.10.11 03:09:43 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 03:10:59 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 03:11:19 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 03:11:23 WARN  Using indexes to guess the definition of Node
2023.10.11 03:11:55 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 03:12:02 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 3:12:15 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 14854
Oct 11, 2023 3:12:24 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 14887
2023.10.11 03:12:30 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 03:13:29 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 03:13:48 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 3:13:55 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 14947
Oct 11, 2023 3:14:16 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 14955
2023.10.11 03:14:50 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 3:15:40 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 15008
2023.10.11 03:16:24 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 3:18:36 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 15125
Oct 11, 2023 3:19:31 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 15142
2023.10.11 03:19:55 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 03:22:44 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 03:24:12 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\TreeInterface.scala
Oct 11, 2023 3:24:17 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 15310
2023.10.11 03:24:26 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 03:24:54 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 3:26:59 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 15418
2023.10.11 03:27:36 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 3:28:32 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 15471
2023.10.11 03:28:33 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 03:34:37 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 03:34:46 WARN  Using indexes to guess the definition of Node
2023.10.11 03:35:53 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 03:35:59 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 03:35:59 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 03:36:00 WARN  Using indexes to guess the definition of Path
2023.10.11 03:36:00 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:670)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	jdk.internal.reflect.GeneratedMethodAccessor21.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 11, 2023 3:36:01 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.nio.file;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.nio.file.spi.FileSystemProvider;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\n/**\n * An object that may be used to locate a file in a file system. It will\n * typically represent a system dependent file path.\n *\n * \u003cp\u003e A {@code Path} represents a path that is hierarchical and composed of a\n * sequence of directory and file name elements separated by a special separator\n * or delimiter. A \u003cem\u003eroot component\u003c/em\u003e, that identifies a file system\n * hierarchy, may also be present. The name element that is \u003cem\u003efarthest\u003c/em\u003e\n * from the root of the directory hierarchy is the name of a file or directory.\n * The other name elements are directory names. A {@code Path} can represent a\n * root, a root and a sequence of names, or simply one or more name elements.\n * A {@code Path} is considered to be an \u003ci\u003eempty path\u003c/i\u003e if it consists\n * solely of one name element that is empty. Accessing a file using an\n * \u003ci\u003eempty path\u003c/i\u003e is equivalent to accessing the default directory of the\n * file system. {@code Path} defines the {@link #getFileName() getFileName},\n * {@link #getParent getParent}, {@link #getRoot getRoot}, and {@link #subpath\n * subpath} methods to access the path components or a subsequence of its name\n * elements.\n *\n * \u003cp\u003e In addition to accessing the components of a path, a {@code Path} also\n * defines the {@link #resolve(Path) resolve} and {@link #resolveSibling(Path)\n * resolveSibling} methods to combine paths. The {@link #relativize relativize}\n * method that can be used to construct a relative path between two paths.\n * Paths can be {@link #compareTo compared}, and tested against each other using\n * the {@link #startsWith startsWith} and {@link #endsWith endsWith} methods.\n *\n * \u003cp\u003e This interface extends {@link Watchable} interface so that a directory\n * located by a path can be {@link #register registered} with a {@link\n * WatchService} and entries in the directory watched. \u003c/p\u003e\n *\n * \u003cp\u003e \u003cb\u003eWARNING:\u003c/b\u003e This interface is only intended to be implemented by\n * those developing custom file system implementations. Methods may be added to\n * this interface in future releases. \u003c/p\u003e\n *\n * \u003ch2\u003eAccessing Files\u003c/h2\u003e\n * \u003cp\u003e Paths may be used with the {@link Files} class to operate on files,\n * directories, and other types of files. For example, suppose we want a {@link\n * java.io.BufferedReader} to read text from a file \"{@code access.log}\". The\n * file is located in a directory \"{@code logs}\" relative to the current working\n * directory and is UTF-8 encoded.\n * \u003cpre\u003e\n *     Path path \u003d FileSystems.getDefault().getPath(\"logs\", \"access.log\");\n *     BufferedReader reader \u003d Files.newBufferedReader(path, StandardCharsets.UTF_8);\n * \u003c/pre\u003e\n *\n * \u003ca id\u003d\"interop\"\u003e\u003c/a\u003e\u003ch2\u003eInteroperability\u003c/h2\u003e\n * \u003cp\u003e Paths associated with the default {@link\n * java.nio.file.spi.FileSystemProvider provider} are generally interoperable\n * with the {@link java.io.File java.io.File} class. Paths created by other\n * providers are unlikely to be interoperable with the abstract path names\n * represented by {@code java.io.File}. The {@link java.io.File#toPath toPath}\n * method may be used to obtain a {@code Path} from the abstract path name\n * represented by a {@code java.io.File} object. The resulting {@code Path} can\n * be used to operate on the same file as the {@code java.io.File} object. In\n * addition, the {@link #toFile toFile} method is useful to construct a {@code\n * File} from the {@code String} representation of a {@code Path}.\n *\n * \u003ch2\u003eConcurrency\u003c/h2\u003e\n * \u003cp\u003e Implementations of this interface are immutable and safe for use by\n * multiple concurrent threads.\n *\n * @since 1.7\n */\n\npublic interface Path\n    extends Comparable\u003cPath\u003e, Iterable\u003cPath\u003e, Watchable\n{\n    /**\n     * Returns a {@code Path} by converting a path string, or a sequence of\n     * strings that when joined form a path string. If {@code more} does not\n     * specify any elements then the value of the {@code first} parameter is\n     * the path string to convert. If {@code more} specifies one or more\n     * elements then each non-empty string, including {@code first}, is\n     * considered to be a sequence of name elements and is joined to form a\n     * path string. The details as to how the Strings are joined is provider\n     * specific but typically they will be joined using the\n     * {@link FileSystem#getSeparator name-separator} as the separator.\n     * For example, if the name separator is \"{@code /}\" and\n     * {@code getPath(\"/foo\",\"bar\",\"gus\")} is invoked, then the path string\n     * {@code \"/foo/bar/gus\"} is converted to a {@code Path}. A {@code Path}\n     * representing an empty path is returned if {@code first} is the empty\n     * string and {@code more} does not contain any non-empty strings.\n     *\n     * \u003cp\u003e The {@code Path} is obtained by invoking the {@link FileSystem#getPath\n     * getPath} method of the {@link FileSystems#getDefault default} {@link\n     * FileSystem}.\n     *\n     * \u003cp\u003e Note that while this method is very convenient, using it will imply\n     * an assumed reference to the default {@code FileSystem} and limit the\n     * utility of the calling code. Hence it should not be used in library code\n     * intended for flexible reuse. A more flexible alternative is to use an\n     * existing {@code Path} instance as an anchor, such as:\n     * \u003cpre\u003e{@code\n     *     Path dir \u003d ...\n     *     Path path \u003d dir.resolve(\"file\");\n     * }\u003c/pre\u003e\n     *\n     * @param   first\n     *          the path string or initial part of the path string\n     * @param   more\n     *          additional strings to be joined to form the path string\n     *\n     * @return  the resulting {@code Path}\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a {@code Path}\n     *\n     * @see FileSystem#getPath\n     *\n     * @since 11\n     */\n    public static Path of(String first, String... more) {\n        return FileSystems.getDefault().getPath(first, more);\n    }\n\n    /**\n     * Returns a {@code Path} by converting a URI.\n     *\n     * \u003cp\u003e This method iterates over the {@link FileSystemProvider#installedProviders()\n     * installed} providers to locate the provider that is identified by the\n     * URI {@link URI#getScheme scheme} of the given URI. URI schemes are\n     * compared without regard to case. If the provider is found then its {@link\n     * FileSystemProvider#getPath getPath} method is invoked to convert the\n     * URI.\n     *\n     * \u003cp\u003e In the case of the default provider, identified by the URI scheme\n     * \"file\", the given URI has a non-empty path component, and undefined query\n     * and fragment components. Whether the authority component may be present\n     * is platform specific. The returned {@code Path} is associated with the\n     * {@link FileSystems#getDefault default} file system.\n     *\n     * \u003cp\u003e The default provider provides a similar \u003cem\u003eround-trip\u003c/em\u003e guarantee\n     * to the {@link java.io.File} class. For a given {@code Path} \u003ci\u003ep\u003c/i\u003e it\n     * is guaranteed that\n     * \u003cblockquote\u003e{@code\n     * Path.of(}\u003ci\u003ep\u003c/i\u003e{@code .}{@link Path#toUri() toUri}{@code ()).equals(}\n     * \u003ci\u003ep\u003c/i\u003e{@code .}{@link Path#toAbsolutePath() toAbsolutePath}{@code ())}\n     * \u003c/blockquote\u003e\n     * so long as the original {@code Path}, the {@code URI}, and the new {@code\n     * Path} are all created in (possibly different invocations of) the same\n     * Java virtual machine. Whether other providers make any guarantees is\n     * provider specific and therefore unspecified.\n     *\n     * @param   uri\n     *          the URI to convert\n     *\n     * @return  the resulting {@code Path}\n     *\n     * @throws  IllegalArgumentException\n     *          if preconditions on the {@code uri} parameter do not hold. The\n     *          format of the URI is provider specific.\n     * @throws  FileSystemNotFoundException\n     *          The file system, identified by the URI, does not exist and\n     *          cannot be created automatically, or the provider identified by\n     *          the URI\u0027s scheme component is not installed\n     * @throws  SecurityException\n     *          if a security manager is installed and it denies an unspecified\n     *          permission to access the file system\n     *\n     * @since 11\n     */\n    public static Path of(URI uri) {\n        String scheme \u003d  uri.getScheme();\n        if (scheme \u003d\u003d null)\n            throw new IllegalArgumentException(\"Missing scheme\");\n\n        // check for default provider to avoid loading of installed providers\n        if (scheme.equalsIgnoreCase(\"file\"))\n            return FileSystems.getDefault().provider().getPath(uri);\n\n        // try to find provider\n        for (FileSystemProvider provider: FileSystemProvider.installedProviders()) {\n            if (provider.getScheme().equalsIgnoreCase(scheme)) {\n                return provider.getPath(uri);\n            }\n        }\n\n        throw new FileSystemNotFoundException(\"Provider \\\"\" + scheme + \"\\\" not installed\");\n    }\n\n    /**\n     * Returns the file system that created this object.\n     *\n     * @return  the file system that created this object\n     */\n    FileSystem getFileSystem();\n\n    /**\n     * Tells whether or not this path is absolute.\n     *\n     * \u003cp\u003e An absolute path is complete in that it doesn\u0027t need to be combined\n     * with other path information in order to locate a file.\n     *\n     * @return  {@code true} if, and only if, this path is absolute\n     */\n    boolean isAbsolute();\n\n    /**\n     * Returns the root component of this path as a {@code Path} object,\n     * or {@code null} if this path does not have a root component.\n     *\n     * @return  a path representing the root component of this path,\n     *          or {@code null}\n     */\n    Path getRoot();\n\n    /**\n     * Returns the name of the file or directory denoted by this path as a\n     * {@code Path} object. The file name is the \u003cem\u003efarthest\u003c/em\u003e element from\n     * the root in the directory hierarchy.\n     *\n     * @return  a path representing the name of the file or directory, or\n     *          {@code null} if this path has zero elements\n     */\n    Path getFileName();\n\n    /**\n     * Returns the \u003cem\u003eparent path\u003c/em\u003e, or {@code null} if this path does not\n     * have a parent.\n     *\n     * \u003cp\u003e The parent of this path object consists of this path\u0027s root\n     * component, if any, and each element in the path except for the\n     * \u003cem\u003efarthest\u003c/em\u003e from the root in the directory hierarchy. This method\n     * does not access the file system; the path or its parent may not exist.\n     * Furthermore, this method does not eliminate special names such as \".\"\n     * and \"..\" that may be used in some implementations. On UNIX for example,\n     * the parent of \"{@code /a/b/c}\" is \"{@code /a/b}\", and the parent of\n     * {@code \"x/y/.}\" is \"{@code x/y}\". This method may be used with the {@link\n     * #normalize normalize} method, to eliminate redundant names, for cases where\n     * \u003cem\u003eshell-like\u003c/em\u003e navigation is required.\n     *\n     * \u003cp\u003e If this path has more than one element, and no root component, then\n     * this method is equivalent to evaluating the expression:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * subpath(0,\u0026nbsp;getNameCount()-1);\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @return  a path representing the path\u0027s parent\n     */\n    Path getParent();\n\n    /**\n     * Returns the number of name elements in the path.\n     *\n     * @return  the number of elements in the path, or {@code 0} if this path\n     *          only represents a root component\n     */\n    int getNameCount();\n\n    /**\n     * Returns a name element of this path as a {@code Path} object.\n     *\n     * \u003cp\u003e The {@code index} parameter is the index of the name element to return.\n     * The element that is \u003cem\u003eclosest\u003c/em\u003e to the root in the directory hierarchy\n     * has index {@code 0}. The element that is \u003cem\u003efarthest\u003c/em\u003e from the root\n     * has index {@link #getNameCount count}{@code -1}.\n     *\n     * @param   index\n     *          the index of the element\n     *\n     * @return  the name element\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code index} is negative, {@code index} is greater than or\n     *          equal to the number of elements, or this path has zero name\n     *          elements\n     */\n    Path getName(int index);\n\n    /**\n     * Returns a relative {@code Path} that is a subsequence of the name\n     * elements of this path.\n     *\n     * \u003cp\u003e The {@code beginIndex} and {@code endIndex} parameters specify the\n     * subsequence of name elements. The name that is \u003cem\u003eclosest\u003c/em\u003e to the root\n     * in the directory hierarchy has index {@code 0}. The name that is\n     * \u003cem\u003efarthest\u003c/em\u003e from the root has index {@link #getNameCount\n     * count}{@code -1}. The returned {@code Path} object has the name elements\n     * that begin at {@code beginIndex} and extend to the element at index {@code\n     * endIndex-1}.\n     *\n     * @param   beginIndex\n     *          the index of the first element, inclusive\n     * @param   endIndex\n     *          the index of the last element, exclusive\n     *\n     * @return  a new {@code Path} object that is a subsequence of the name\n     *          elements in this {@code Path}\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code beginIndex} is negative, or greater than or equal to\n     *          the number of elements. If {@code endIndex} is less than or\n     *          equal to {@code beginIndex}, or larger than the number of elements.\n     */\n    Path subpath(int beginIndex, int endIndex);\n\n    /**\n     * Tests if this path starts with the given path.\n     *\n     * \u003cp\u003e This path \u003cem\u003estarts\u003c/em\u003e with the given path if this path\u0027s root\n     * component \u003cem\u003estarts\u003c/em\u003e with the root component of the given path,\n     * and this path starts with the same name elements as the given path.\n     * If the given path has more name elements than this path then {@code false}\n     * is returned.\n     *\n     * \u003cp\u003e Whether or not the root component of this path starts with the root\n     * component of the given path is file system specific. If this path does\n     * not have a root component and the given path has a root component then\n     * this path does not start with the given path.\n     *\n     * \u003cp\u003e If the given path is associated with a different {@code FileSystem}\n     * to this path then {@code false} is returned.\n     *\n     * @param   other\n     *          the given path\n     *\n     * @return  {@code true} if this path starts with the given path; otherwise\n     *          {@code false}\n     */\n    boolean startsWith(Path other);\n\n    /**\n     * Tests if this path starts with a {@code Path}, constructed by converting\n     * the given path string, in exactly the manner specified by the {@link\n     * #startsWith(Path) startsWith(Path)} method. On UNIX for example, the path\n     * \"{@code foo/bar}\" starts with \"{@code foo}\" and \"{@code foo/bar}\". It\n     * does not start with \"{@code f}\" or \"{@code fo}\".\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     startsWith(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the given path string\n     *\n     * @return  {@code true} if this path starts with the given path; otherwise\n     *          {@code false}\n     *\n     * @throws  InvalidPathException\n     *          If the path string cannot be converted to a Path.\n     */\n    default boolean startsWith(String other) {\n        return startsWith(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Tests if this path ends with the given path.\n     *\n     * \u003cp\u003e If the given path has \u003cem\u003eN\u003c/em\u003e elements, and no root component,\n     * and this path has \u003cem\u003eN\u003c/em\u003e or more elements, then this path ends with\n     * the given path if the last \u003cem\u003eN\u003c/em\u003e elements of each path, starting at\n     * the element farthest from the root, are equal.\n     *\n     * \u003cp\u003e If the given path has a root component then this path ends with the\n     * given path if the root component of this path \u003cem\u003eends with\u003c/em\u003e the root\n     * component of the given path, and the corresponding elements of both paths\n     * are equal. Whether or not the root component of this path ends with the\n     * root component of the given path is file system specific. If this path\n     * does not have a root component and the given path has a root component\n     * then this path does not end with the given path.\n     *\n     * \u003cp\u003e If the given path is associated with a different {@code FileSystem}\n     * to this path then {@code false} is returned.\n     *\n     * @param   other\n     *          the given path\n     *\n     * @return  {@code true} if this path ends with the given path; otherwise\n     *          {@code false}\n     */\n    boolean endsWith(Path other);\n\n    /**\n     * Tests if this path ends with a {@code Path}, constructed by converting\n     * the given path string, in exactly the manner specified by the {@link\n     * #endsWith(Path) endsWith(Path)} method. On UNIX for example, the path\n     * \"{@code foo/bar}\" ends with \"{@code foo/bar}\" and \"{@code bar}\". It does\n     * not end with \"{@code r}\" or \"{@code /bar}\". Note that trailing separators\n     * are not taken into account, and so invoking this method on the {@code\n     * Path}\"{@code foo/bar}\" with the {@code String} \"{@code bar/}\" returns\n     * {@code true}.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     endsWith(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the given path string\n     *\n     * @return  {@code true} if this path ends with the given path; otherwise\n     *          {@code false}\n     *\n     * @throws  InvalidPathException\n     *          If the path string cannot be converted to a Path.\n     */\n    default boolean endsWith(String other) {\n        return endsWith(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Returns a path that is this path with redundant name elements eliminated.\n     *\n     * \u003cp\u003e The precise definition of this method is implementation dependent but\n     * in general it derives from this path, a path that does not contain\n     * \u003cem\u003eredundant\u003c/em\u003e name elements. In many file systems, the \"{@code .}\"\n     * and \"{@code ..}\" are special names used to indicate the current directory\n     * and parent directory. In such file systems all occurrences of \"{@code .}\"\n     * are considered redundant. If a \"{@code ..}\" is preceded by a\n     * non-\"{@code ..}\" name then both names are considered redundant (the\n     * process to identify such names is repeated until it is no longer\n     * applicable).\n     *\n     * \u003cp\u003e This method does not access the file system; the path may not locate\n     * a file that exists. Eliminating \"{@code ..}\" and a preceding name from a\n     * path may result in the path that locates a different file than the original\n     * path. This can arise when the preceding name is a symbolic link.\n     *\n     * @return  the resulting path or this path if it does not contain\n     *          redundant name elements; an empty path is returned if this path\n     *          does not have a root component and all name elements are redundant\n     *\n     * @see #getParent\n     * @see #toRealPath\n     */\n    Path normalize();\n\n    // -- resolution and relativization --\n\n    /**\n     * Resolve the given path against this path.\n     *\n     * \u003cp\u003e If the {@code other} parameter is an {@link #isAbsolute() absolute}\n     * path then this method trivially returns {@code other}. If {@code other}\n     * is an \u003ci\u003eempty path\u003c/i\u003e then this method trivially returns this path.\n     * Otherwise this method considers this path to be a directory and resolves\n     * the given path against this path. In the simplest case, the given path\n     * does not have a {@link #getRoot root} component, in which case this method\n     * \u003cem\u003ejoins\u003c/em\u003e the given path to this path and returns a resulting path\n     * that {@link #endsWith ends} with the given path. Where the given path has\n     * a root component then resolution is highly implementation dependent and\n     * therefore unspecified.\n     *\n     * @param   other\n     *          the path to resolve against this path\n     *\n     * @return  the resulting path\n     *\n     * @see #relativize\n     */\n    Path resolve(Path other);\n\n    /**\n     * Converts a given path string to a {@code Path} and resolves it against\n     * this {@code Path} in exactly the manner specified by the {@link\n     * #resolve(Path) resolve} method. For example, suppose that the name\n     * separator is \"{@code /}\" and a path represents \"{@code foo/bar}\", then\n     * invoking this method with the path string \"{@code gus}\" will result in\n     * the {@code Path} \"{@code foo/bar/gus}\".\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     resolve(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the path string to resolve against this path\n     *\n     * @return  the resulting path\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a Path.\n     *\n     * @see FileSystem#getPath\n     */\n    default Path resolve(String other) {\n        return resolve(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Resolves the given path against this path\u0027s {@link #getParent parent}\n     * path. This is useful where a file name needs to be \u003ci\u003ereplaced\u003c/i\u003e with\n     * another file name. For example, suppose that the name separator is\n     * \"{@code /}\" and a path represents \"{@code dir1/dir2/foo}\", then invoking\n     * this method with the {@code Path} \"{@code bar}\" will result in the {@code\n     * Path} \"{@code dir1/dir2/bar}\". If this path does not have a parent path,\n     * or {@code other} is {@link #isAbsolute() absolute}, then this method\n     * returns {@code other}. If {@code other} is an empty path then this method\n     * returns this path\u0027s parent, or where this path doesn\u0027t have a parent, the\n     * empty path.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     (getParent() \u003d\u003d null) ? other : getParent().resolve(other);\n     * }\u003c/pre\u003e\n     * unless {@code other \u003d\u003d null}, in which case a\n     * {@code NullPointerException} is thrown.\n     *\n     * @param   other\n     *          the path to resolve against this path\u0027s parent\n     *\n     * @return  the resulting path\n     *\n     * @see #resolve(Path)\n     */\n    default Path resolveSibling(Path other) {\n        if (other \u003d\u003d null)\n            throw new NullPointerException();\n        Path parent \u003d getParent();\n        return (parent \u003d\u003d null) ? other : parent.resolve(other);\n    }\n\n    /**\n     * Converts a given path string to a {@code Path} and resolves it against\n     * this path\u0027s {@link #getParent parent} path in exactly the manner\n     * specified by the {@link #resolveSibling(Path) resolveSibling} method.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     resolveSibling(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the path string to resolve against this path\u0027s parent\n     *\n     * @return  the resulting path\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a Path.\n     *\n     * @see FileSystem#getPath\n     */\n    default Path resolveSibling(String other) {\n        return resolveSibling(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Constructs a relative path between this path and a given path.\n     *\n     * \u003cp\u003e Relativization is the inverse of {@link #resolve(Path) resolution}.\n     * This method attempts to construct a {@link #isAbsolute relative} path\n     * that when {@link #resolve(Path) resolved} against this path, yields a\n     * path that locates the same file as the given path. For example, on UNIX,\n     * if this path is {@code \"/a/b\"} and the given path is {@code \"/a/b/c/d\"}\n     * then the resulting relative path would be {@code \"c/d\"}. Where this\n     * path and the given path do not have a {@link #getRoot root} component,\n     * then a relative path can be constructed. A relative path cannot be\n     * constructed if only one of the paths have a root component. Where both\n     * paths have a root component then it is implementation dependent if a\n     * relative path can be constructed. If this path and the given path are\n     * {@link #equals equal} then an \u003ci\u003eempty path\u003c/i\u003e is returned.\n     *\n     * \u003cp\u003e For any two {@link #normalize normalized} paths \u003ci\u003ep\u003c/i\u003e and\n     * \u003ci\u003eq\u003c/i\u003e, where \u003ci\u003eq\u003c/i\u003e does not have a root component,\n     * \u003cblockquote\u003e\n     *   \u003ci\u003ep\u003c/i\u003e{@code .relativize(}\u003ci\u003ep\u003c/i\u003e\n     *   {@code .resolve(}\u003ci\u003eq\u003c/i\u003e{@code )).equals(}\u003ci\u003eq\u003c/i\u003e{@code )}\n     * \u003c/blockquote\u003e\n     *\n     * \u003cp\u003e When symbolic links are supported, then whether the resulting path,\n     * when resolved against this path, yields a path that can be used to locate\n     * the {@link Files#isSameFile same} file as {@code other} is implementation\n     * dependent. For example, if this path is  {@code \"/a/b\"} and the given\n     * path is {@code \"/a/x\"} then the resulting relative path may be {@code\n     * \"../x\"}. If {@code \"b\"} is a symbolic link then is implementation\n     * dependent if {@code \"a/b/../x\"} would locate the same file as {@code \"/a/x\"}.\n     *\n     * @param   other\n     *          the path to relativize against this path\n     *\n     * @return  the resulting relative path, or an empty path if both paths are\n     *          equal\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code other} is not a {@code Path} that can be relativized\n     *          against this path\n     */\n    Path relativize(Path other);\n\n    /**\n     * Returns a URI to represent this path.\n     *\n     * \u003cp\u003e This method constructs an absolute {@link URI} with a {@link\n     * URI#getScheme() scheme} equal to the URI scheme that identifies the\n     * provider. The exact form of the scheme specific part is highly provider\n     * dependent.\n     *\n     * \u003cp\u003e In the case of the default provider, the URI is hierarchical with\n     * a {@link URI#getPath() path} component that is absolute. The query and\n     * fragment components are undefined. Whether the authority component is\n     * defined or not is implementation dependent. There is no guarantee that\n     * the {@code URI} may be used to construct a {@link java.io.File java.io.File}.\n     * In particular, if this path represents a Universal Naming Convention (UNC)\n     * path, then the UNC server name may be encoded in the authority component\n     * of the resulting URI. In the case of the default provider, and the file\n     * exists, and it can be determined that the file is a directory, then the\n     * resulting {@code URI} will end with a slash.\n     *\n     * \u003cp\u003e The default provider provides a similar \u003cem\u003eround-trip\u003c/em\u003e guarantee\n     * to the {@link java.io.File} class. For a given {@code Path} \u003ci\u003ep\u003c/i\u003e it\n     * is guaranteed that\n     * \u003cblockquote\u003e\n     * {@link Path#of(URI) Path.of}{@code (}\u003ci\u003ep\u003c/i\u003e{@code .toUri()).equals(}\u003ci\u003ep\u003c/i\u003e\n     * {@code .}{@link #toAbsolutePath() toAbsolutePath}{@code ())}\n     * \u003c/blockquote\u003e\n     * so long as the original {@code Path}, the {@code URI}, and the new {@code\n     * Path} are all created in (possibly different invocations of) the same\n     * Java virtual machine. Whether other providers make any guarantees is\n     * provider specific and therefore unspecified.\n     *\n     * \u003cp\u003e When a file system is constructed to access the contents of a file\n     * as a file system then it is highly implementation specific if the returned\n     * URI represents the given path in the file system or it represents a\n     * \u003cem\u003ecompound\u003c/em\u003e URI that encodes the URI of the enclosing file system.\n     * A format for compound URIs is not defined in this release; such a scheme\n     * may be added in a future release.\n     *\n     * @return  the URI representing this path\n     *\n     * @throws  java.io.IOError\n     *          if an I/O error occurs obtaining the absolute path, or where a\n     *          file system is constructed to access the contents of a file as\n     *          a file system, and the URI of the enclosing file system cannot be\n     *          obtained\n     *\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager\n     *          is installed, the {@link #toAbsolutePath toAbsolutePath} method\n     *          throws a security exception.\n     */\n    URI toUri();\n\n    /**\n     * Returns a {@code Path} object representing the absolute path of this\n     * path.\n     *\n     * \u003cp\u003e If this path is already {@link Path#isAbsolute absolute} then this\n     * method simply returns this path. Otherwise, this method resolves the path\n     * in an implementation dependent manner, typically by resolving the path\n     * against a file system default directory. Depending on the implementation,\n     * this method may throw an I/O error if the file system is not accessible.\n     *\n     * @return  a {@code Path} object representing the absolute path\n     *\n     * @throws  java.io.IOError\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, a security manager\n     *          is installed, and this path is not absolute, then the security\n     *          manager\u0027s {@link SecurityManager#checkPropertyAccess(String)\n     *          checkPropertyAccess} method is invoked to check access to the\n     *          system property {@code user.dir}\n     */\n    Path toAbsolutePath();\n\n    /**\n     * Returns the \u003cem\u003ereal\u003c/em\u003e path of an existing file.\n     *\n     * \u003cp\u003e The precise definition of this method is implementation dependent but\n     * in general it derives from this path, an {@link #isAbsolute absolute}\n     * path that locates the {@link Files#isSameFile same} file as this path, but\n     * with name elements that represent the actual name of the directories\n     * and the file. For example, where filename comparisons on a file system\n     * are case insensitive then the name elements represent the names in their\n     * actual case. Additionally, the resulting path has redundant name\n     * elements removed.\n     *\n     * \u003cp\u003e If this path is relative then its absolute path is first obtained,\n     * as if by invoking the {@link #toAbsolutePath toAbsolutePath} method.\n     *\n     * \u003cp\u003e The {@code options} array may be used to indicate how symbolic links\n     * are handled. By default, symbolic links are resolved to their final\n     * target. If the option {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} is\n     * present then this method does not resolve symbolic links.\n     *\n     * Some implementations allow special names such as \"{@code ..}\" to refer to\n     * the parent directory. When deriving the \u003cem\u003ereal path\u003c/em\u003e, and a\n     * \"{@code ..}\" (or equivalent) is preceded by a non-\"{@code ..}\" name then\n     * an implementation will typically cause both names to be removed. When\n     * not resolving symbolic links and the preceding name is a symbolic link\n     * then the names are only removed if it guaranteed that the resulting path\n     * will locate the same file as this path.\n     *\n     * @param   options\n     *          options indicating how symbolic links are handled\n     *\n     * @return  an absolute path represent the \u003cem\u003ereal\u003c/em\u003e path of the file\n     *          located by this object\n     *\n     * @throws  IOException\n     *          if the file does not exist or an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager\n     *          is installed, its {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file, and where\n     *          this path is not absolute, its {@link SecurityManager#checkPropertyAccess(String)\n     *          checkPropertyAccess} method is invoked to check access to the\n     *          system property {@code user.dir}\n     */\n    Path toRealPath(LinkOption... options) throws IOException;\n\n    /**\n     * Returns a {@link File} object representing this path. Where this {@code\n     * Path} is associated with the default provider, then this method is\n     * equivalent to returning a {@code File} object constructed with the\n     * {@code String} representation of this path.\n     *\n     * \u003cp\u003e If this path was created by invoking the {@code File} {@link\n     * File#toPath toPath} method then there is no guarantee that the {@code\n     * File} object returned by this method is {@link #equals equal} to the\n     * original {@code File}.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     new File(toString());\n     * }\u003c/pre\u003e\n     * if the {@code FileSystem} which created this {@code Path} is the default\n     * file system; otherwise an {@code UnsupportedOperationException} is\n     * thrown.\n     *\n     * @return  a {@code File} object representing this path\n     *\n     * @throws  UnsupportedOperationException\n     *          if this {@code Path} is not associated with the default provider\n     */\n    default File toFile() {\n        if (getFileSystem() \u003d\u003d FileSystems.getDefault()) {\n            return new File(toString());\n        } else {\n            throw new UnsupportedOperationException(\"Path not associated with \"\n                    + \"default file system.\");\n        }\n    }\n\n    // -- watchable --\n\n    /**\n     * Registers the file located by this path with a watch service.\n     *\n     * \u003cp\u003e In this release, this path locates a directory that exists. The\n     * directory is registered with the watch service so that entries in the\n     * directory can be watched. The {@code events} parameter is the events to\n     * register and may contain the following events:\n     * \u003cul\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_CREATE ENTRY_CREATE} -\n     *       entry created or moved into the directory\u003c/li\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_DELETE ENTRY_DELETE} -\n     *        entry deleted or moved out of the directory\u003c/li\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_MODIFY ENTRY_MODIFY} -\n     *        entry in directory was modified\u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e The {@link WatchEvent#context context} for these events is the\n     * relative path between the directory located by this path, and the path\n     * that locates the directory entry that is created, deleted, or modified.\n     *\n     * \u003cp\u003e The set of events may include additional implementation specific\n     * event that are not defined by the enum {@link StandardWatchEventKinds}\n     *\n     * \u003cp\u003e The {@code modifiers} parameter specifies \u003cem\u003emodifiers\u003c/em\u003e that\n     * qualify how the directory is registered. This release does not define any\n     * \u003cem\u003estandard\u003c/em\u003e modifiers. It may contain implementation specific\n     * modifiers.\n     *\n     * \u003cp\u003e Where a file is registered with a watch service by means of a symbolic\n     * link then it is implementation specific if the watch continues to depend\n     * on the existence of the symbolic link after it is registered.\n     *\n     * @param   watcher\n     *          the watch service to which this object is to be registered\n     * @param   events\n     *          the events for which this object should be registered\n     * @param   modifiers\n     *          the modifiers, if any, that modify how the object is registered\n     *\n     * @return  a key representing the registration of this object with the\n     *          given watch service\n     *\n     * @throws  UnsupportedOperationException\n     *          if unsupported events or modifiers are specified\n     * @throws  IllegalArgumentException\n     *          if an invalid combination of events or modifiers is specified\n     * @throws  ClosedWatchServiceException\n     *          if the watch service is closed\n     * @throws  NotDirectoryException\n     *          if the file is registered to watch the entries in a directory\n     *          and the file is not a directory  \u003ci\u003e(optional specific exception)\u003c/i\u003e\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     */\n    @Override\n    WatchKey register(WatchService watcher,\n                      WatchEvent.Kind\u003c?\u003e[] events,\n                      WatchEvent.Modifier... modifiers)\n        throws IOException;\n\n    /**\n     * Registers the file located by this path with a watch service.\n     *\n     * \u003cp\u003e An invocation of this method behaves in exactly the same way as the\n     * invocation\n     * \u003cpre\u003e\n     *     watchable.{@link #register(WatchService,WatchEvent.Kind[],WatchEvent.Modifier[]) register}(watcher, events, new WatchEvent.Modifier[0]);\n     * \u003c/pre\u003e\n     *\n     * \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e\n     * Suppose we wish to register a directory for entry create, delete, and modify\n     * events:\n     * \u003cpre\u003e\n     *     Path dir \u003d ...\n     *     WatchService watcher \u003d ...\n     *\n     *     WatchKey key \u003d dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);\n     * \u003c/pre\u003e\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     register(watcher, events, new WatchEvent.Modifier[0]);\n     * }\u003c/pre\u003e\n     *\n     * @param   watcher\n     *          The watch service to which this object is to be registered\n     * @param   events\n     *          The events for which this object should be registered\n     *\n     * @return  A key representing the registration of this object with the\n     *          given watch service\n     *\n     * @throws  UnsupportedOperationException\n     *          If unsupported events are specified\n     * @throws  IllegalArgumentException\n     *          If an invalid combination of events is specified\n     * @throws  ClosedWatchServiceException\n     *          If the watch service is closed\n     * @throws  NotDirectoryException\n     *          If the file is registered to watch the entries in a directory\n     *          and the file is not a directory  \u003ci\u003e(optional specific exception)\u003c/i\u003e\n     * @throws  IOException\n     *          If an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     */\n    @Override\n    default WatchKey register(WatchService watcher,\n                      WatchEvent.Kind\u003c?\u003e... events) throws IOException {\n        return register(watcher, events, new WatchEvent.Modifier[0]);\n    }\n\n    // -- Iterable --\n\n    /**\n     * Returns an iterator over the name elements of this path.\n     *\n     * \u003cp\u003e The first element returned by the iterator represents the name\n     * element that is closest to the root in the directory hierarchy, the\n     * second element is the next closest, and so on. The last element returned\n     * is the name of the file or directory denoted by this path. The {@link\n     * #getRoot root} component, if present, is not returned by the iterator.\n     *\n     * @implSpec\n     * The default implementation returns an {@code Iterator\u003cPath\u003e} which, for\n     * this path, traverses the {@code Path}s returned by\n     * {@code getName(index)}, where {@code index} ranges from zero to\n     * {@code getNameCount() - 1}, inclusive.\n     *\n     * @return  an iterator over the name elements of this path.\n     */\n    @Override\n    default Iterator\u003cPath\u003e iterator() {\n        return new Iterator\u003c\u003e() {\n            private int i \u003d 0;\n\n            @Override\n            public boolean hasNext() {\n                return (i \u003c getNameCount());\n            }\n\n            @Override\n            public Path next() {\n                if (i \u003c getNameCount()) {\n                    Path result \u003d getName(i);\n                    i++;\n                    return result;\n                } else {\n                    throw new NoSuchElementException();\n                }\n            }\n        };\n    }\n\n    // -- compareTo/equals/hashCode --\n\n    /**\n     * Compares two abstract paths lexicographically. The ordering defined by\n     * this method is provider specific, and in the case of the default\n     * provider, platform specific. This method does not access the file system\n     * and neither file is required to exist.\n     *\n     * \u003cp\u003e This method may not be used to compare paths that are associated\n     * with different file system providers.\n     *\n     * @param   other  the path compared to this path.\n     *\n     * @return  zero if the argument is {@link #equals equal} to this path, a\n     *          value less than zero if this path is lexicographically less than\n     *          the argument, or a value greater than zero if this path is\n     *          lexicographically greater than the argument\n     *\n     * @throws  ClassCastException\n     *          if the paths are associated with different providers\n     */\n    @Override\n    int compareTo(Path other);\n\n    /**\n     * Tests this path for equality with the given object.\n     *\n     * \u003cp\u003e If the given object is not a Path, or is a Path associated with a\n     * different {@code FileSystem}, then this method returns {@code false}.\n     *\n     * \u003cp\u003e Whether or not two path are equal depends on the file system\n     * implementation. In some cases the paths are compared without regard\n     * to case, and others are case sensitive. This method does not access the\n     * file system and the file is not required to exist. Where required, the\n     * {@link Files#isSameFile isSameFile} method may be used to check if two\n     * paths locate the same file.\n     *\n     * \u003cp\u003e This method satisfies the general contract of the {@link\n     * java.lang.Object#equals(Object) Object.equals} method. \u003c/p\u003e\n     *\n     * @param   other\n     *          the object to which this object is to be compared\n     *\n     * @return  {@code true} if, and only if, the given object is a {@code Path}\n     *          that is identical to this {@code Path}\n     */\n    boolean equals(Object other);\n\n    /**\n     * Computes a hash code for this path.\n     *\n     * \u003cp\u003e The hash code is based upon the components of the path, and\n     * satisfies the general contract of the {@link Object#hashCode\n     * Object.hashCode} method.\n     *\n     * @return  the hash-code value for this path\n     */\n    int hashCode();\n\n    /**\n     * Returns the string representation of this path.\n     *\n     * \u003cp\u003e If this path was created by converting a path string using the\n     * {@link FileSystem#getPath getPath} method then the path string returned\n     * by this method may differ from the original String used to create the path.\n     *\n     * \u003cp\u003e The returned path string uses the default name {@link\n     * FileSystem#getSeparator separator} to separate names in the path.\n     *\n     * @return  the string representation of this path\n     */\n    String toString();\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor16.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:319)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 23 more

Oct 11, 2023 3:36:01 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:329)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 23 more

2023.10.11 03:36:23 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 03:36:24 WARN  Using indexes to guess the definition of Path
2023.10.11 03:36:24 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:670)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	jdk.internal.reflect.GeneratedMethodAccessor21.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 11, 2023 3:36:24 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.nio.file;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.nio.file.spi.FileSystemProvider;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\n/**\n * An object that may be used to locate a file in a file system. It will\n * typically represent a system dependent file path.\n *\n * \u003cp\u003e A {@code Path} represents a path that is hierarchical and composed of a\n * sequence of directory and file name elements separated by a special separator\n * or delimiter. A \u003cem\u003eroot component\u003c/em\u003e, that identifies a file system\n * hierarchy, may also be present. The name element that is \u003cem\u003efarthest\u003c/em\u003e\n * from the root of the directory hierarchy is the name of a file or directory.\n * The other name elements are directory names. A {@code Path} can represent a\n * root, a root and a sequence of names, or simply one or more name elements.\n * A {@code Path} is considered to be an \u003ci\u003eempty path\u003c/i\u003e if it consists\n * solely of one name element that is empty. Accessing a file using an\n * \u003ci\u003eempty path\u003c/i\u003e is equivalent to accessing the default directory of the\n * file system. {@code Path} defines the {@link #getFileName() getFileName},\n * {@link #getParent getParent}, {@link #getRoot getRoot}, and {@link #subpath\n * subpath} methods to access the path components or a subsequence of its name\n * elements.\n *\n * \u003cp\u003e In addition to accessing the components of a path, a {@code Path} also\n * defines the {@link #resolve(Path) resolve} and {@link #resolveSibling(Path)\n * resolveSibling} methods to combine paths. The {@link #relativize relativize}\n * method that can be used to construct a relative path between two paths.\n * Paths can be {@link #compareTo compared}, and tested against each other using\n * the {@link #startsWith startsWith} and {@link #endsWith endsWith} methods.\n *\n * \u003cp\u003e This interface extends {@link Watchable} interface so that a directory\n * located by a path can be {@link #register registered} with a {@link\n * WatchService} and entries in the directory watched. \u003c/p\u003e\n *\n * \u003cp\u003e \u003cb\u003eWARNING:\u003c/b\u003e This interface is only intended to be implemented by\n * those developing custom file system implementations. Methods may be added to\n * this interface in future releases. \u003c/p\u003e\n *\n * \u003ch2\u003eAccessing Files\u003c/h2\u003e\n * \u003cp\u003e Paths may be used with the {@link Files} class to operate on files,\n * directories, and other types of files. For example, suppose we want a {@link\n * java.io.BufferedReader} to read text from a file \"{@code access.log}\". The\n * file is located in a directory \"{@code logs}\" relative to the current working\n * directory and is UTF-8 encoded.\n * \u003cpre\u003e\n *     Path path \u003d FileSystems.getDefault().getPath(\"logs\", \"access.log\");\n *     BufferedReader reader \u003d Files.newBufferedReader(path, StandardCharsets.UTF_8);\n * \u003c/pre\u003e\n *\n * \u003ca id\u003d\"interop\"\u003e\u003c/a\u003e\u003ch2\u003eInteroperability\u003c/h2\u003e\n * \u003cp\u003e Paths associated with the default {@link\n * java.nio.file.spi.FileSystemProvider provider} are generally interoperable\n * with the {@link java.io.File java.io.File} class. Paths created by other\n * providers are unlikely to be interoperable with the abstract path names\n * represented by {@code java.io.File}. The {@link java.io.File#toPath toPath}\n * method may be used to obtain a {@code Path} from the abstract path name\n * represented by a {@code java.io.File} object. The resulting {@code Path} can\n * be used to operate on the same file as the {@code java.io.File} object. In\n * addition, the {@link #toFile toFile} method is useful to construct a {@code\n * File} from the {@code String} representation of a {@code Path}.\n *\n * \u003ch2\u003eConcurrency\u003c/h2\u003e\n * \u003cp\u003e Implementations of this interface are immutable and safe for use by\n * multiple concurrent threads.\n *\n * @since 1.7\n */\n\npublic interface Path\n    extends Comparable\u003cPath\u003e, Iterable\u003cPath\u003e, Watchable\n{\n    /**\n     * Returns a {@code Path} by converting a path string, or a sequence of\n     * strings that when joined form a path string. If {@code more} does not\n     * specify any elements then the value of the {@code first} parameter is\n     * the path string to convert. If {@code more} specifies one or more\n     * elements then each non-empty string, including {@code first}, is\n     * considered to be a sequence of name elements and is joined to form a\n     * path string. The details as to how the Strings are joined is provider\n     * specific but typically they will be joined using the\n     * {@link FileSystem#getSeparator name-separator} as the separator.\n     * For example, if the name separator is \"{@code /}\" and\n     * {@code getPath(\"/foo\",\"bar\",\"gus\")} is invoked, then the path string\n     * {@code \"/foo/bar/gus\"} is converted to a {@code Path}. A {@code Path}\n     * representing an empty path is returned if {@code first} is the empty\n     * string and {@code more} does not contain any non-empty strings.\n     *\n     * \u003cp\u003e The {@code Path} is obtained by invoking the {@link FileSystem#getPath\n     * getPath} method of the {@link FileSystems#getDefault default} {@link\n     * FileSystem}.\n     *\n     * \u003cp\u003e Note that while this method is very convenient, using it will imply\n     * an assumed reference to the default {@code FileSystem} and limit the\n     * utility of the calling code. Hence it should not be used in library code\n     * intended for flexible reuse. A more flexible alternative is to use an\n     * existing {@code Path} instance as an anchor, such as:\n     * \u003cpre\u003e{@code\n     *     Path dir \u003d ...\n     *     Path path \u003d dir.resolve(\"file\");\n     * }\u003c/pre\u003e\n     *\n     * @param   first\n     *          the path string or initial part of the path string\n     * @param   more\n     *          additional strings to be joined to form the path string\n     *\n     * @return  the resulting {@code Path}\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a {@code Path}\n     *\n     * @see FileSystem#getPath\n     *\n     * @since 11\n     */\n    public static Path of(String first, String... more) {\n        return FileSystems.getDefault().getPath(first, more);\n    }\n\n    /**\n     * Returns a {@code Path} by converting a URI.\n     *\n     * \u003cp\u003e This method iterates over the {@link FileSystemProvider#installedProviders()\n     * installed} providers to locate the provider that is identified by the\n     * URI {@link URI#getScheme scheme} of the given URI. URI schemes are\n     * compared without regard to case. If the provider is found then its {@link\n     * FileSystemProvider#getPath getPath} method is invoked to convert the\n     * URI.\n     *\n     * \u003cp\u003e In the case of the default provider, identified by the URI scheme\n     * \"file\", the given URI has a non-empty path component, and undefined query\n     * and fragment components. Whether the authority component may be present\n     * is platform specific. The returned {@code Path} is associated with the\n     * {@link FileSystems#getDefault default} file system.\n     *\n     * \u003cp\u003e The default provider provides a similar \u003cem\u003eround-trip\u003c/em\u003e guarantee\n     * to the {@link java.io.File} class. For a given {@code Path} \u003ci\u003ep\u003c/i\u003e it\n     * is guaranteed that\n     * \u003cblockquote\u003e{@code\n     * Path.of(}\u003ci\u003ep\u003c/i\u003e{@code .}{@link Path#toUri() toUri}{@code ()).equals(}\n     * \u003ci\u003ep\u003c/i\u003e{@code .}{@link Path#toAbsolutePath() toAbsolutePath}{@code ())}\n     * \u003c/blockquote\u003e\n     * so long as the original {@code Path}, the {@code URI}, and the new {@code\n     * Path} are all created in (possibly different invocations of) the same\n     * Java virtual machine. Whether other providers make any guarantees is\n     * provider specific and therefore unspecified.\n     *\n     * @param   uri\n     *          the URI to convert\n     *\n     * @return  the resulting {@code Path}\n     *\n     * @throws  IllegalArgumentException\n     *          if preconditions on the {@code uri} parameter do not hold. The\n     *          format of the URI is provider specific.\n     * @throws  FileSystemNotFoundException\n     *          The file system, identified by the URI, does not exist and\n     *          cannot be created automatically, or the provider identified by\n     *          the URI\u0027s scheme component is not installed\n     * @throws  SecurityException\n     *          if a security manager is installed and it denies an unspecified\n     *          permission to access the file system\n     *\n     * @since 11\n     */\n    public static Path of(URI uri) {\n        String scheme \u003d  uri.getScheme();\n        if (scheme \u003d\u003d null)\n            throw new IllegalArgumentException(\"Missing scheme\");\n\n        // check for default provider to avoid loading of installed providers\n        if (scheme.equalsIgnoreCase(\"file\"))\n            return FileSystems.getDefault().provider().getPath(uri);\n\n        // try to find provider\n        for (FileSystemProvider provider: FileSystemProvider.installedProviders()) {\n            if (provider.getScheme().equalsIgnoreCase(scheme)) {\n                return provider.getPath(uri);\n            }\n        }\n\n        throw new FileSystemNotFoundException(\"Provider \\\"\" + scheme + \"\\\" not installed\");\n    }\n\n    /**\n     * Returns the file system that created this object.\n     *\n     * @return  the file system that created this object\n     */\n    FileSystem getFileSystem();\n\n    /**\n     * Tells whether or not this path is absolute.\n     *\n     * \u003cp\u003e An absolute path is complete in that it doesn\u0027t need to be combined\n     * with other path information in order to locate a file.\n     *\n     * @return  {@code true} if, and only if, this path is absolute\n     */\n    boolean isAbsolute();\n\n    /**\n     * Returns the root component of this path as a {@code Path} object,\n     * or {@code null} if this path does not have a root component.\n     *\n     * @return  a path representing the root component of this path,\n     *          or {@code null}\n     */\n    Path getRoot();\n\n    /**\n     * Returns the name of the file or directory denoted by this path as a\n     * {@code Path} object. The file name is the \u003cem\u003efarthest\u003c/em\u003e element from\n     * the root in the directory hierarchy.\n     *\n     * @return  a path representing the name of the file or directory, or\n     *          {@code null} if this path has zero elements\n     */\n    Path getFileName();\n\n    /**\n     * Returns the \u003cem\u003eparent path\u003c/em\u003e, or {@code null} if this path does not\n     * have a parent.\n     *\n     * \u003cp\u003e The parent of this path object consists of this path\u0027s root\n     * component, if any, and each element in the path except for the\n     * \u003cem\u003efarthest\u003c/em\u003e from the root in the directory hierarchy. This method\n     * does not access the file system; the path or its parent may not exist.\n     * Furthermore, this method does not eliminate special names such as \".\"\n     * and \"..\" that may be used in some implementations. On UNIX for example,\n     * the parent of \"{@code /a/b/c}\" is \"{@code /a/b}\", and the parent of\n     * {@code \"x/y/.}\" is \"{@code x/y}\". This method may be used with the {@link\n     * #normalize normalize} method, to eliminate redundant names, for cases where\n     * \u003cem\u003eshell-like\u003c/em\u003e navigation is required.\n     *\n     * \u003cp\u003e If this path has more than one element, and no root component, then\n     * this method is equivalent to evaluating the expression:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * subpath(0,\u0026nbsp;getNameCount()-1);\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @return  a path representing the path\u0027s parent\n     */\n    Path getParent();\n\n    /**\n     * Returns the number of name elements in the path.\n     *\n     * @return  the number of elements in the path, or {@code 0} if this path\n     *          only represents a root component\n     */\n    int getNameCount();\n\n    /**\n     * Returns a name element of this path as a {@code Path} object.\n     *\n     * \u003cp\u003e The {@code index} parameter is the index of the name element to return.\n     * The element that is \u003cem\u003eclosest\u003c/em\u003e to the root in the directory hierarchy\n     * has index {@code 0}. The element that is \u003cem\u003efarthest\u003c/em\u003e from the root\n     * has index {@link #getNameCount count}{@code -1}.\n     *\n     * @param   index\n     *          the index of the element\n     *\n     * @return  the name element\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code index} is negative, {@code index} is greater than or\n     *          equal to the number of elements, or this path has zero name\n     *          elements\n     */\n    Path getName(int index);\n\n    /**\n     * Returns a relative {@code Path} that is a subsequence of the name\n     * elements of this path.\n     *\n     * \u003cp\u003e The {@code beginIndex} and {@code endIndex} parameters specify the\n     * subsequence of name elements. The name that is \u003cem\u003eclosest\u003c/em\u003e to the root\n     * in the directory hierarchy has index {@code 0}. The name that is\n     * \u003cem\u003efarthest\u003c/em\u003e from the root has index {@link #getNameCount\n     * count}{@code -1}. The returned {@code Path} object has the name elements\n     * that begin at {@code beginIndex} and extend to the element at index {@code\n     * endIndex-1}.\n     *\n     * @param   beginIndex\n     *          the index of the first element, inclusive\n     * @param   endIndex\n     *          the index of the last element, exclusive\n     *\n     * @return  a new {@code Path} object that is a subsequence of the name\n     *          elements in this {@code Path}\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code beginIndex} is negative, or greater than or equal to\n     *          the number of elements. If {@code endIndex} is less than or\n     *          equal to {@code beginIndex}, or larger than the number of elements.\n     */\n    Path subpath(int beginIndex, int endIndex);\n\n    /**\n     * Tests if this path starts with the given path.\n     *\n     * \u003cp\u003e This path \u003cem\u003estarts\u003c/em\u003e with the given path if this path\u0027s root\n     * component \u003cem\u003estarts\u003c/em\u003e with the root component of the given path,\n     * and this path starts with the same name elements as the given path.\n     * If the given path has more name elements than this path then {@code false}\n     * is returned.\n     *\n     * \u003cp\u003e Whether or not the root component of this path starts with the root\n     * component of the given path is file system specific. If this path does\n     * not have a root component and the given path has a root component then\n     * this path does not start with the given path.\n     *\n     * \u003cp\u003e If the given path is associated with a different {@code FileSystem}\n     * to this path then {@code false} is returned.\n     *\n     * @param   other\n     *          the given path\n     *\n     * @return  {@code true} if this path starts with the given path; otherwise\n     *          {@code false}\n     */\n    boolean startsWith(Path other);\n\n    /**\n     * Tests if this path starts with a {@code Path}, constructed by converting\n     * the given path string, in exactly the manner specified by the {@link\n     * #startsWith(Path) startsWith(Path)} method. On UNIX for example, the path\n     * \"{@code foo/bar}\" starts with \"{@code foo}\" and \"{@code foo/bar}\". It\n     * does not start with \"{@code f}\" or \"{@code fo}\".\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     startsWith(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the given path string\n     *\n     * @return  {@code true} if this path starts with the given path; otherwise\n     *          {@code false}\n     *\n     * @throws  InvalidPathException\n     *          If the path string cannot be converted to a Path.\n     */\n    default boolean startsWith(String other) {\n        return startsWith(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Tests if this path ends with the given path.\n     *\n     * \u003cp\u003e If the given path has \u003cem\u003eN\u003c/em\u003e elements, and no root component,\n     * and this path has \u003cem\u003eN\u003c/em\u003e or more elements, then this path ends with\n     * the given path if the last \u003cem\u003eN\u003c/em\u003e elements of each path, starting at\n     * the element farthest from the root, are equal.\n     *\n     * \u003cp\u003e If the given path has a root component then this path ends with the\n     * given path if the root component of this path \u003cem\u003eends with\u003c/em\u003e the root\n     * component of the given path, and the corresponding elements of both paths\n     * are equal. Whether or not the root component of this path ends with the\n     * root component of the given path is file system specific. If this path\n     * does not have a root component and the given path has a root component\n     * then this path does not end with the given path.\n     *\n     * \u003cp\u003e If the given path is associated with a different {@code FileSystem}\n     * to this path then {@code false} is returned.\n     *\n     * @param   other\n     *          the given path\n     *\n     * @return  {@code true} if this path ends with the given path; otherwise\n     *          {@code false}\n     */\n    boolean endsWith(Path other);\n\n    /**\n     * Tests if this path ends with a {@code Path}, constructed by converting\n     * the given path string, in exactly the manner specified by the {@link\n     * #endsWith(Path) endsWith(Path)} method. On UNIX for example, the path\n     * \"{@code foo/bar}\" ends with \"{@code foo/bar}\" and \"{@code bar}\". It does\n     * not end with \"{@code r}\" or \"{@code /bar}\". Note that trailing separators\n     * are not taken into account, and so invoking this method on the {@code\n     * Path}\"{@code foo/bar}\" with the {@code String} \"{@code bar/}\" returns\n     * {@code true}.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     endsWith(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the given path string\n     *\n     * @return  {@code true} if this path ends with the given path; otherwise\n     *          {@code false}\n     *\n     * @throws  InvalidPathException\n     *          If the path string cannot be converted to a Path.\n     */\n    default boolean endsWith(String other) {\n        return endsWith(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Returns a path that is this path with redundant name elements eliminated.\n     *\n     * \u003cp\u003e The precise definition of this method is implementation dependent but\n     * in general it derives from this path, a path that does not contain\n     * \u003cem\u003eredundant\u003c/em\u003e name elements. In many file systems, the \"{@code .}\"\n     * and \"{@code ..}\" are special names used to indicate the current directory\n     * and parent directory. In such file systems all occurrences of \"{@code .}\"\n     * are considered redundant. If a \"{@code ..}\" is preceded by a\n     * non-\"{@code ..}\" name then both names are considered redundant (the\n     * process to identify such names is repeated until it is no longer\n     * applicable).\n     *\n     * \u003cp\u003e This method does not access the file system; the path may not locate\n     * a file that exists. Eliminating \"{@code ..}\" and a preceding name from a\n     * path may result in the path that locates a different file than the original\n     * path. This can arise when the preceding name is a symbolic link.\n     *\n     * @return  the resulting path or this path if it does not contain\n     *          redundant name elements; an empty path is returned if this path\n     *          does not have a root component and all name elements are redundant\n     *\n     * @see #getParent\n     * @see #toRealPath\n     */\n    Path normalize();\n\n    // -- resolution and relativization --\n\n    /**\n     * Resolve the given path against this path.\n     *\n     * \u003cp\u003e If the {@code other} parameter is an {@link #isAbsolute() absolute}\n     * path then this method trivially returns {@code other}. If {@code other}\n     * is an \u003ci\u003eempty path\u003c/i\u003e then this method trivially returns this path.\n     * Otherwise this method considers this path to be a directory and resolves\n     * the given path against this path. In the simplest case, the given path\n     * does not have a {@link #getRoot root} component, in which case this method\n     * \u003cem\u003ejoins\u003c/em\u003e the given path to this path and returns a resulting path\n     * that {@link #endsWith ends} with the given path. Where the given path has\n     * a root component then resolution is highly implementation dependent and\n     * therefore unspecified.\n     *\n     * @param   other\n     *          the path to resolve against this path\n     *\n     * @return  the resulting path\n     *\n     * @see #relativize\n     */\n    Path resolve(Path other);\n\n    /**\n     * Converts a given path string to a {@code Path} and resolves it against\n     * this {@code Path} in exactly the manner specified by the {@link\n     * #resolve(Path) resolve} method. For example, suppose that the name\n     * separator is \"{@code /}\" and a path represents \"{@code foo/bar}\", then\n     * invoking this method with the path string \"{@code gus}\" will result in\n     * the {@code Path} \"{@code foo/bar/gus}\".\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     resolve(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the path string to resolve against this path\n     *\n     * @return  the resulting path\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a Path.\n     *\n     * @see FileSystem#getPath\n     */\n    default Path resolve(String other) {\n        return resolve(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Resolves the given path against this path\u0027s {@link #getParent parent}\n     * path. This is useful where a file name needs to be \u003ci\u003ereplaced\u003c/i\u003e with\n     * another file name. For example, suppose that the name separator is\n     * \"{@code /}\" and a path represents \"{@code dir1/dir2/foo}\", then invoking\n     * this method with the {@code Path} \"{@code bar}\" will result in the {@code\n     * Path} \"{@code dir1/dir2/bar}\". If this path does not have a parent path,\n     * or {@code other} is {@link #isAbsolute() absolute}, then this method\n     * returns {@code other}. If {@code other} is an empty path then this method\n     * returns this path\u0027s parent, or where this path doesn\u0027t have a parent, the\n     * empty path.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     (getParent() \u003d\u003d null) ? other : getParent().resolve(other);\n     * }\u003c/pre\u003e\n     * unless {@code other \u003d\u003d null}, in which case a\n     * {@code NullPointerException} is thrown.\n     *\n     * @param   other\n     *          the path to resolve against this path\u0027s parent\n     *\n     * @return  the resulting path\n     *\n     * @see #resolve(Path)\n     */\n    default Path resolveSibling(Path other) {\n        if (other \u003d\u003d null)\n            throw new NullPointerException();\n        Path parent \u003d getParent();\n        return (parent \u003d\u003d null) ? other : parent.resolve(other);\n    }\n\n    /**\n     * Converts a given path string to a {@code Path} and resolves it against\n     * this path\u0027s {@link #getParent parent} path in exactly the manner\n     * specified by the {@link #resolveSibling(Path) resolveSibling} method.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     resolveSibling(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the path string to resolve against this path\u0027s parent\n     *\n     * @return  the resulting path\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a Path.\n     *\n     * @see FileSystem#getPath\n     */\n    default Path resolveSibling(String other) {\n        return resolveSibling(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Constructs a relative path between this path and a given path.\n     *\n     * \u003cp\u003e Relativization is the inverse of {@link #resolve(Path) resolution}.\n     * This method attempts to construct a {@link #isAbsolute relative} path\n     * that when {@link #resolve(Path) resolved} against this path, yields a\n     * path that locates the same file as the given path. For example, on UNIX,\n     * if this path is {@code \"/a/b\"} and the given path is {@code \"/a/b/c/d\"}\n     * then the resulting relative path would be {@code \"c/d\"}. Where this\n     * path and the given path do not have a {@link #getRoot root} component,\n     * then a relative path can be constructed. A relative path cannot be\n     * constructed if only one of the paths have a root component. Where both\n     * paths have a root component then it is implementation dependent if a\n     * relative path can be constructed. If this path and the given path are\n     * {@link #equals equal} then an \u003ci\u003eempty path\u003c/i\u003e is returned.\n     *\n     * \u003cp\u003e For any two {@link #normalize normalized} paths \u003ci\u003ep\u003c/i\u003e and\n     * \u003ci\u003eq\u003c/i\u003e, where \u003ci\u003eq\u003c/i\u003e does not have a root component,\n     * \u003cblockquote\u003e\n     *   \u003ci\u003ep\u003c/i\u003e{@code .relativize(}\u003ci\u003ep\u003c/i\u003e\n     *   {@code .resolve(}\u003ci\u003eq\u003c/i\u003e{@code )).equals(}\u003ci\u003eq\u003c/i\u003e{@code )}\n     * \u003c/blockquote\u003e\n     *\n     * \u003cp\u003e When symbolic links are supported, then whether the resulting path,\n     * when resolved against this path, yields a path that can be used to locate\n     * the {@link Files#isSameFile same} file as {@code other} is implementation\n     * dependent. For example, if this path is  {@code \"/a/b\"} and the given\n     * path is {@code \"/a/x\"} then the resulting relative path may be {@code\n     * \"../x\"}. If {@code \"b\"} is a symbolic link then is implementation\n     * dependent if {@code \"a/b/../x\"} would locate the same file as {@code \"/a/x\"}.\n     *\n     * @param   other\n     *          the path to relativize against this path\n     *\n     * @return  the resulting relative path, or an empty path if both paths are\n     *          equal\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code other} is not a {@code Path} that can be relativized\n     *          against this path\n     */\n    Path relativize(Path other);\n\n    /**\n     * Returns a URI to represent this path.\n     *\n     * \u003cp\u003e This method constructs an absolute {@link URI} with a {@link\n     * URI#getScheme() scheme} equal to the URI scheme that identifies the\n     * provider. The exact form of the scheme specific part is highly provider\n     * dependent.\n     *\n     * \u003cp\u003e In the case of the default provider, the URI is hierarchical with\n     * a {@link URI#getPath() path} component that is absolute. The query and\n     * fragment components are undefined. Whether the authority component is\n     * defined or not is implementation dependent. There is no guarantee that\n     * the {@code URI} may be used to construct a {@link java.io.File java.io.File}.\n     * In particular, if this path represents a Universal Naming Convention (UNC)\n     * path, then the UNC server name may be encoded in the authority component\n     * of the resulting URI. In the case of the default provider, and the file\n     * exists, and it can be determined that the file is a directory, then the\n     * resulting {@code URI} will end with a slash.\n     *\n     * \u003cp\u003e The default provider provides a similar \u003cem\u003eround-trip\u003c/em\u003e guarantee\n     * to the {@link java.io.File} class. For a given {@code Path} \u003ci\u003ep\u003c/i\u003e it\n     * is guaranteed that\n     * \u003cblockquote\u003e\n     * {@link Path#of(URI) Path.of}{@code (}\u003ci\u003ep\u003c/i\u003e{@code .toUri()).equals(}\u003ci\u003ep\u003c/i\u003e\n     * {@code .}{@link #toAbsolutePath() toAbsolutePath}{@code ())}\n     * \u003c/blockquote\u003e\n     * so long as the original {@code Path}, the {@code URI}, and the new {@code\n     * Path} are all created in (possibly different invocations of) the same\n     * Java virtual machine. Whether other providers make any guarantees is\n     * provider specific and therefore unspecified.\n     *\n     * \u003cp\u003e When a file system is constructed to access the contents of a file\n     * as a file system then it is highly implementation specific if the returned\n     * URI represents the given path in the file system or it represents a\n     * \u003cem\u003ecompound\u003c/em\u003e URI that encodes the URI of the enclosing file system.\n     * A format for compound URIs is not defined in this release; such a scheme\n     * may be added in a future release.\n     *\n     * @return  the URI representing this path\n     *\n     * @throws  java.io.IOError\n     *          if an I/O error occurs obtaining the absolute path, or where a\n     *          file system is constructed to access the contents of a file as\n     *          a file system, and the URI of the enclosing file system cannot be\n     *          obtained\n     *\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager\n     *          is installed, the {@link #toAbsolutePath toAbsolutePath} method\n     *          throws a security exception.\n     */\n    URI toUri();\n\n    /**\n     * Returns a {@code Path} object representing the absolute path of this\n     * path.\n     *\n     * \u003cp\u003e If this path is already {@link Path#isAbsolute absolute} then this\n     * method simply returns this path. Otherwise, this method resolves the path\n     * in an implementation dependent manner, typically by resolving the path\n     * against a file system default directory. Depending on the implementation,\n     * this method may throw an I/O error if the file system is not accessible.\n     *\n     * @return  a {@code Path} object representing the absolute path\n     *\n     * @throws  java.io.IOError\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, a security manager\n     *          is installed, and this path is not absolute, then the security\n     *          manager\u0027s {@link SecurityManager#checkPropertyAccess(String)\n     *          checkPropertyAccess} method is invoked to check access to the\n     *          system property {@code user.dir}\n     */\n    Path toAbsolutePath();\n\n    /**\n     * Returns the \u003cem\u003ereal\u003c/em\u003e path of an existing file.\n     *\n     * \u003cp\u003e The precise definition of this method is implementation dependent but\n     * in general it derives from this path, an {@link #isAbsolute absolute}\n     * path that locates the {@link Files#isSameFile same} file as this path, but\n     * with name elements that represent the actual name of the directories\n     * and the file. For example, where filename comparisons on a file system\n     * are case insensitive then the name elements represent the names in their\n     * actual case. Additionally, the resulting path has redundant name\n     * elements removed.\n     *\n     * \u003cp\u003e If this path is relative then its absolute path is first obtained,\n     * as if by invoking the {@link #toAbsolutePath toAbsolutePath} method.\n     *\n     * \u003cp\u003e The {@code options} array may be used to indicate how symbolic links\n     * are handled. By default, symbolic links are resolved to their final\n     * target. If the option {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} is\n     * present then this method does not resolve symbolic links.\n     *\n     * Some implementations allow special names such as \"{@code ..}\" to refer to\n     * the parent directory. When deriving the \u003cem\u003ereal path\u003c/em\u003e, and a\n     * \"{@code ..}\" (or equivalent) is preceded by a non-\"{@code ..}\" name then\n     * an implementation will typically cause both names to be removed. When\n     * not resolving symbolic links and the preceding name is a symbolic link\n     * then the names are only removed if it guaranteed that the resulting path\n     * will locate the same file as this path.\n     *\n     * @param   options\n     *          options indicating how symbolic links are handled\n     *\n     * @return  an absolute path represent the \u003cem\u003ereal\u003c/em\u003e path of the file\n     *          located by this object\n     *\n     * @throws  IOException\n     *          if the file does not exist or an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager\n     *          is installed, its {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file, and where\n     *          this path is not absolute, its {@link SecurityManager#checkPropertyAccess(String)\n     *          checkPropertyAccess} method is invoked to check access to the\n     *          system property {@code user.dir}\n     */\n    Path toRealPath(LinkOption... options) throws IOException;\n\n    /**\n     * Returns a {@link File} object representing this path. Where this {@code\n     * Path} is associated with the default provider, then this method is\n     * equivalent to returning a {@code File} object constructed with the\n     * {@code String} representation of this path.\n     *\n     * \u003cp\u003e If this path was created by invoking the {@code File} {@link\n     * File#toPath toPath} method then there is no guarantee that the {@code\n     * File} object returned by this method is {@link #equals equal} to the\n     * original {@code File}.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     new File(toString());\n     * }\u003c/pre\u003e\n     * if the {@code FileSystem} which created this {@code Path} is the default\n     * file system; otherwise an {@code UnsupportedOperationException} is\n     * thrown.\n     *\n     * @return  a {@code File} object representing this path\n     *\n     * @throws  UnsupportedOperationException\n     *          if this {@code Path} is not associated with the default provider\n     */\n    default File toFile() {\n        if (getFileSystem() \u003d\u003d FileSystems.getDefault()) {\n            return new File(toString());\n        } else {\n            throw new UnsupportedOperationException(\"Path not associated with \"\n                    + \"default file system.\");\n        }\n    }\n\n    // -- watchable --\n\n    /**\n     * Registers the file located by this path with a watch service.\n     *\n     * \u003cp\u003e In this release, this path locates a directory that exists. The\n     * directory is registered with the watch service so that entries in the\n     * directory can be watched. The {@code events} parameter is the events to\n     * register and may contain the following events:\n     * \u003cul\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_CREATE ENTRY_CREATE} -\n     *       entry created or moved into the directory\u003c/li\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_DELETE ENTRY_DELETE} -\n     *        entry deleted or moved out of the directory\u003c/li\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_MODIFY ENTRY_MODIFY} -\n     *        entry in directory was modified\u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e The {@link WatchEvent#context context} for these events is the\n     * relative path between the directory located by this path, and the path\n     * that locates the directory entry that is created, deleted, or modified.\n     *\n     * \u003cp\u003e The set of events may include additional implementation specific\n     * event that are not defined by the enum {@link StandardWatchEventKinds}\n     *\n     * \u003cp\u003e The {@code modifiers} parameter specifies \u003cem\u003emodifiers\u003c/em\u003e that\n     * qualify how the directory is registered. This release does not define any\n     * \u003cem\u003estandard\u003c/em\u003e modifiers. It may contain implementation specific\n     * modifiers.\n     *\n     * \u003cp\u003e Where a file is registered with a watch service by means of a symbolic\n     * link then it is implementation specific if the watch continues to depend\n     * on the existence of the symbolic link after it is registered.\n     *\n     * @param   watcher\n     *          the watch service to which this object is to be registered\n     * @param   events\n     *          the events for which this object should be registered\n     * @param   modifiers\n     *          the modifiers, if any, that modify how the object is registered\n     *\n     * @return  a key representing the registration of this object with the\n     *          given watch service\n     *\n     * @throws  UnsupportedOperationException\n     *          if unsupported events or modifiers are specified\n     * @throws  IllegalArgumentException\n     *          if an invalid combination of events or modifiers is specified\n     * @throws  ClosedWatchServiceException\n     *          if the watch service is closed\n     * @throws  NotDirectoryException\n     *          if the file is registered to watch the entries in a directory\n     *          and the file is not a directory  \u003ci\u003e(optional specific exception)\u003c/i\u003e\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     */\n    @Override\n    WatchKey register(WatchService watcher,\n                      WatchEvent.Kind\u003c?\u003e[] events,\n                      WatchEvent.Modifier... modifiers)\n        throws IOException;\n\n    /**\n     * Registers the file located by this path with a watch service.\n     *\n     * \u003cp\u003e An invocation of this method behaves in exactly the same way as the\n     * invocation\n     * \u003cpre\u003e\n     *     watchable.{@link #register(WatchService,WatchEvent.Kind[],WatchEvent.Modifier[]) register}(watcher, events, new WatchEvent.Modifier[0]);\n     * \u003c/pre\u003e\n     *\n     * \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e\n     * Suppose we wish to register a directory for entry create, delete, and modify\n     * events:\n     * \u003cpre\u003e\n     *     Path dir \u003d ...\n     *     WatchService watcher \u003d ...\n     *\n     *     WatchKey key \u003d dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);\n     * \u003c/pre\u003e\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     register(watcher, events, new WatchEvent.Modifier[0]);\n     * }\u003c/pre\u003e\n     *\n     * @param   watcher\n     *          The watch service to which this object is to be registered\n     * @param   events\n     *          The events for which this object should be registered\n     *\n     * @return  A key representing the registration of this object with the\n     *          given watch service\n     *\n     * @throws  UnsupportedOperationException\n     *          If unsupported events are specified\n     * @throws  IllegalArgumentException\n     *          If an invalid combination of events is specified\n     * @throws  ClosedWatchServiceException\n     *          If the watch service is closed\n     * @throws  NotDirectoryException\n     *          If the file is registered to watch the entries in a directory\n     *          and the file is not a directory  \u003ci\u003e(optional specific exception)\u003c/i\u003e\n     * @throws  IOException\n     *          If an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     */\n    @Override\n    default WatchKey register(WatchService watcher,\n                      WatchEvent.Kind\u003c?\u003e... events) throws IOException {\n        return register(watcher, events, new WatchEvent.Modifier[0]);\n    }\n\n    // -- Iterable --\n\n    /**\n     * Returns an iterator over the name elements of this path.\n     *\n     * \u003cp\u003e The first element returned by the iterator represents the name\n     * element that is closest to the root in the directory hierarchy, the\n     * second element is the next closest, and so on. The last element returned\n     * is the name of the file or directory denoted by this path. The {@link\n     * #getRoot root} component, if present, is not returned by the iterator.\n     *\n     * @implSpec\n     * The default implementation returns an {@code Iterator\u003cPath\u003e} which, for\n     * this path, traverses the {@code Path}s returned by\n     * {@code getName(index)}, where {@code index} ranges from zero to\n     * {@code getNameCount() - 1}, inclusive.\n     *\n     * @return  an iterator over the name elements of this path.\n     */\n    @Override\n    default Iterator\u003cPath\u003e iterator() {\n        return new Iterator\u003c\u003e() {\n            private int i \u003d 0;\n\n            @Override\n            public boolean hasNext() {\n                return (i \u003c getNameCount());\n            }\n\n            @Override\n            public Path next() {\n                if (i \u003c getNameCount()) {\n                    Path result \u003d getName(i);\n                    i++;\n                    return result;\n                } else {\n                    throw new NoSuchElementException();\n                }\n            }\n        };\n    }\n\n    // -- compareTo/equals/hashCode --\n\n    /**\n     * Compares two abstract paths lexicographically. The ordering defined by\n     * this method is provider specific, and in the case of the default\n     * provider, platform specific. This method does not access the file system\n     * and neither file is required to exist.\n     *\n     * \u003cp\u003e This method may not be used to compare paths that are associated\n     * with different file system providers.\n     *\n     * @param   other  the path compared to this path.\n     *\n     * @return  zero if the argument is {@link #equals equal} to this path, a\n     *          value less than zero if this path is lexicographically less than\n     *          the argument, or a value greater than zero if this path is\n     *          lexicographically greater than the argument\n     *\n     * @throws  ClassCastException\n     *          if the paths are associated with different providers\n     */\n    @Override\n    int compareTo(Path other);\n\n    /**\n     * Tests this path for equality with the given object.\n     *\n     * \u003cp\u003e If the given object is not a Path, or is a Path associated with a\n     * different {@code FileSystem}, then this method returns {@code false}.\n     *\n     * \u003cp\u003e Whether or not two path are equal depends on the file system\n     * implementation. In some cases the paths are compared without regard\n     * to case, and others are case sensitive. This method does not access the\n     * file system and the file is not required to exist. Where required, the\n     * {@link Files#isSameFile isSameFile} method may be used to check if two\n     * paths locate the same file.\n     *\n     * \u003cp\u003e This method satisfies the general contract of the {@link\n     * java.lang.Object#equals(Object) Object.equals} method. \u003c/p\u003e\n     *\n     * @param   other\n     *          the object to which this object is to be compared\n     *\n     * @return  {@code true} if, and only if, the given object is a {@code Path}\n     *          that is identical to this {@code Path}\n     */\n    boolean equals(Object other);\n\n    /**\n     * Computes a hash code for this path.\n     *\n     * \u003cp\u003e The hash code is based upon the components of the path, and\n     * satisfies the general contract of the {@link Object#hashCode\n     * Object.hashCode} method.\n     *\n     * @return  the hash-code value for this path\n     */\n    int hashCode();\n\n    /**\n     * Returns the string representation of this path.\n     *\n     * \u003cp\u003e If this path was created by converting a path string using the\n     * {@link FileSystem#getPath getPath} method then the path string returned\n     * by this method may differ from the original String used to create the path.\n     *\n     * \u003cp\u003e The returned path string uses the default name {@link\n     * FileSystem#getSeparator separator} to separate names in the path.\n     *\n     * @return  the string representation of this path\n     */\n    String toString();\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor16.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:319)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 23 more

Oct 11, 2023 3:36:24 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:329)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 23 more

2023.10.11 03:37:15 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 03:38:08 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 03:40:23 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 11, 2023 6:07:53 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 15897
2023.10.11 18:07:53 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.10.11 18:07:53 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.10.11 18:07:53 INFO  Connected to Build server: Bloop v1.5.8
2023.10.11 18:07:53 INFO  time: Imported build in 0.21s
2023.10.11 18:08:08 INFO  time: indexed workspace in 14s
2023.10.11 18:08:08 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\TreeInterface.scala
2023.10.11 18:08:08 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\contains.scala
2023.10.11 18:08:09 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
2023.10.11 18:08:09 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 18:08:09 INFO  no build target found for C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala. Using presentation compiler with project's scala-library version: 3.1.3
Oct 11, 2023 6:08:09 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 15908
2023.10.11 18:08:09 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 18:09:39 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 18:11:09 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 18:11:09 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 18:11:09 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 18:11:09 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.11 18:11:34 INFO  Shutting down server
2023.10.11 18:11:34 INFO  shutting down Metals
2023.10.11 18:11:34 INFO  Shut down connection with build server.
2023.10.11 18:11:34 INFO  Failed to run request with params InverseSourcesResult
2023.10.11 18:11:34 INFO  Failed to run request with params InverseSourcesResult
Oct 11, 2023 6:12:05 PM org.flywaydb.core.FlywayExecutor execute
INFO: Database: jdbc:h2:file:C:\vs code\Scala\.metals\metals (H2 2.1)
Oct 11, 2023 6:12:05 PM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.091s)
Oct 11, 2023 6:12:05 PM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Oct 11, 2023 6:12:05 PM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.10.12 02:51:39 INFO  Started: Metals version 1.0.1 in folders 'C:\vs code\Scala' for client Visual Studio Code 1.83.0.
Oct 12, 2023 2:51:39 AM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.21.2 by Redgate
Oct 12, 2023 2:51:39 AM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Oct 12, 2023 2:51:39 AM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Oct 12, 2023 2:51:40 AM org.flywaydb.core.FlywayExecutor execute
INFO: Database: jdbc:h2:file:C:\vs code\Scala\.metals\metals (H2 2.1)
Oct 12, 2023 2:51:40 AM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.021s)
Oct 12, 2023 2:51:40 AM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Oct 12, 2023 2:51:40 AM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.10.12 02:51:40 INFO  time: initialize in 0.67s
2023.10.12 02:51:42 INFO  Attempting to connect to the build server...
2023.10.12 02:51:42 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.10.12 02:51:42 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.10.12 02:51:42 INFO  time: Connected to build server in 0.31s
2023.10.12 02:51:42 INFO  Connected to Build server: Bloop v1.5.8
2023.10.12 02:51:47 INFO  time: indexed workspace in 4.66s
2023.10.12 02:51:47 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 02:51:47 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 02:55:07 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 03:00:01 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 03:00:02 INFO  Shutting down server
2023.10.12 03:00:02 INFO  shutting down Metals
2023.10.12 03:00:03 INFO  Shut down connection with build server.
2023.10.12 03:00:02 INFO  Exiting server
2023.10.12 14:59:05 INFO  Started: Metals version 1.0.1 in folders 'C:\vs code\Scala' for client Visual Studio Code 1.83.0.
Oct 12, 2023 2:59:05 PM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.21.2 by Redgate
Oct 12, 2023 2:59:05 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Oct 12, 2023 2:59:05 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Oct 12, 2023 2:59:06 PM org.flywaydb.core.FlywayExecutor execute
INFO: Database: jdbc:h2:file:C:\vs code\Scala\.metals\metals (H2 2.1)
Oct 12, 2023 2:59:06 PM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.026s)
Oct 12, 2023 2:59:06 PM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Oct 12, 2023 2:59:06 PM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.10.12 14:59:06 INFO  time: initialize in 1.3s
2023.10.12 14:59:09 INFO  Attempting to connect to the build server...
2023.10.12 14:59:09 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.10.12 14:59:10 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.10.12 14:59:10 INFO  time: Connected to build server in 1.06s
2023.10.12 14:59:10 INFO  Connected to Build server: Bloop v1.5.8
2023.10.12 14:59:14 INFO  no build target found for C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala. Using presentation compiler with project's scala-library version: 3.3.0
2023.10.12 14:59:14 INFO  time: code lens generation in 5.86s
2023.10.12 14:59:16 INFO  no build target found for C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala. Using presentation compiler with project's scala-library version: 3.3.0
2023.10.12 14:59:21 INFO  time: code lens generation in 11s
2023.10.12 14:59:21 INFO  time: code lens generation in 11s
2023.10.12 14:59:25 INFO  time: indexed workspace in 10s
2023.10.12 14:59:25 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 14:59:25 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 14:59:34 INFO  time: code lens generation in 8.46s
2023.10.12 14:59:53 INFO  Shutting down server
2023.10.12 14:59:53 INFO  shutting down Metals
2023.10.12 14:59:53 INFO  Shut down connection with build server.
2023.10.12 14:59:53 INFO  Exiting server
2023.10.12 16:29:08 INFO  Started: Metals version 1.0.1 in folders 'C:\vs code\Scala' for client Visual Studio Code 1.83.0.
Oct 12, 2023 4:29:08 PM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.21.2 by Redgate
Oct 12, 2023 4:29:08 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Oct 12, 2023 4:29:08 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Oct 12, 2023 4:29:09 PM org.flywaydb.core.FlywayExecutor execute
INFO: Database: jdbc:h2:file:C:\vs code\Scala\.metals\metals (H2 2.1)
Oct 12, 2023 4:29:09 PM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.058s)
Oct 12, 2023 4:29:09 PM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Oct 12, 2023 4:29:09 PM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.10.12 16:29:10 INFO  time: initialize in 1.73s
2023.10.12 16:29:17 INFO  Attempting to connect to the build server...
2023.10.12 16:29:17 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.10.12 16:29:17 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.10.12 16:29:17 INFO  time: Connected to build server in 0.95s
2023.10.12 16:29:17 INFO  Connected to Build server: Bloop v1.5.8
2023.10.12 16:29:28 INFO  no build target found for C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala. Using presentation compiler with project's scala-library version: 3.3.0
2023.10.12 16:29:30 INFO  time: code lens generation in 12s
2023.10.12 16:29:30 INFO  time: Imported build in 0.14s
2023.10.12 16:29:35 INFO  time: indexed workspace in 5.26s
2023.10.12 16:29:35 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 16:29:35 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 16:29:47 INFO  time: code lens generation in 11s
2023.10.12 16:30:01 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 16:31:00 INFO  Shutting down server
2023.10.12 16:31:00 INFO  shutting down Metals
2023.10.12 16:31:00 INFO  Shut down connection with build server.
2023.10.12 16:31:00 INFO  Exiting server
2023.10.12 23:11:00 INFO  Started: Metals version 1.0.1 in folders 'C:\vs code\Scala' for client Visual Studio Code 1.83.1.
Oct 12, 2023 11:11:00 PM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.21.2 by Redgate
Oct 12, 2023 11:11:00 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Oct 12, 2023 11:11:00 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Oct 12, 2023 11:11:01 PM org.flywaydb.core.FlywayExecutor execute
INFO: Database: jdbc:h2:file:C:\vs code\Scala\.metals\metals (H2 2.1)
Oct 12, 2023 11:11:01 PM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.021s)
Oct 12, 2023 11:11:01 PM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Oct 12, 2023 11:11:01 PM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.10.12 23:11:01 INFO  time: initialize in 0.61s
2023.10.12 23:11:03 INFO  Attempting to connect to the build server...
2023.10.12 23:11:03 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.10.12 23:11:03 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.10.12 23:11:03 INFO  time: Connected to build server in 0.39s
2023.10.12 23:11:03 INFO  Connected to Build server: Bloop v1.5.8
2023.10.12 23:11:07 INFO  no build target found for C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala. Using presentation compiler with project's scala-library version: 3.3.0
2023.10.12 23:11:07 INFO  time: code lens generation in 4.94s
2023.10.12 23:11:09 INFO  no build target found for C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala. Using presentation compiler with project's scala-library version: 3.3.0
2023.10.12 23:11:11 INFO  time: code lens generation in 8.27s
2023.10.12 23:11:12 INFO  time: indexed workspace in 4.87s
2023.10.12 23:11:12 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 23:11:13 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 23:11:16 INFO  time: code lens generation in 3.28s
2023.10.12 23:50:09 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.10.12 23:50:09 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.10.12 23:50:09 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.10.12 23:50:09 INFO  Connected to Build server: Bloop v1.5.8
2023.10.12 23:50:09 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.10.12 23:50:09 INFO  Connected to Build server: Bloop v1.5.8
2023.10.12 23:50:09 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 23:50:09 INFO  time: Imported build in 0.15s
2023.10.12 23:50:10 INFO  time: indexed workspace in 1.32s
2023.10.12 23:50:10 INFO  time: indexed workspace in 1.33s
2023.10.12 23:50:10 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 23:50:10 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 23:50:11 INFO  no build target found for C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala. Using presentation compiler with project's scala-library version: 3.1.3
2023.10.12 23:51:19 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 23:54:27 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 23:55:37 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 23:55:42 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 23:55:43 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 23:55:55 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 23:55:58 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Exception in thread "pool-9-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:229)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Oct 12, 2023 11:56:59 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 839
Exception in thread "pool-9-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:229)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023.10.12 23:56:59 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 23:58:06 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 23:58:10 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 23:58:31 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 23:58:47 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.12 23:59:32 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:01:54 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 13, 2023 12:02:19 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1144
2023.10.13 00:02:19 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:04:47 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:05:05 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:05:42 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:06:28 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:06:41 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:08:06 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:09:13 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:09:20 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:10:48 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:12:00 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:13:02 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\TreeInterface.scala
2023.10.13 00:13:06 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
2023.10.13 00:15:01 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
2023.10.13 00:16:06 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
2023.10.13 00:16:21 WARN  Using indexes to guess the definition of flatten
2023.10.13 00:16:21 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
2023.10.13 00:16:44 WARN  Using indexes to guess the definition of flatten
2023.10.13 00:16:45 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
2023.10.13 00:17:01 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
2023.10.13 00:17:28 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
Exception in thread "pool-9-thread-3" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:229)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023.10.13 00:18:30 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
2023.10.13 00:19:02 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
2023.10.13 00:20:07 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
2023.10.13 00:20:40 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
2023.10.13 00:22:45 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:22:53 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:25:39 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:26:03 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 13, 2023 12:26:33 AM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\vs code\Scala\.metals\.reports\metals-full\2023-10-13\r_compiler-error_00-26-33-329
2023.10.13 00:28:12 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:31:32 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 13, 2023 12:32:07 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2837
2023.10.13 00:32:10 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:32:30 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:33:58 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:36:58 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:37:06 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:37:47 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 13, 2023 12:38:12 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3052
2023.10.13 00:38:13 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:38:20 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:38:47 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:39:19 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:39:25 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:40:37 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:40:45 WARN  Using indexes to guess the definition of Path
2023.10.13 00:40:45 INFO  Report absolute-path: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
Uri: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java


error stacktrace:
java.base/java.net.URI.create(URI.java:906)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:614)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:246)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:670)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	jdk.internal.reflect.GeneratedMethodAccessor19.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:568)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)

Oct 13, 2023 12:40:45 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.nio.file;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.nio.file.spi.FileSystemProvider;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\n/**\n * An object that may be used to locate a file in a file system. It will\n * typically represent a system dependent file path.\n *\n * \u003cp\u003e A {@code Path} represents a path that is hierarchical and composed of a\n * sequence of directory and file name elements separated by a special separator\n * or delimiter. A \u003cem\u003eroot component\u003c/em\u003e, that identifies a file system\n * hierarchy, may also be present. The name element that is \u003cem\u003efarthest\u003c/em\u003e\n * from the root of the directory hierarchy is the name of a file or directory.\n * The other name elements are directory names. A {@code Path} can represent a\n * root, a root and a sequence of names, or simply one or more name elements.\n * A {@code Path} is considered to be an \u003ci\u003eempty path\u003c/i\u003e if it consists\n * solely of one name element that is empty. Accessing a file using an\n * \u003ci\u003eempty path\u003c/i\u003e is equivalent to accessing the default directory of the\n * file system. {@code Path} defines the {@link #getFileName() getFileName},\n * {@link #getParent getParent}, {@link #getRoot getRoot}, and {@link #subpath\n * subpath} methods to access the path components or a subsequence of its name\n * elements.\n *\n * \u003cp\u003e In addition to accessing the components of a path, a {@code Path} also\n * defines the {@link #resolve(Path) resolve} and {@link #resolveSibling(Path)\n * resolveSibling} methods to combine paths. The {@link #relativize relativize}\n * method that can be used to construct a relative path between two paths.\n * Paths can be {@link #compareTo compared}, and tested against each other using\n * the {@link #startsWith startsWith} and {@link #endsWith endsWith} methods.\n *\n * \u003cp\u003e This interface extends {@link Watchable} interface so that a directory\n * located by a path can be {@link #register registered} with a {@link\n * WatchService} and entries in the directory watched. \u003c/p\u003e\n *\n * \u003cp\u003e \u003cb\u003eWARNING:\u003c/b\u003e This interface is only intended to be implemented by\n * those developing custom file system implementations. Methods may be added to\n * this interface in future releases. \u003c/p\u003e\n *\n * \u003ch2\u003eAccessing Files\u003c/h2\u003e\n * \u003cp\u003e Paths may be used with the {@link Files} class to operate on files,\n * directories, and other types of files. For example, suppose we want a {@link\n * java.io.BufferedReader} to read text from a file \"{@code access.log}\". The\n * file is located in a directory \"{@code logs}\" relative to the current working\n * directory and is UTF-8 encoded.\n * \u003cpre\u003e\n *     Path path \u003d FileSystems.getDefault().getPath(\"logs\", \"access.log\");\n *     BufferedReader reader \u003d Files.newBufferedReader(path, StandardCharsets.UTF_8);\n * \u003c/pre\u003e\n *\n * \u003ca id\u003d\"interop\"\u003e\u003c/a\u003e\u003ch2\u003eInteroperability\u003c/h2\u003e\n * \u003cp\u003e Paths associated with the default {@link\n * java.nio.file.spi.FileSystemProvider provider} are generally interoperable\n * with the {@link java.io.File java.io.File} class. Paths created by other\n * providers are unlikely to be interoperable with the abstract path names\n * represented by {@code java.io.File}. The {@link java.io.File#toPath toPath}\n * method may be used to obtain a {@code Path} from the abstract path name\n * represented by a {@code java.io.File} object. The resulting {@code Path} can\n * be used to operate on the same file as the {@code java.io.File} object. In\n * addition, the {@link #toFile toFile} method is useful to construct a {@code\n * File} from the {@code String} representation of a {@code Path}.\n *\n * \u003ch2\u003eConcurrency\u003c/h2\u003e\n * \u003cp\u003e Implementations of this interface are immutable and safe for use by\n * multiple concurrent threads.\n *\n * @since 1.7\n */\n\npublic interface Path\n    extends Comparable\u003cPath\u003e, Iterable\u003cPath\u003e, Watchable\n{\n    /**\n     * Returns a {@code Path} by converting a path string, or a sequence of\n     * strings that when joined form a path string. If {@code more} does not\n     * specify any elements then the value of the {@code first} parameter is\n     * the path string to convert. If {@code more} specifies one or more\n     * elements then each non-empty string, including {@code first}, is\n     * considered to be a sequence of name elements and is joined to form a\n     * path string. The details as to how the Strings are joined is provider\n     * specific but typically they will be joined using the\n     * {@link FileSystem#getSeparator name-separator} as the separator.\n     * For example, if the name separator is \"{@code /}\" and\n     * {@code getPath(\"/foo\",\"bar\",\"gus\")} is invoked, then the path string\n     * {@code \"/foo/bar/gus\"} is converted to a {@code Path}. A {@code Path}\n     * representing an empty path is returned if {@code first} is the empty\n     * string and {@code more} does not contain any non-empty strings.\n     *\n     * \u003cp\u003e The {@code Path} is obtained by invoking the {@link FileSystem#getPath\n     * getPath} method of the {@link FileSystems#getDefault default} {@link\n     * FileSystem}.\n     *\n     * \u003cp\u003e Note that while this method is very convenient, using it will imply\n     * an assumed reference to the default {@code FileSystem} and limit the\n     * utility of the calling code. Hence it should not be used in library code\n     * intended for flexible reuse. A more flexible alternative is to use an\n     * existing {@code Path} instance as an anchor, such as:\n     * \u003cpre\u003e{@code\n     *     Path dir \u003d ...\n     *     Path path \u003d dir.resolve(\"file\");\n     * }\u003c/pre\u003e\n     *\n     * @param   first\n     *          the path string or initial part of the path string\n     * @param   more\n     *          additional strings to be joined to form the path string\n     *\n     * @return  the resulting {@code Path}\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a {@code Path}\n     *\n     * @see FileSystem#getPath\n     *\n     * @since 11\n     */\n    public static Path of(String first, String... more) {\n        return FileSystems.getDefault().getPath(first, more);\n    }\n\n    /**\n     * Returns a {@code Path} by converting a URI.\n     *\n     * \u003cp\u003e This method iterates over the {@link FileSystemProvider#installedProviders()\n     * installed} providers to locate the provider that is identified by the\n     * URI {@link URI#getScheme scheme} of the given URI. URI schemes are\n     * compared without regard to case. If the provider is found then its {@link\n     * FileSystemProvider#getPath getPath} method is invoked to convert the\n     * URI.\n     *\n     * \u003cp\u003e In the case of the default provider, identified by the URI scheme\n     * \"file\", the given URI has a non-empty path component, and undefined query\n     * and fragment components. Whether the authority component may be present\n     * is platform specific. The returned {@code Path} is associated with the\n     * {@link FileSystems#getDefault default} file system.\n     *\n     * \u003cp\u003e The default provider provides a similar \u003cem\u003eround-trip\u003c/em\u003e guarantee\n     * to the {@link java.io.File} class. For a given {@code Path} \u003ci\u003ep\u003c/i\u003e it\n     * is guaranteed that\n     * \u003cblockquote\u003e{@code\n     * Path.of(}\u003ci\u003ep\u003c/i\u003e{@code .}{@link Path#toUri() toUri}{@code ()).equals(}\n     * \u003ci\u003ep\u003c/i\u003e{@code .}{@link Path#toAbsolutePath() toAbsolutePath}{@code ())}\n     * \u003c/blockquote\u003e\n     * so long as the original {@code Path}, the {@code URI}, and the new {@code\n     * Path} are all created in (possibly different invocations of) the same\n     * Java virtual machine. Whether other providers make any guarantees is\n     * provider specific and therefore unspecified.\n     *\n     * @param   uri\n     *          the URI to convert\n     *\n     * @return  the resulting {@code Path}\n     *\n     * @throws  IllegalArgumentException\n     *          if preconditions on the {@code uri} parameter do not hold. The\n     *          format of the URI is provider specific.\n     * @throws  FileSystemNotFoundException\n     *          The file system, identified by the URI, does not exist and\n     *          cannot be created automatically, or the provider identified by\n     *          the URI\u0027s scheme component is not installed\n     * @throws  SecurityException\n     *          if a security manager is installed and it denies an unspecified\n     *          permission to access the file system\n     *\n     * @since 11\n     */\n    public static Path of(URI uri) {\n        String scheme \u003d  uri.getScheme();\n        if (scheme \u003d\u003d null)\n            throw new IllegalArgumentException(\"Missing scheme\");\n\n        // check for default provider to avoid loading of installed providers\n        if (scheme.equalsIgnoreCase(\"file\"))\n            return FileSystems.getDefault().provider().getPath(uri);\n\n        // try to find provider\n        for (FileSystemProvider provider: FileSystemProvider.installedProviders()) {\n            if (provider.getScheme().equalsIgnoreCase(scheme)) {\n                return provider.getPath(uri);\n            }\n        }\n\n        throw new FileSystemNotFoundException(\"Provider \\\"\" + scheme + \"\\\" not installed\");\n    }\n\n    /**\n     * Returns the file system that created this object.\n     *\n     * @return  the file system that created this object\n     */\n    FileSystem getFileSystem();\n\n    /**\n     * Tells whether or not this path is absolute.\n     *\n     * \u003cp\u003e An absolute path is complete in that it doesn\u0027t need to be combined\n     * with other path information in order to locate a file.\n     *\n     * @return  {@code true} if, and only if, this path is absolute\n     */\n    boolean isAbsolute();\n\n    /**\n     * Returns the root component of this path as a {@code Path} object,\n     * or {@code null} if this path does not have a root component.\n     *\n     * @return  a path representing the root component of this path,\n     *          or {@code null}\n     */\n    Path getRoot();\n\n    /**\n     * Returns the name of the file or directory denoted by this path as a\n     * {@code Path} object. The file name is the \u003cem\u003efarthest\u003c/em\u003e element from\n     * the root in the directory hierarchy.\n     *\n     * @return  a path representing the name of the file or directory, or\n     *          {@code null} if this path has zero elements\n     */\n    Path getFileName();\n\n    /**\n     * Returns the \u003cem\u003eparent path\u003c/em\u003e, or {@code null} if this path does not\n     * have a parent.\n     *\n     * \u003cp\u003e The parent of this path object consists of this path\u0027s root\n     * component, if any, and each element in the path except for the\n     * \u003cem\u003efarthest\u003c/em\u003e from the root in the directory hierarchy. This method\n     * does not access the file system; the path or its parent may not exist.\n     * Furthermore, this method does not eliminate special names such as \".\"\n     * and \"..\" that may be used in some implementations. On UNIX for example,\n     * the parent of \"{@code /a/b/c}\" is \"{@code /a/b}\", and the parent of\n     * {@code \"x/y/.}\" is \"{@code x/y}\". This method may be used with the {@link\n     * #normalize normalize} method, to eliminate redundant names, for cases where\n     * \u003cem\u003eshell-like\u003c/em\u003e navigation is required.\n     *\n     * \u003cp\u003e If this path has more than one element, and no root component, then\n     * this method is equivalent to evaluating the expression:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * subpath(0,\u0026nbsp;getNameCount()-1);\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @return  a path representing the path\u0027s parent\n     */\n    Path getParent();\n\n    /**\n     * Returns the number of name elements in the path.\n     *\n     * @return  the number of elements in the path, or {@code 0} if this path\n     *          only represents a root component\n     */\n    int getNameCount();\n\n    /**\n     * Returns a name element of this path as a {@code Path} object.\n     *\n     * \u003cp\u003e The {@code index} parameter is the index of the name element to return.\n     * The element that is \u003cem\u003eclosest\u003c/em\u003e to the root in the directory hierarchy\n     * has index {@code 0}. The element that is \u003cem\u003efarthest\u003c/em\u003e from the root\n     * has index {@link #getNameCount count}{@code -1}.\n     *\n     * @param   index\n     *          the index of the element\n     *\n     * @return  the name element\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code index} is negative, {@code index} is greater than or\n     *          equal to the number of elements, or this path has zero name\n     *          elements\n     */\n    Path getName(int index);\n\n    /**\n     * Returns a relative {@code Path} that is a subsequence of the name\n     * elements of this path.\n     *\n     * \u003cp\u003e The {@code beginIndex} and {@code endIndex} parameters specify the\n     * subsequence of name elements. The name that is \u003cem\u003eclosest\u003c/em\u003e to the root\n     * in the directory hierarchy has index {@code 0}. The name that is\n     * \u003cem\u003efarthest\u003c/em\u003e from the root has index {@link #getNameCount\n     * count}{@code -1}. The returned {@code Path} object has the name elements\n     * that begin at {@code beginIndex} and extend to the element at index {@code\n     * endIndex-1}.\n     *\n     * @param   beginIndex\n     *          the index of the first element, inclusive\n     * @param   endIndex\n     *          the index of the last element, exclusive\n     *\n     * @return  a new {@code Path} object that is a subsequence of the name\n     *          elements in this {@code Path}\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code beginIndex} is negative, or greater than or equal to\n     *          the number of elements. If {@code endIndex} is less than or\n     *          equal to {@code beginIndex}, or larger than the number of elements.\n     */\n    Path subpath(int beginIndex, int endIndex);\n\n    /**\n     * Tests if this path starts with the given path.\n     *\n     * \u003cp\u003e This path \u003cem\u003estarts\u003c/em\u003e with the given path if this path\u0027s root\n     * component \u003cem\u003estarts\u003c/em\u003e with the root component of the given path,\n     * and this path starts with the same name elements as the given path.\n     * If the given path has more name elements than this path then {@code false}\n     * is returned.\n     *\n     * \u003cp\u003e Whether or not the root component of this path starts with the root\n     * component of the given path is file system specific. If this path does\n     * not have a root component and the given path has a root component then\n     * this path does not start with the given path.\n     *\n     * \u003cp\u003e If the given path is associated with a different {@code FileSystem}\n     * to this path then {@code false} is returned.\n     *\n     * @param   other\n     *          the given path\n     *\n     * @return  {@code true} if this path starts with the given path; otherwise\n     *          {@code false}\n     */\n    boolean startsWith(Path other);\n\n    /**\n     * Tests if this path starts with a {@code Path}, constructed by converting\n     * the given path string, in exactly the manner specified by the {@link\n     * #startsWith(Path) startsWith(Path)} method. On UNIX for example, the path\n     * \"{@code foo/bar}\" starts with \"{@code foo}\" and \"{@code foo/bar}\". It\n     * does not start with \"{@code f}\" or \"{@code fo}\".\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     startsWith(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the given path string\n     *\n     * @return  {@code true} if this path starts with the given path; otherwise\n     *          {@code false}\n     *\n     * @throws  InvalidPathException\n     *          If the path string cannot be converted to a Path.\n     */\n    default boolean startsWith(String other) {\n        return startsWith(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Tests if this path ends with the given path.\n     *\n     * \u003cp\u003e If the given path has \u003cem\u003eN\u003c/em\u003e elements, and no root component,\n     * and this path has \u003cem\u003eN\u003c/em\u003e or more elements, then this path ends with\n     * the given path if the last \u003cem\u003eN\u003c/em\u003e elements of each path, starting at\n     * the element farthest from the root, are equal.\n     *\n     * \u003cp\u003e If the given path has a root component then this path ends with the\n     * given path if the root component of this path \u003cem\u003eends with\u003c/em\u003e the root\n     * component of the given path, and the corresponding elements of both paths\n     * are equal. Whether or not the root component of this path ends with the\n     * root component of the given path is file system specific. If this path\n     * does not have a root component and the given path has a root component\n     * then this path does not end with the given path.\n     *\n     * \u003cp\u003e If the given path is associated with a different {@code FileSystem}\n     * to this path then {@code false} is returned.\n     *\n     * @param   other\n     *          the given path\n     *\n     * @return  {@code true} if this path ends with the given path; otherwise\n     *          {@code false}\n     */\n    boolean endsWith(Path other);\n\n    /**\n     * Tests if this path ends with a {@code Path}, constructed by converting\n     * the given path string, in exactly the manner specified by the {@link\n     * #endsWith(Path) endsWith(Path)} method. On UNIX for example, the path\n     * \"{@code foo/bar}\" ends with \"{@code foo/bar}\" and \"{@code bar}\". It does\n     * not end with \"{@code r}\" or \"{@code /bar}\". Note that trailing separators\n     * are not taken into account, and so invoking this method on the {@code\n     * Path}\"{@code foo/bar}\" with the {@code String} \"{@code bar/}\" returns\n     * {@code true}.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     endsWith(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the given path string\n     *\n     * @return  {@code true} if this path ends with the given path; otherwise\n     *          {@code false}\n     *\n     * @throws  InvalidPathException\n     *          If the path string cannot be converted to a Path.\n     */\n    default boolean endsWith(String other) {\n        return endsWith(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Returns a path that is this path with redundant name elements eliminated.\n     *\n     * \u003cp\u003e The precise definition of this method is implementation dependent but\n     * in general it derives from this path, a path that does not contain\n     * \u003cem\u003eredundant\u003c/em\u003e name elements. In many file systems, the \"{@code .}\"\n     * and \"{@code ..}\" are special names used to indicate the current directory\n     * and parent directory. In such file systems all occurrences of \"{@code .}\"\n     * are considered redundant. If a \"{@code ..}\" is preceded by a\n     * non-\"{@code ..}\" name then both names are considered redundant (the\n     * process to identify such names is repeated until it is no longer\n     * applicable).\n     *\n     * \u003cp\u003e This method does not access the file system; the path may not locate\n     * a file that exists. Eliminating \"{@code ..}\" and a preceding name from a\n     * path may result in the path that locates a different file than the original\n     * path. This can arise when the preceding name is a symbolic link.\n     *\n     * @return  the resulting path or this path if it does not contain\n     *          redundant name elements; an empty path is returned if this path\n     *          does not have a root component and all name elements are redundant\n     *\n     * @see #getParent\n     * @see #toRealPath\n     */\n    Path normalize();\n\n    // -- resolution and relativization --\n\n    /**\n     * Resolve the given path against this path.\n     *\n     * \u003cp\u003e If the {@code other} parameter is an {@link #isAbsolute() absolute}\n     * path then this method trivially returns {@code other}. If {@code other}\n     * is an \u003ci\u003eempty path\u003c/i\u003e then this method trivially returns this path.\n     * Otherwise this method considers this path to be a directory and resolves\n     * the given path against this path. In the simplest case, the given path\n     * does not have a {@link #getRoot root} component, in which case this method\n     * \u003cem\u003ejoins\u003c/em\u003e the given path to this path and returns a resulting path\n     * that {@link #endsWith ends} with the given path. Where the given path has\n     * a root component then resolution is highly implementation dependent and\n     * therefore unspecified.\n     *\n     * @param   other\n     *          the path to resolve against this path\n     *\n     * @return  the resulting path\n     *\n     * @see #relativize\n     */\n    Path resolve(Path other);\n\n    /**\n     * Converts a given path string to a {@code Path} and resolves it against\n     * this {@code Path} in exactly the manner specified by the {@link\n     * #resolve(Path) resolve} method. For example, suppose that the name\n     * separator is \"{@code /}\" and a path represents \"{@code foo/bar}\", then\n     * invoking this method with the path string \"{@code gus}\" will result in\n     * the {@code Path} \"{@code foo/bar/gus}\".\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     resolve(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the path string to resolve against this path\n     *\n     * @return  the resulting path\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a Path.\n     *\n     * @see FileSystem#getPath\n     */\n    default Path resolve(String other) {\n        return resolve(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Resolves the given path against this path\u0027s {@link #getParent parent}\n     * path. This is useful where a file name needs to be \u003ci\u003ereplaced\u003c/i\u003e with\n     * another file name. For example, suppose that the name separator is\n     * \"{@code /}\" and a path represents \"{@code dir1/dir2/foo}\", then invoking\n     * this method with the {@code Path} \"{@code bar}\" will result in the {@code\n     * Path} \"{@code dir1/dir2/bar}\". If this path does not have a parent path,\n     * or {@code other} is {@link #isAbsolute() absolute}, then this method\n     * returns {@code other}. If {@code other} is an empty path then this method\n     * returns this path\u0027s parent, or where this path doesn\u0027t have a parent, the\n     * empty path.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     (getParent() \u003d\u003d null) ? other : getParent().resolve(other);\n     * }\u003c/pre\u003e\n     * unless {@code other \u003d\u003d null}, in which case a\n     * {@code NullPointerException} is thrown.\n     *\n     * @param   other\n     *          the path to resolve against this path\u0027s parent\n     *\n     * @return  the resulting path\n     *\n     * @see #resolve(Path)\n     */\n    default Path resolveSibling(Path other) {\n        if (other \u003d\u003d null)\n            throw new NullPointerException();\n        Path parent \u003d getParent();\n        return (parent \u003d\u003d null) ? other : parent.resolve(other);\n    }\n\n    /**\n     * Converts a given path string to a {@code Path} and resolves it against\n     * this path\u0027s {@link #getParent parent} path in exactly the manner\n     * specified by the {@link #resolveSibling(Path) resolveSibling} method.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     resolveSibling(getFileSystem().getPath(other));\n     * }\u003c/pre\u003e\n     *\n     * @param   other\n     *          the path string to resolve against this path\u0027s parent\n     *\n     * @return  the resulting path\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a Path.\n     *\n     * @see FileSystem#getPath\n     */\n    default Path resolveSibling(String other) {\n        return resolveSibling(getFileSystem().getPath(other));\n    }\n\n    /**\n     * Constructs a relative path between this path and a given path.\n     *\n     * \u003cp\u003e Relativization is the inverse of {@link #resolve(Path) resolution}.\n     * This method attempts to construct a {@link #isAbsolute relative} path\n     * that when {@link #resolve(Path) resolved} against this path, yields a\n     * path that locates the same file as the given path. For example, on UNIX,\n     * if this path is {@code \"/a/b\"} and the given path is {@code \"/a/b/c/d\"}\n     * then the resulting relative path would be {@code \"c/d\"}. Where this\n     * path and the given path do not have a {@link #getRoot root} component,\n     * then a relative path can be constructed. A relative path cannot be\n     * constructed if only one of the paths have a root component. Where both\n     * paths have a root component then it is implementation dependent if a\n     * relative path can be constructed. If this path and the given path are\n     * {@link #equals equal} then an \u003ci\u003eempty path\u003c/i\u003e is returned.\n     *\n     * \u003cp\u003e For any two {@link #normalize normalized} paths \u003ci\u003ep\u003c/i\u003e and\n     * \u003ci\u003eq\u003c/i\u003e, where \u003ci\u003eq\u003c/i\u003e does not have a root component,\n     * \u003cblockquote\u003e\n     *   \u003ci\u003ep\u003c/i\u003e{@code .relativize(}\u003ci\u003ep\u003c/i\u003e\n     *   {@code .resolve(}\u003ci\u003eq\u003c/i\u003e{@code )).equals(}\u003ci\u003eq\u003c/i\u003e{@code )}\n     * \u003c/blockquote\u003e\n     *\n     * \u003cp\u003e When symbolic links are supported, then whether the resulting path,\n     * when resolved against this path, yields a path that can be used to locate\n     * the {@link Files#isSameFile same} file as {@code other} is implementation\n     * dependent. For example, if this path is  {@code \"/a/b\"} and the given\n     * path is {@code \"/a/x\"} then the resulting relative path may be {@code\n     * \"../x\"}. If {@code \"b\"} is a symbolic link then is implementation\n     * dependent if {@code \"a/b/../x\"} would locate the same file as {@code \"/a/x\"}.\n     *\n     * @param   other\n     *          the path to relativize against this path\n     *\n     * @return  the resulting relative path, or an empty path if both paths are\n     *          equal\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code other} is not a {@code Path} that can be relativized\n     *          against this path\n     */\n    Path relativize(Path other);\n\n    /**\n     * Returns a URI to represent this path.\n     *\n     * \u003cp\u003e This method constructs an absolute {@link URI} with a {@link\n     * URI#getScheme() scheme} equal to the URI scheme that identifies the\n     * provider. The exact form of the scheme specific part is highly provider\n     * dependent.\n     *\n     * \u003cp\u003e In the case of the default provider, the URI is hierarchical with\n     * a {@link URI#getPath() path} component that is absolute. The query and\n     * fragment components are undefined. Whether the authority component is\n     * defined or not is implementation dependent. There is no guarantee that\n     * the {@code URI} may be used to construct a {@link java.io.File java.io.File}.\n     * In particular, if this path represents a Universal Naming Convention (UNC)\n     * path, then the UNC server name may be encoded in the authority component\n     * of the resulting URI. In the case of the default provider, and the file\n     * exists, and it can be determined that the file is a directory, then the\n     * resulting {@code URI} will end with a slash.\n     *\n     * \u003cp\u003e The default provider provides a similar \u003cem\u003eround-trip\u003c/em\u003e guarantee\n     * to the {@link java.io.File} class. For a given {@code Path} \u003ci\u003ep\u003c/i\u003e it\n     * is guaranteed that\n     * \u003cblockquote\u003e\n     * {@link Path#of(URI) Path.of}{@code (}\u003ci\u003ep\u003c/i\u003e{@code .toUri()).equals(}\u003ci\u003ep\u003c/i\u003e\n     * {@code .}{@link #toAbsolutePath() toAbsolutePath}{@code ())}\n     * \u003c/blockquote\u003e\n     * so long as the original {@code Path}, the {@code URI}, and the new {@code\n     * Path} are all created in (possibly different invocations of) the same\n     * Java virtual machine. Whether other providers make any guarantees is\n     * provider specific and therefore unspecified.\n     *\n     * \u003cp\u003e When a file system is constructed to access the contents of a file\n     * as a file system then it is highly implementation specific if the returned\n     * URI represents the given path in the file system or it represents a\n     * \u003cem\u003ecompound\u003c/em\u003e URI that encodes the URI of the enclosing file system.\n     * A format for compound URIs is not defined in this release; such a scheme\n     * may be added in a future release.\n     *\n     * @return  the URI representing this path\n     *\n     * @throws  java.io.IOError\n     *          if an I/O error occurs obtaining the absolute path, or where a\n     *          file system is constructed to access the contents of a file as\n     *          a file system, and the URI of the enclosing file system cannot be\n     *          obtained\n     *\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager\n     *          is installed, the {@link #toAbsolutePath toAbsolutePath} method\n     *          throws a security exception.\n     */\n    URI toUri();\n\n    /**\n     * Returns a {@code Path} object representing the absolute path of this\n     * path.\n     *\n     * \u003cp\u003e If this path is already {@link Path#isAbsolute absolute} then this\n     * method simply returns this path. Otherwise, this method resolves the path\n     * in an implementation dependent manner, typically by resolving the path\n     * against a file system default directory. Depending on the implementation,\n     * this method may throw an I/O error if the file system is not accessible.\n     *\n     * @return  a {@code Path} object representing the absolute path\n     *\n     * @throws  java.io.IOError\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, a security manager\n     *          is installed, and this path is not absolute, then the security\n     *          manager\u0027s {@link SecurityManager#checkPropertyAccess(String)\n     *          checkPropertyAccess} method is invoked to check access to the\n     *          system property {@code user.dir}\n     */\n    Path toAbsolutePath();\n\n    /**\n     * Returns the \u003cem\u003ereal\u003c/em\u003e path of an existing file.\n     *\n     * \u003cp\u003e The precise definition of this method is implementation dependent but\n     * in general it derives from this path, an {@link #isAbsolute absolute}\n     * path that locates the {@link Files#isSameFile same} file as this path, but\n     * with name elements that represent the actual name of the directories\n     * and the file. For example, where filename comparisons on a file system\n     * are case insensitive then the name elements represent the names in their\n     * actual case. Additionally, the resulting path has redundant name\n     * elements removed.\n     *\n     * \u003cp\u003e If this path is relative then its absolute path is first obtained,\n     * as if by invoking the {@link #toAbsolutePath toAbsolutePath} method.\n     *\n     * \u003cp\u003e The {@code options} array may be used to indicate how symbolic links\n     * are handled. By default, symbolic links are resolved to their final\n     * target. If the option {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} is\n     * present then this method does not resolve symbolic links.\n     *\n     * Some implementations allow special names such as \"{@code ..}\" to refer to\n     * the parent directory. When deriving the \u003cem\u003ereal path\u003c/em\u003e, and a\n     * \"{@code ..}\" (or equivalent) is preceded by a non-\"{@code ..}\" name then\n     * an implementation will typically cause both names to be removed. When\n     * not resolving symbolic links and the preceding name is a symbolic link\n     * then the names are only removed if it guaranteed that the resulting path\n     * will locate the same file as this path.\n     *\n     * @param   options\n     *          options indicating how symbolic links are handled\n     *\n     * @return  an absolute path represent the \u003cem\u003ereal\u003c/em\u003e path of the file\n     *          located by this object\n     *\n     * @throws  IOException\n     *          if the file does not exist or an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager\n     *          is installed, its {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file, and where\n     *          this path is not absolute, its {@link SecurityManager#checkPropertyAccess(String)\n     *          checkPropertyAccess} method is invoked to check access to the\n     *          system property {@code user.dir}\n     */\n    Path toRealPath(LinkOption... options) throws IOException;\n\n    /**\n     * Returns a {@link File} object representing this path. Where this {@code\n     * Path} is associated with the default provider, then this method is\n     * equivalent to returning a {@code File} object constructed with the\n     * {@code String} representation of this path.\n     *\n     * \u003cp\u003e If this path was created by invoking the {@code File} {@link\n     * File#toPath toPath} method then there is no guarantee that the {@code\n     * File} object returned by this method is {@link #equals equal} to the\n     * original {@code File}.\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     new File(toString());\n     * }\u003c/pre\u003e\n     * if the {@code FileSystem} which created this {@code Path} is the default\n     * file system; otherwise an {@code UnsupportedOperationException} is\n     * thrown.\n     *\n     * @return  a {@code File} object representing this path\n     *\n     * @throws  UnsupportedOperationException\n     *          if this {@code Path} is not associated with the default provider\n     */\n    default File toFile() {\n        if (getFileSystem() \u003d\u003d FileSystems.getDefault()) {\n            return new File(toString());\n        } else {\n            throw new UnsupportedOperationException(\"Path not associated with \"\n                    + \"default file system.\");\n        }\n    }\n\n    // -- watchable --\n\n    /**\n     * Registers the file located by this path with a watch service.\n     *\n     * \u003cp\u003e In this release, this path locates a directory that exists. The\n     * directory is registered with the watch service so that entries in the\n     * directory can be watched. The {@code events} parameter is the events to\n     * register and may contain the following events:\n     * \u003cul\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_CREATE ENTRY_CREATE} -\n     *       entry created or moved into the directory\u003c/li\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_DELETE ENTRY_DELETE} -\n     *        entry deleted or moved out of the directory\u003c/li\u003e\n     *   \u003cli\u003e{@link StandardWatchEventKinds#ENTRY_MODIFY ENTRY_MODIFY} -\n     *        entry in directory was modified\u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e The {@link WatchEvent#context context} for these events is the\n     * relative path between the directory located by this path, and the path\n     * that locates the directory entry that is created, deleted, or modified.\n     *\n     * \u003cp\u003e The set of events may include additional implementation specific\n     * event that are not defined by the enum {@link StandardWatchEventKinds}\n     *\n     * \u003cp\u003e The {@code modifiers} parameter specifies \u003cem\u003emodifiers\u003c/em\u003e that\n     * qualify how the directory is registered. This release does not define any\n     * \u003cem\u003estandard\u003c/em\u003e modifiers. It may contain implementation specific\n     * modifiers.\n     *\n     * \u003cp\u003e Where a file is registered with a watch service by means of a symbolic\n     * link then it is implementation specific if the watch continues to depend\n     * on the existence of the symbolic link after it is registered.\n     *\n     * @param   watcher\n     *          the watch service to which this object is to be registered\n     * @param   events\n     *          the events for which this object should be registered\n     * @param   modifiers\n     *          the modifiers, if any, that modify how the object is registered\n     *\n     * @return  a key representing the registration of this object with the\n     *          given watch service\n     *\n     * @throws  UnsupportedOperationException\n     *          if unsupported events or modifiers are specified\n     * @throws  IllegalArgumentException\n     *          if an invalid combination of events or modifiers is specified\n     * @throws  ClosedWatchServiceException\n     *          if the watch service is closed\n     * @throws  NotDirectoryException\n     *          if the file is registered to watch the entries in a directory\n     *          and the file is not a directory  \u003ci\u003e(optional specific exception)\u003c/i\u003e\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     */\n    @Override\n    WatchKey register(WatchService watcher,\n                      WatchEvent.Kind\u003c?\u003e[] events,\n                      WatchEvent.Modifier... modifiers)\n        throws IOException;\n\n    /**\n     * Registers the file located by this path with a watch service.\n     *\n     * \u003cp\u003e An invocation of this method behaves in exactly the same way as the\n     * invocation\n     * \u003cpre\u003e\n     *     watchable.{@link #register(WatchService,WatchEvent.Kind[],WatchEvent.Modifier[]) register}(watcher, events, new WatchEvent.Modifier[0]);\n     * \u003c/pre\u003e\n     *\n     * \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e\n     * Suppose we wish to register a directory for entry create, delete, and modify\n     * events:\n     * \u003cpre\u003e\n     *     Path dir \u003d ...\n     *     WatchService watcher \u003d ...\n     *\n     *     WatchKey key \u003d dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);\n     * \u003c/pre\u003e\n     *\n     * @implSpec\n     * The default implementation is equivalent for this path to:\n     * \u003cpre\u003e{@code\n     *     register(watcher, events, new WatchEvent.Modifier[0]);\n     * }\u003c/pre\u003e\n     *\n     * @param   watcher\n     *          The watch service to which this object is to be registered\n     * @param   events\n     *          The events for which this object should be registered\n     *\n     * @return  A key representing the registration of this object with the\n     *          given watch service\n     *\n     * @throws  UnsupportedOperationException\n     *          If unsupported events are specified\n     * @throws  IllegalArgumentException\n     *          If an invalid combination of events is specified\n     * @throws  ClosedWatchServiceException\n     *          If the watch service is closed\n     * @throws  NotDirectoryException\n     *          If the file is registered to watch the entries in a directory\n     *          and the file is not a directory  \u003ci\u003e(optional specific exception)\u003c/i\u003e\n     * @throws  IOException\n     *          If an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     */\n    @Override\n    default WatchKey register(WatchService watcher,\n                      WatchEvent.Kind\u003c?\u003e... events) throws IOException {\n        return register(watcher, events, new WatchEvent.Modifier[0]);\n    }\n\n    // -- Iterable --\n\n    /**\n     * Returns an iterator over the name elements of this path.\n     *\n     * \u003cp\u003e The first element returned by the iterator represents the name\n     * element that is closest to the root in the directory hierarchy, the\n     * second element is the next closest, and so on. The last element returned\n     * is the name of the file or directory denoted by this path. The {@link\n     * #getRoot root} component, if present, is not returned by the iterator.\n     *\n     * @implSpec\n     * The default implementation returns an {@code Iterator\u003cPath\u003e} which, for\n     * this path, traverses the {@code Path}s returned by\n     * {@code getName(index)}, where {@code index} ranges from zero to\n     * {@code getNameCount() - 1}, inclusive.\n     *\n     * @return  an iterator over the name elements of this path.\n     */\n    @Override\n    default Iterator\u003cPath\u003e iterator() {\n        return new Iterator\u003c\u003e() {\n            private int i \u003d 0;\n\n            @Override\n            public boolean hasNext() {\n                return (i \u003c getNameCount());\n            }\n\n            @Override\n            public Path next() {\n                if (i \u003c getNameCount()) {\n                    Path result \u003d getName(i);\n                    i++;\n                    return result;\n                } else {\n                    throw new NoSuchElementException();\n                }\n            }\n        };\n    }\n\n    // -- compareTo/equals/hashCode --\n\n    /**\n     * Compares two abstract paths lexicographically. The ordering defined by\n     * this method is provider specific, and in the case of the default\n     * provider, platform specific. This method does not access the file system\n     * and neither file is required to exist.\n     *\n     * \u003cp\u003e This method may not be used to compare paths that are associated\n     * with different file system providers.\n     *\n     * @param   other  the path compared to this path.\n     *\n     * @return  zero if the argument is {@link #equals equal} to this path, a\n     *          value less than zero if this path is lexicographically less than\n     *          the argument, or a value greater than zero if this path is\n     *          lexicographically greater than the argument\n     *\n     * @throws  ClassCastException\n     *          if the paths are associated with different providers\n     */\n    @Override\n    int compareTo(Path other);\n\n    /**\n     * Tests this path for equality with the given object.\n     *\n     * \u003cp\u003e If the given object is not a Path, or is a Path associated with a\n     * different {@code FileSystem}, then this method returns {@code false}.\n     *\n     * \u003cp\u003e Whether or not two path are equal depends on the file system\n     * implementation. In some cases the paths are compared without regard\n     * to case, and others are case sensitive. This method does not access the\n     * file system and the file is not required to exist. Where required, the\n     * {@link Files#isSameFile isSameFile} method may be used to check if two\n     * paths locate the same file.\n     *\n     * \u003cp\u003e This method satisfies the general contract of the {@link\n     * java.lang.Object#equals(Object) Object.equals} method. \u003c/p\u003e\n     *\n     * @param   other\n     *          the object to which this object is to be compared\n     *\n     * @return  {@code true} if, and only if, the given object is a {@code Path}\n     *          that is identical to this {@code Path}\n     */\n    boolean equals(Object other);\n\n    /**\n     * Computes a hash code for this path.\n     *\n     * \u003cp\u003e The hash code is based upon the components of the path, and\n     * satisfies the general contract of the {@link Object#hashCode\n     * Object.hashCode} method.\n     *\n     * @return  the hash-code value for this path\n     */\n    int hashCode();\n\n    /**\n     * Returns the string representation of this path.\n     *\n     * \u003cp\u003e If this path was created by converting a path string using the\n     * {@link FileSystem#getPath getPath} method then the path string returned\n     * by this method may differ from the original String used to create the path.\n     *\n     * \u003cp\u003e The returned path string uses the default name {@link\n     * FileSystem#getSeparator separator} to separate names in the path.\n     *\n     * @return  the string representation of this path\n     */\n    String toString();\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor18.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:319)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 23 more

Oct 13, 2023 12:40:45 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-17/lib/src.zip%21/java.base/java/nio/file/Path.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor20.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:631)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:628)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:329)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-17/lib/src.zip!/java.base/java/nio/file/Path.java
	at java.base/java.net.URI$Parser.fail(URI.java:2974)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3145)
	at java.base/java.net.URI$Parser.parse(URI.java:3181)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 23 more

Oct 13, 2023 12:40:48 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3229
Oct 13, 2023 12:40:48 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3231
Oct 13, 2023 12:40:48 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3233
Oct 13, 2023 12:40:48 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3230
Oct 13, 2023 12:40:49 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3240
2023.10.13 00:40:54 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:41:09 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 13, 2023 12:41:15 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3292
2023.10.13 00:41:27 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:43:18 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 13, 2023 12:43:49 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3431
2023.10.13 00:44:05 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:44:39 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:45:18 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:45:40 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:45:51 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:46:10 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 13, 2023 12:46:53 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3667
2023.10.13 00:46:59 WARN  Using indexes to guess the definition of IllegalPathException
2023.10.13 00:46:59 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:46:59 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:46:59 WARN  Using indexes to guess the definition of IllegalPathException
2023.10.13 00:47:02 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:47:29 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:47:46 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:49:25 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:52:22 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:54:32 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 00:54:32 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 01:00:19 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 01:00:43 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 01:00:53 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 01:01:42 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 01:02:21 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 01:05:19 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
Oct 13, 2023 1:08:24 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4189
2023.10.13 01:08:30 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 01:12:34 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 01:13:02 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 01:19:27 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:17: 
Not found: type Path
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:46: 
Not found: type K
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                             ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:1:50: 
Not found: type V
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                                 ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:19:20: 
Not found: type Path
def contains(path: Path[K]): Boolean = {
                   ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:12:14: 
Not found: Node
        case Node(key, child) => 
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:13:20: 
value map is not a member of Any
          val ls = child.map(_.key)
                   ^^^^^^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:15:14: 
Not found: Leaf
        case Leaf(_, payload) => Some(Right(payload))
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:20:34: 
Not found: type Tree
    def containsHelper(currTree: Tree[K, V], currPath: List[K]): Boolean = (currTree, currPath) match {
                                 ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:20:61: 
Not found: type K
    def containsHelper(currTree: Tree[K, V], currPath: List[K]): Boolean = (currTree, currPath) match {
                                                            ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:22:13: 
Not found: Leaf
      case (Leaf(key, _), seg :: Nil) => key == seg // Check if the leaf node contains the segment
            ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:23:13: 
Not found: Node
      case (Node(key, children), seg :: remaining) =>
            ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:25:26: 
Not found: Node
          containsHelper(Node(key, children), remaining)
                         ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:34:17: 
Not found: type Path
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:34:46: 
Not found: type K
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                             ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:34:50: 
Not found: type V
  def get(path: Path[K]): Option[Either[List[K], V]] = 
                                                 ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:38:27: 
Not found: type Tree
      def find_lnode(curr:Tree[K, V], path:List[K]):Tree[K, V]=
                          ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:38:49: 
Not found: type K
      def find_lnode(curr:Tree[K, V], path:List[K]):Tree[K, V]=
                                                ^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:38:53: 
Not found: type Tree
      def find_lnode(curr:Tree[K, V], path:List[K]):Tree[K, V]=
                                                    ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:40:16: 
Not found: Node
          case Node(key, children) => 
               ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:42:26: 
value find is not a member of Any
              find_lnode(children.find(path.head==_.key).getOrElse(Tree.apply(path.head)), path.tail)
                         ^^^^^^^^^^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:43:27: 
Not found: Node
            else currnode=Node(key, children)
                          ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:45:16: 
Not found: Leaf
          case Leaf(key, payload) => 
               ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:46:22: 
Not found: Leaf
            currnode=Leaf(key, payload)
                     ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:51:14: 
Not found: Node
        case Node(key, child) => 
             ^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:52:20: 
value map is not a member of Any
          val ls = child.map(_.key)
                   ^^^^^^^^^
[31merror[39m: src\main\scala\archive\archive.worksheet.sc:54:14: 
Not found: Leaf
        case Leaf(_, payload) => Some(Right(payload))
             ^^^^
2023.10.13 01:20:46 INFO  time: evaluated worksheet 'archive.worksheet.sc' in 6.2s
2023.10.13 01:21:01 WARN  Using indexes to guess the definition of updated
2023.10.13 01:21:04 WARN  Using indexes to guess the definition of updated
2023.10.13 01:21:20 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
2023.10.13 01:22:16 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
2023.10.13 01:22:21 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
2023.10.13 01:22:34 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
2023.10.13 01:23:39 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\contains.scala
2023.10.13 01:23:48 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 01:25:10 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 19:59:09 INFO  Started: Metals version 1.0.1 in folders 'C:\vs code\Scala' for client Visual Studio Code 1.83.1.
Oct 13, 2023 7:59:09 PM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.21.2 by Redgate
Oct 13, 2023 7:59:09 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Oct 13, 2023 7:59:09 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Oct 13, 2023 7:59:13 PM org.flywaydb.core.FlywayExecutor execute
INFO: Database: jdbc:h2:file:C:\vs code\Scala\.metals\metals (H2 2.1)
Oct 13, 2023 7:59:13 PM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.023s)
Oct 13, 2023 7:59:13 PM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Oct 13, 2023 7:59:13 PM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.10.13 19:59:13 INFO  time: initialize in 4.01s
2023.10.13 19:59:15 INFO  Attempting to connect to the build server...
2023.10.13 19:59:15 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.10.13 19:59:19 INFO  no build target found for C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala. Using presentation compiler with project's scala-library version: 3.3.0
2023.10.13 19:59:21 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.10.13 19:59:21 INFO  time: Connected to build server in 6.12s
2023.10.13 19:59:21 INFO  Connected to Build server: Bloop v1.5.8
2023.10.13 19:59:21 INFO  time: Imported build in 0.19s
2023.10.13 19:59:22 INFO  time: code lens generation in 7.28s
2023.10.13 19:59:24 INFO  time: indexed workspace in 2.58s
2023.10.13 19:59:24 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 19:59:24 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.13 19:59:29 INFO  time: code lens generation in 4.62s
2023.10.13 20:01:28 INFO  Shutting down server
2023.10.13 20:01:28 INFO  shutting down Metals
2023.10.13 20:01:28 INFO  Shut down connection with build server.
2023.10.13 20:01:28 INFO  Exiting server
2023.10.16 14:31:56 INFO  Started: Metals version 1.0.1 in folders 'C:\vs code\Scala' for client Visual Studio Code 1.83.1.
Oct 16, 2023 2:31:56 PM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.21.2 by Redgate
Oct 16, 2023 2:31:56 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Oct 16, 2023 2:31:56 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Oct 16, 2023 2:31:56 PM org.flywaydb.core.FlywayExecutor execute
INFO: Database: jdbc:h2:file:C:\vs code\Scala\.metals\metals (H2 2.1)
Oct 16, 2023 2:31:56 PM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.022s)
Oct 16, 2023 2:31:56 PM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Oct 16, 2023 2:31:56 PM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.10.16 14:31:57 INFO  time: initialize in 0.85s
2023.10.16 14:32:01 INFO  Attempting to connect to the build server...
2023.10.16 14:32:01 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.10.16 14:32:01 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.10.16 14:32:01 INFO  time: Connected to build server in 0.41s
2023.10.16 14:32:01 INFO  Connected to Build server: Bloop v1.5.8
2023.10.16 14:32:06 INFO  no build target found for C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala. Using presentation compiler with project's scala-library version: 3.3.0
2023.10.16 14:32:06 INFO  time: code lens generation in 5.68s
2023.10.16 14:32:09 INFO  time: indexed workspace in 1.69s
2023.10.16 14:32:09 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.16 14:32:09 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\contains.scala
2023.10.16 14:32:09 INFO  no build target found for C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala. Using presentation compiler with project's scala-library version: 3.1.3
2023.10.16 14:32:10 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.16 14:32:10 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\contains.scala
2023.10.16 14:32:13 INFO  time: code lens generation in 3.33s
2023.10.16 14:32:41 WARN  no build target for: C:\vs code\Scala\PA 1\src\test\scala\ass1\TreeSuite.scala
2023.10.16 14:33:33 INFO  Shutting down server
2023.10.16 14:33:33 INFO  shutting down Metals
2023.10.16 14:33:33 INFO  Shut down connection with build server.
2023.10.16 14:33:33 INFO  Exiting server
2023.10.16 14:56:36 INFO  Started: Metals version 1.0.1 in folders 'C:\vs code\Scala' for client Visual Studio Code 1.83.1.
Oct 16, 2023 2:56:36 PM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.21.2 by Redgate
Oct 16, 2023 2:56:36 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Oct 16, 2023 2:56:36 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Oct 16, 2023 2:56:36 PM org.flywaydb.core.FlywayExecutor execute
INFO: Database: jdbc:h2:file:C:\vs code\Scala\.metals\metals (H2 2.1)
Oct 16, 2023 2:56:36 PM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.018s)
Oct 16, 2023 2:56:36 PM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Oct 16, 2023 2:56:36 PM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.10.16 14:56:36 INFO  time: initialize in 0.64s
2023.10.16 14:56:38 INFO  Attempting to connect to the build server...
2023.10.16 14:56:38 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.10.16 14:56:38 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.10.16 14:56:38 INFO  time: Connected to build server in 0.24s
2023.10.16 14:56:38 INFO  Connected to Build server: Bloop v1.5.8
2023.10.16 14:56:41 INFO  time: indexed workspace in 3.15s
2023.10.16 14:56:43 INFO  Shutting down server
2023.10.16 14:56:43 INFO  shutting down Metals
2023.10.16 14:56:43 INFO  Shut down connection with build server.
Oct 16, 2023 2:56:44 PM org.flywaydb.core.FlywayExecutor execute
INFO: Database: jdbc:h2:file:C:\vs code\Scala\.metals\metals (H2 2.1)
Oct 16, 2023 2:56:44 PM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.003s)
Oct 16, 2023 2:56:44 PM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Oct 16, 2023 2:56:44 PM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.10.16 14:56:46 INFO  Exiting server
2023.10.16 15:23:54 INFO  Started: Metals version 1.0.1 in folders 'C:\vs code\Scala' for client Visual Studio Code 1.83.1.
Oct 16, 2023 3:23:55 PM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.21.2 by Redgate
Oct 16, 2023 3:23:55 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Oct 16, 2023 3:23:55 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Oct 16, 2023 3:23:55 PM org.flywaydb.core.FlywayExecutor execute
INFO: Database: jdbc:h2:file:C:\vs code\Scala\.metals\metals (H2 2.1)
Oct 16, 2023 3:23:55 PM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.016s)
Oct 16, 2023 3:23:55 PM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Oct 16, 2023 3:23:55 PM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.10.16 15:23:55 INFO  time: initialize in 0.57s
2023.10.16 15:23:57 INFO  Attempting to connect to the build server...
2023.10.16 15:23:57 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.10.16 15:23:57 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.10.16 15:23:57 INFO  time: Connected to build server in 0.23s
2023.10.16 15:23:57 INFO  Connected to Build server: Bloop v1.5.8
2023.10.16 15:23:59 INFO  time: indexed workspace in 2.32s
2023.10.16 15:28:50 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.16 15:28:51 INFO  time: code lens generation in 1.05s
2023.10.16 15:46:52 INFO  Shutting down server
2023.10.16 15:46:52 INFO  shutting down Metals
2023.10.16 15:46:52 INFO  Shut down connection with build server.
2023.10.16 15:46:52 INFO  Exiting server
2023.10.16 17:04:30 INFO  Started: Metals version 1.0.1 in folders 'C:\vs code\Scala' for client Visual Studio Code 1.83.1.
Oct 16, 2023 5:04:30 PM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.21.2 by Redgate
Oct 16, 2023 5:04:30 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Oct 16, 2023 5:04:30 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Oct 16, 2023 5:04:30 PM org.flywaydb.core.FlywayExecutor execute
INFO: Database: jdbc:h2:file:C:\vs code\Scala\.metals\metals (H2 2.1)
Oct 16, 2023 5:04:30 PM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.019s)
Oct 16, 2023 5:04:30 PM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Oct 16, 2023 5:04:30 PM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.10.16 17:04:30 INFO  time: initialize in 0.63s
2023.10.16 17:04:33 INFO  Attempting to connect to the build server...
2023.10.16 17:04:33 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.10.16 17:04:33 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.10.16 17:04:33 INFO  time: Connected to build server in 0.21s
2023.10.16 17:04:33 INFO  Connected to Build server: Bloop v1.5.8
2023.10.16 17:04:36 INFO  no build target found for C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala. Using presentation compiler with project's scala-library version: 3.3.0
2023.10.16 17:04:36 INFO  time: code lens generation in 2.67s
2023.10.16 17:04:38 INFO  time: indexed workspace in 2.04s
2023.10.16 17:04:38 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.16 17:04:47 INFO  time: code lens generation in 8.13s
2023.10.16 20:28:56 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.10.16 20:28:56 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.10.16 20:28:56 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.10.16 20:28:56 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.10.16 20:28:56 INFO  Connected to Build server: Bloop v1.5.8
2023.10.16 20:28:56 INFO  Connected to Build server: Bloop v1.5.8
2023.10.16 20:28:56 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.16 20:28:56 INFO  time: Imported build in 0.23s
2023.10.16 20:28:56 INFO  time: Imported build in 0.28s
2023.10.16 20:29:01 INFO  time: indexed workspace in 4.44s
2023.10.16 20:29:01 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.16 20:29:01 INFO  time: indexed workspace in 4.51s
2023.10.16 20:29:01 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.16 20:29:03 INFO  no build target found for C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala. Using presentation compiler with project's scala-library version: 3.1.3
2023.10.16 20:29:05 INFO  time: code lens generation in 1.82s
2023.10.16 20:29:51 INFO  Shutting down server
2023.10.16 20:29:51 INFO  shutting down Metals
2023.10.16 20:29:51 INFO  Shut down connection with build server.
2023.10.16 20:29:51 INFO  Exiting server
2023.10.17 17:42:17 INFO  Started: Metals version 1.0.1 in folders 'C:\vs code\Scala' for client Visual Studio Code 1.83.1.
Oct 17, 2023 5:42:17 PM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.21.2 by Redgate
Oct 17, 2023 5:42:17 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Oct 17, 2023 5:42:17 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Oct 17, 2023 5:42:17 PM org.flywaydb.core.FlywayExecutor execute
INFO: Database: jdbc:h2:file:C:\vs code\Scala\.metals\metals (H2 2.1)
Oct 17, 2023 5:42:17 PM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.020s)
Oct 17, 2023 5:42:17 PM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Oct 17, 2023 5:42:17 PM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.10.17 17:42:18 INFO  time: initialize in 0.69s
2023.10.17 17:42:22 INFO  Attempting to connect to the build server...
2023.10.17 17:42:22 INFO  Bloop uses C:\Program Files\Java\jdk-17 defined at C:\Users\miruh\.bloop\bloop.json
2023.10.17 17:42:22 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\vs code\Scala\.metals\bsp.trace.json or C:\Users\miruh\AppData\Local\scalameta\metals\cache\bsp.trace.json
2023.10.17 17:42:22 INFO  time: Connected to build server in 0.43s
2023.10.17 17:42:22 INFO  Connected to Build server: Bloop v1.5.8
2023.10.17 17:42:23 INFO  Shutting down server
2023.10.17 17:42:23 INFO  shutting down Metals
2023.10.17 17:42:24 INFO  Shut down connection with build server.
2023.10.18 19:29:47 INFO  Started: Metals version 1.1.0 in folders 'C:\vs code\Scala' for client Visual Studio Code 1.83.1.
Oct 18, 2023 7:29:49 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1
2023.10.18 19:29:49 WARN  Build server is not auto-connectable.
2023.10.18 19:29:49 WARN  no build target for: C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala
2023.10.18 19:29:56 INFO  no build target found for C:\vs code\Scala\PA 1\src\main\scala\ass1\Tree.scala. Using presentation compiler with project's scala-library version: 3.3.1
2023.10.18 19:29:59 INFO  time: code lens generation in 5.31s
2023.10.18 19:29:59 INFO  time: code lens generation in 9.83s
2023.10.19 16:28:56 INFO  Shutting down server
2023.10.19 16:28:56 INFO  shutting down Metals
2023.10.19 16:28:56 INFO  Exiting server
2023.10.19 16:28:56 ERROR Unexpected error initializing server: 
org.eclipse.lsp4j.jsonrpc.ResponseErrorException: Request window/showMessageRequest failed with message: Canceled
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleResponse(RemoteEndpoint.java:209)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:193)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.lang.Thread.run(Thread.java:833)

