java.lang.IllegalArgumentException: Comparison method violates its general contract!
occurred in the presentation compiler.

action parameters:
offset: 317
uri: file:///C:/vs%20code/Scala/PA%201/src/main/scala/ass1/Tree.scala
text:
package ass1

enum Tree[K, V] extends TreeInterface[K, V]:
  private case Leaf(key: K, payload: V)
  private case Node(key: K, children: List[Tree[K, V]])

  import Tree.Path

  def contains(path: Path[K]): Boolean = 
    this match 
      case Leaf(key, payload) => true
      case Node(key, children) => contains(pa@@)
    
  def get(path: Path[K]): Option[Either[List[K], V]] = ???

  def flatten: List[(Path[K], V)] = ???

  def updated(path: Path[K]): Tree[K, V] = ???

  def updated(path: Path[K], payload: V): Tree[K, V] = ???

object Tree extends TreeComp:
  def apply[K, V](key: K): Tree[K, V] = ???

  def apply[K, V](path: Path[K]): Tree[K, V] = ???

  def apply[K, V](path: Path[K], payload: V): Tree[K, V] = ???



error stacktrace:
java.base/java.util.TimSort.mergeLo(TimSort.java:781)
	java.base/java.util.TimSort.mergeAt(TimSort.java:518)
	java.base/java.util.TimSort.mergeForceCollapse(TimSort.java:461)
	java.base/java.util.TimSort.sort(TimSort.java:254)
	java.base/java.util.Arrays.sort(Arrays.java:1233)
	scala.collection.SeqOps.sorted(Seq.scala:700)
	scala.collection.SeqOps.sorted$(Seq.scala:692)
	scala.collection.immutable.List.scala$collection$immutable$StrictOptimizedSeqOps$$super$sorted(List.scala:79)
	scala.collection.immutable.StrictOptimizedSeqOps.sorted(StrictOptimizedSeqOps.scala:78)
	scala.collection.immutable.StrictOptimizedSeqOps.sorted$(StrictOptimizedSeqOps.scala:78)
	scala.collection.immutable.List.sorted(List.scala:79)
	scala.meta.internal.pc.completions.Completions.completions(Completions.scala:210)
	scala.meta.internal.pc.completions.CompletionProvider.completions(CompletionProvider.scala:86)
	scala.meta.internal.pc.ScalaPresentationCompiler.complete$$anonfun$1(ScalaPresentationCompiler.scala:119)
