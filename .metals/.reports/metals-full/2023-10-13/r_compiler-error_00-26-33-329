dotty.tools.dotc.core.TypeError: bad parameter reference K at typer
the parameter is type K in class Tree but the prefix <noprefix>
does not define any corresponding arguments.
idx = 0, args = List()
occurred in the presentation compiler.

action parameters:
offset: 1420
uri: file:///C:/vs%20code/Scala/PA%201/src/main/scala/ass1/Tree.scala
text:
package ass1

import scala.collection.View.Empty
import javax.lang.model.`type`.NullType

enum Tree[K, V] extends TreeInterface[K, V]:
  private case Leaf(key: K, payload: V)
  private case Node(key: K, children: List[Tree[K, V]])

  import Tree.Path

  def contains(path: Path[K]): Boolean = this match
    case Node(key, children) =>
      path.segs match
        case x::Nil => x==key
        case xs => 
          if key==xs.head then children.find(xs.tail.head==_.key) match
            case Some(x) => x.contains(Path(xs.tail))
            case None => false
          else false
    case Leaf(key, payload) =>
      path.segs match
        case x::Nil => x==key
        case _ => false

  def get(path: Path[K]): Option[Either[List[K], V]] = this match
    case Node(key, children) => path.segs match
      case x::Nil => if (x==key) then Some(Left(children.map(_.key))) else None
      case xs => children.find(xs.tail.head==_.key) match
                    case Some(x) =>  x.get(Path(xs.tail))
                    case None => None
    case Leaf(key, payload) => path.segs match
      case x::Nil => if (x==key) then Some(Right(payload)) else None
      case xs => None

  def flatten: List[(Path[K], V)] = 
    def recur(node: Tree[K, V], path:List[K]): List[(Path[K], V)] = node match
      case Node(key, children) => children.map(recur(_, path:+key).head)
      case Leaf(key, payload) => List((Path(path:+@@key), payload))
    recur(this, Nil)

  def updated(path: Path[K]): Tree[K, V] = 
    if path.segs.isEmpty || path.segs.head!=this.key
    then throw Tree.IllegalPathException
    else 
      this match
        case Node(key, children) => path.segs match
          case x::y::Nil => Node(key, children.dropWhile(y==_.key):+Node(y, Nil))
          case xs => 
            children.find(_.key==xs.tail.head) match
              case None => Node(key, children.dropWhile(xs.tail.head==_.key):+Node(xs.tail.head, Nil).updated(Path(xs.tail)))
              case Some(x) => Node(key, children.map(child => if child==x then x.updated(Path(xs.tail)) else child))

        case Leaf(key, payload2) => path.segs match
          case xs => Node(key, List(Node(xs.tail.head, Nil).updated(Path(xs.tail))))

  def updated(path: Path[K], payload: V): Tree[K, V] = 
    if path.segs.isEmpty || path.segs.head!=this.key
    then throw Tree.IllegalPathException
    else 
      this match
        case Node(key, children) => path.segs match
          case x::y::Nil => Node(key, children.dropWhile(y==_.key):+Leaf(y, payload))
          case xs => 
            children.find(_.key==xs.tail.head) match
              case None => Node(key, children.dropWhile(xs.tail.head==_.key):+Node(xs.tail.head, Nil).updated(Path(xs.tail), payload))
              case Some(x) => Node(key, children.map(child => if child==x then x.updated(Path(xs.tail), payload) else child))

        case Leaf(key, payload2) => path.segs match
          case xs => Node(key, List(Node(xs.tail.head, Nil).updated(Path(xs.tail), payload)))
              

object Tree extends TreeComp:
  def apply[K, V](key: K): Tree[K, V] = Node(key, Nil)

  def apply[K, V](path: Path[K]): Tree[K, V] = 
    if path.segs==Nil then throw Tree.IllegalPathException
    Node(path.segs.head, Nil).updated(path)

  def apply[K, V](path: Path[K], payload: V): Tree[K, V] = 
    if path.segs==Nil then throw Tree.IllegalPathException
    Node(path.segs.head, Nil).updated(path, payload)



error stacktrace:
dotty.tools.dotc.core.Types$NamedType.argDenot(Types.scala:2329)
	dotty.tools.dotc.core.Types$NamedType.fromDesignator$1(Types.scala:2243)
	dotty.tools.dotc.core.Types$NamedType.computeDenot(Types.scala:2261)
	dotty.tools.dotc.core.Types$NamedType.denot(Types.scala:2216)
	dotty.tools.dotc.core.Types$NamedType.info(Types.scala:2204)
	dotty.tools.dotc.core.Types$Type.isRef(Types.scala:189)
	dotty.tools.dotc.printing.PlainPrinter.toTextRHS$$anonfun$1(PlainPrinter.scala:395)
	dotty.tools.dotc.printing.MessageLimiter.controlled(MessageLimiter.scala:23)
	dotty.tools.dotc.printing.PlainPrinter.controlled(PlainPrinter.scala:36)
	dotty.tools.dotc.printing.PlainPrinter.toTextRHS(PlainPrinter.scala:426)
	dotty.tools.dotc.printing.PlainPrinter.toText$$anonfun$1(PlainPrinter.scala:146)
	dotty.tools.dotc.printing.MessageLimiter.controlled(MessageLimiter.scala:23)
	dotty.tools.dotc.printing.PlainPrinter.controlled(PlainPrinter.scala:36)
	dotty.tools.dotc.printing.PlainPrinter.toText(PlainPrinter.scala:256)
	dotty.tools.dotc.printing.RefinedPrinter.toText$$anonfun$1(RefinedPrinter.scala:296)
	dotty.tools.dotc.printing.MessageLimiter.controlled(MessageLimiter.scala:23)
	dotty.tools.dotc.printing.PlainPrinter.controlled(PlainPrinter.scala:36)
	dotty.tools.dotc.printing.RefinedPrinter.toText(RefinedPrinter.scala:298)
	scala.meta.internal.pc.printer.DotcPrinter$Std.toText(DotcPrinter.scala:96)
	scala.meta.internal.pc.printer.DotcPrinter$Std.tpe(DotcPrinter.scala:41)
	scala.meta.internal.pc.printer.MetalsPrinter.tpe(MetalsPrinter.scala:91)
	scala.meta.internal.pc.printer.MetalsPrinter.paramLabel(MetalsPrinter.scala:376)
	scala.meta.internal.pc.printer.MetalsPrinter.$anonfun$5(MetalsPrinter.scala:209)
	scala.collection.immutable.List.flatMap(List.scala:293)
	scala.meta.internal.pc.printer.MetalsPrinter.label$1$$anonfun$1(MetalsPrinter.scala:212)
	scala.collection.immutable.List.flatMap(List.scala:293)
	scala.meta.internal.pc.printer.MetalsPrinter.label$1(MetalsPrinter.scala:217)
	scala.meta.internal.pc.printer.MetalsPrinter.defaultMethodSignature(MetalsPrinter.scala:220)
	scala.meta.internal.pc.printer.MetalsPrinter.hoverSymbol(MetalsPrinter.scala:118)
	scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:121)
	scala.meta.internal.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:325)
